
007Modbus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000318  08006778  08006778  00016778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a90  08006a90  000200b0  2**0
                  CONTENTS
  4 .ARM          00000008  08006a90  08006a90  00016a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a98  08006a98  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a98  08006a98  00016a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a9c  08006a9c  00016a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  08006aa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200b0  2**0
                  CONTENTS
 10 .bss          000001b8  200000b0  200000b0  000200b0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000268  20000268  000200b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009829  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c8e  00000000  00000000  00029909  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000968  00000000  00000000  0002b598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000898  00000000  00000000  0002bf00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020be5  00000000  00000000  0002c798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000aaa4  00000000  00000000  0004d37d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4ea0  00000000  00000000  00057e21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012ccc1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003074  00000000  00000000  0012cd14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b0 	.word	0x200000b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006760 	.word	0x08006760

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b4 	.word	0x200000b4
 80001cc:	08006760 	.word	0x08006760

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <cs_sel>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay(void){
	for(uint32_t i=0;i<250000;i++);
}
void cs_sel() {
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET); //CS LOW
 8000578:	2200      	movs	r2, #0
 800057a:	2180      	movs	r1, #128	; 0x80
 800057c:	4802      	ldr	r0, [pc, #8]	; (8000588 <cs_sel+0x14>)
 800057e:	f002 fb79 	bl	8002c74 <HAL_GPIO_WritePin>
}
 8000582:	bf00      	nop
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	40020c00 	.word	0x40020c00

0800058c <cs_desel>:

void cs_desel() {
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET); //CS HIGH
 8000590:	2201      	movs	r2, #1
 8000592:	2180      	movs	r1, #128	; 0x80
 8000594:	4802      	ldr	r0, [pc, #8]	; (80005a0 <cs_desel+0x14>)
 8000596:	f002 fb6d 	bl	8002c74 <HAL_GPIO_WritePin>
}
 800059a:	bf00      	nop
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	40020c00 	.word	0x40020c00

080005a4 <W5500_ReadBuff>:

void W5500_ReadBuff(uint8_t *buffer, uint16_t len){
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
 80005ac:	460b      	mov	r3, r1
 80005ae:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Receive(&hspi1, buffer, len, HAL_MAX_DELAY);
 80005b0:	887a      	ldrh	r2, [r7, #2]
 80005b2:	f04f 33ff 	mov.w	r3, #4294967295
 80005b6:	6879      	ldr	r1, [r7, #4]
 80005b8:	4803      	ldr	r0, [pc, #12]	; (80005c8 <W5500_ReadBuff+0x24>)
 80005ba:	f003 f99e 	bl	80038fa <HAL_SPI_Receive>
}
 80005be:	bf00      	nop
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	200000cc 	.word	0x200000cc

080005cc <W5500_WriteBuff>:

void W5500_WriteBuff(uint8_t *buffer, uint16_t len){
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
 80005d4:	460b      	mov	r3, r1
 80005d6:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Transmit(&hspi1, buffer, len, HAL_MAX_DELAY);
 80005d8:	887a      	ldrh	r2, [r7, #2]
 80005da:	f04f 33ff 	mov.w	r3, #4294967295
 80005de:	6879      	ldr	r1, [r7, #4]
 80005e0:	4803      	ldr	r0, [pc, #12]	; (80005f0 <W5500_WriteBuff+0x24>)
 80005e2:	f003 f84e 	bl	8003682 <HAL_SPI_Transmit>
}
 80005e6:	bf00      	nop
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	200000cc 	.word	0x200000cc

080005f4 <W5500_ReadByte>:


uint8_t W5500_ReadByte(void) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
    uint8_t byte;
    W5500_ReadBuff(&byte, sizeof(byte));
 80005fa:	1dfb      	adds	r3, r7, #7
 80005fc:	2101      	movs	r1, #1
 80005fe:	4618      	mov	r0, r3
 8000600:	f7ff ffd0 	bl	80005a4 <W5500_ReadBuff>
    return byte;
 8000604:	79fb      	ldrb	r3, [r7, #7]
}
 8000606:	4618      	mov	r0, r3
 8000608:	3708      	adds	r7, #8
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}

0800060e <W5500_WriteByte>:

void W5500_WriteByte(uint8_t byte) {
 800060e:	b580      	push	{r7, lr}
 8000610:	b082      	sub	sp, #8
 8000612:	af00      	add	r7, sp, #0
 8000614:	4603      	mov	r3, r0
 8000616:	71fb      	strb	r3, [r7, #7]
    W5500_WriteBuff(&byte, sizeof(byte));
 8000618:	1dfb      	adds	r3, r7, #7
 800061a:	2101      	movs	r1, #1
 800061c:	4618      	mov	r0, r3
 800061e:	f7ff ffd5 	bl	80005cc <W5500_WriteBuff>
}
 8000622:	bf00      	nop
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
	...

0800062c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800062c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000630:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 8000634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  REG[100] = GPIO_PIN_SET; //Dijital çıkış için kullanılacak
 8000636:	4a6d      	ldr	r2, [pc, #436]	; (80007ec <main+0x1c0>)
 8000638:	2301      	movs	r3, #1
 800063a:	f8a2 30c8 	strh.w	r3, [r2, #200]	; 0xc8
  REG[101] = GPIO_PIN_RESET; //Dijital çıkış için kullanılacak
 800063e:	4a6b      	ldr	r2, [pc, #428]	; (80007ec <main+0x1c0>)
 8000640:	2300      	movs	r3, #0
 8000642:	f8a2 30ca 	strh.w	r3, [r2, #202]	; 0xca



  wizchip_init(0, 0);
 8000646:	2100      	movs	r1, #0
 8000648:	2000      	movs	r0, #0
 800064a:	f004 fc59 	bl	8004f00 <wizchip_init>
  reg_wizchip_cs_cbfunc(cs_sel, cs_desel);
 800064e:	4968      	ldr	r1, [pc, #416]	; (80007f0 <main+0x1c4>)
 8000650:	4868      	ldr	r0, [pc, #416]	; (80007f4 <main+0x1c8>)
 8000652:	f004 fbb7 	bl	8004dc4 <reg_wizchip_cs_cbfunc>
  reg_wizchip_spi_cbfunc(W5500_ReadByte,W5500_WriteByte);
 8000656:	4968      	ldr	r1, [pc, #416]	; (80007f8 <main+0x1cc>)
 8000658:	4868      	ldr	r0, [pc, #416]	; (80007fc <main+0x1d0>)
 800065a:	f004 fbd9 	bl	8004e10 <reg_wizchip_spi_cbfunc>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065e:	f001 fffd 	bl	800265c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000662:	f001 f9d1 	bl	8001a08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000666:	f001 fa6f 	bl	8001b48 <MX_GPIO_Init>
  MX_SPI1_Init();
 800066a:	f001 fa37 	bl	8001adc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  // Ağ bilgilerini yapılandırma
  wiz_NetInfo netInfo = {
 800066e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000672:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8000676:	461a      	mov	r2, r3
 8000678:	2300      	movs	r3, #0
 800067a:	6013      	str	r3, [r2, #0]
 800067c:	6053      	str	r3, [r2, #4]
 800067e:	6093      	str	r3, [r2, #8]
 8000680:	60d3      	str	r3, [r2, #12]
 8000682:	6113      	str	r3, [r2, #16]
 8000684:	f8c2 3013 	str.w	r3, [r2, #19]
    .mac = {mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]},
 8000688:	4b5d      	ldr	r3, [pc, #372]	; (8000800 <main+0x1d4>)
 800068a:	7819      	ldrb	r1, [r3, #0]
  wiz_NetInfo netInfo = {
 800068c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000690:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 8000694:	460b      	mov	r3, r1
 8000696:	7013      	strb	r3, [r2, #0]
    .mac = {mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]},
 8000698:	4b59      	ldr	r3, [pc, #356]	; (8000800 <main+0x1d4>)
 800069a:	7859      	ldrb	r1, [r3, #1]
  wiz_NetInfo netInfo = {
 800069c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80006a0:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 80006a4:	460b      	mov	r3, r1
 80006a6:	7053      	strb	r3, [r2, #1]
    .mac = {mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]},
 80006a8:	4b55      	ldr	r3, [pc, #340]	; (8000800 <main+0x1d4>)
 80006aa:	7899      	ldrb	r1, [r3, #2]
  wiz_NetInfo netInfo = {
 80006ac:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80006b0:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 80006b4:	460b      	mov	r3, r1
 80006b6:	7093      	strb	r3, [r2, #2]
    .mac = {mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]},
 80006b8:	4b51      	ldr	r3, [pc, #324]	; (8000800 <main+0x1d4>)
 80006ba:	78d9      	ldrb	r1, [r3, #3]
  wiz_NetInfo netInfo = {
 80006bc:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80006c0:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 80006c4:	460b      	mov	r3, r1
 80006c6:	70d3      	strb	r3, [r2, #3]
    .mac = {mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]},
 80006c8:	4b4d      	ldr	r3, [pc, #308]	; (8000800 <main+0x1d4>)
 80006ca:	7919      	ldrb	r1, [r3, #4]
  wiz_NetInfo netInfo = {
 80006cc:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80006d0:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 80006d4:	460b      	mov	r3, r1
 80006d6:	7113      	strb	r3, [r2, #4]
    .mac = {mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]},
 80006d8:	4b49      	ldr	r3, [pc, #292]	; (8000800 <main+0x1d4>)
 80006da:	7959      	ldrb	r1, [r3, #5]
  wiz_NetInfo netInfo = {
 80006dc:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80006e0:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 80006e4:	460b      	mov	r3, r1
 80006e6:	7153      	strb	r3, [r2, #5]
    .ip = {ip[0], ip[1], ip[2], ip[3]},
 80006e8:	4b46      	ldr	r3, [pc, #280]	; (8000804 <main+0x1d8>)
 80006ea:	7819      	ldrb	r1, [r3, #0]
  wiz_NetInfo netInfo = {
 80006ec:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80006f0:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 80006f4:	460b      	mov	r3, r1
 80006f6:	7193      	strb	r3, [r2, #6]
    .ip = {ip[0], ip[1], ip[2], ip[3]},
 80006f8:	4b42      	ldr	r3, [pc, #264]	; (8000804 <main+0x1d8>)
 80006fa:	7859      	ldrb	r1, [r3, #1]
  wiz_NetInfo netInfo = {
 80006fc:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000700:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 8000704:	460b      	mov	r3, r1
 8000706:	71d3      	strb	r3, [r2, #7]
    .ip = {ip[0], ip[1], ip[2], ip[3]},
 8000708:	4b3e      	ldr	r3, [pc, #248]	; (8000804 <main+0x1d8>)
 800070a:	7899      	ldrb	r1, [r3, #2]
  wiz_NetInfo netInfo = {
 800070c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000710:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 8000714:	460b      	mov	r3, r1
 8000716:	7213      	strb	r3, [r2, #8]
    .ip = {ip[0], ip[1], ip[2], ip[3]},
 8000718:	4b3a      	ldr	r3, [pc, #232]	; (8000804 <main+0x1d8>)
 800071a:	78d9      	ldrb	r1, [r3, #3]
  wiz_NetInfo netInfo = {
 800071c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000720:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 8000724:	460b      	mov	r3, r1
 8000726:	7253      	strb	r3, [r2, #9]
    .sn = {sn[0], sn[1], sn[2], sn[3]},
 8000728:	4b37      	ldr	r3, [pc, #220]	; (8000808 <main+0x1dc>)
 800072a:	7819      	ldrb	r1, [r3, #0]
  wiz_NetInfo netInfo = {
 800072c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000730:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 8000734:	460b      	mov	r3, r1
 8000736:	7293      	strb	r3, [r2, #10]
    .sn = {sn[0], sn[1], sn[2], sn[3]},
 8000738:	4b33      	ldr	r3, [pc, #204]	; (8000808 <main+0x1dc>)
 800073a:	7859      	ldrb	r1, [r3, #1]
  wiz_NetInfo netInfo = {
 800073c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000740:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 8000744:	460b      	mov	r3, r1
 8000746:	72d3      	strb	r3, [r2, #11]
    .sn = {sn[0], sn[1], sn[2], sn[3]},
 8000748:	4b2f      	ldr	r3, [pc, #188]	; (8000808 <main+0x1dc>)
 800074a:	7899      	ldrb	r1, [r3, #2]
  wiz_NetInfo netInfo = {
 800074c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000750:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 8000754:	460b      	mov	r3, r1
 8000756:	7313      	strb	r3, [r2, #12]
    .sn = {sn[0], sn[1], sn[2], sn[3]},
 8000758:	4b2b      	ldr	r3, [pc, #172]	; (8000808 <main+0x1dc>)
 800075a:	78d9      	ldrb	r1, [r3, #3]
  wiz_NetInfo netInfo = {
 800075c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000760:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 8000764:	460b      	mov	r3, r1
 8000766:	7353      	strb	r3, [r2, #13]
    .gw = {gw[0], gw[1], gw[2], gw[3]}
 8000768:	4b28      	ldr	r3, [pc, #160]	; (800080c <main+0x1e0>)
 800076a:	7819      	ldrb	r1, [r3, #0]
  wiz_NetInfo netInfo = {
 800076c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000770:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 8000774:	460b      	mov	r3, r1
 8000776:	7393      	strb	r3, [r2, #14]
    .gw = {gw[0], gw[1], gw[2], gw[3]}
 8000778:	4b24      	ldr	r3, [pc, #144]	; (800080c <main+0x1e0>)
 800077a:	7859      	ldrb	r1, [r3, #1]
  wiz_NetInfo netInfo = {
 800077c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000780:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 8000784:	460b      	mov	r3, r1
 8000786:	73d3      	strb	r3, [r2, #15]
    .gw = {gw[0], gw[1], gw[2], gw[3]}
 8000788:	4b20      	ldr	r3, [pc, #128]	; (800080c <main+0x1e0>)
 800078a:	7899      	ldrb	r1, [r3, #2]
  wiz_NetInfo netInfo = {
 800078c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000790:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 8000794:	460b      	mov	r3, r1
 8000796:	7413      	strb	r3, [r2, #16]
    .gw = {gw[0], gw[1], gw[2], gw[3]}
 8000798:	4b1c      	ldr	r3, [pc, #112]	; (800080c <main+0x1e0>)
 800079a:	78d9      	ldrb	r1, [r3, #3]
  wiz_NetInfo netInfo = {
 800079c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80007a0:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 80007a4:	460b      	mov	r3, r1
 80007a6:	7453      	strb	r3, [r2, #17]
  };

  wizchip_setnetinfo(&netInfo);
 80007a8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80007ac:	4618      	mov	r0, r3
 80007ae:	f004 fc33 	bl	8005018 <wizchip_setnetinfo>

  // Ayarlanan ağ bilgilerini kontrol edin
  wizchip_getnetinfo(&netInfo);
 80007b2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80007b6:	4618      	mov	r0, r3
 80007b8:	f004 fc6e 	bl	8005098 <wizchip_getnetinfo>

  // Soket başlatma
  uint8_t socketNumber = 0;
 80007bc:	2300      	movs	r3, #0
 80007be:	f887 31d2 	strb.w	r3, [r7, #466]	; 0x1d2
  socket(socketNumber, Sn_MR_TCP, 502, 0);
 80007c2:	f897 01d2 	ldrb.w	r0, [r7, #466]	; 0x1d2
 80007c6:	2300      	movs	r3, #0
 80007c8:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 80007cc:	2101      	movs	r1, #1
 80007ce:	f003 fc77 	bl	80040c0 <socket>

  if (listen(socketNumber) == SOCK_OK){
 80007d2:	f897 31d2 	ldrb.w	r3, [r7, #466]	; 0x1d2
 80007d6:	4618      	mov	r0, r3
 80007d8:	f003 fdf6 	bl	80043c8 <listen>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b01      	cmp	r3, #1
 80007e0:	d118      	bne.n	8000814 <main+0x1e8>
	  printf("Listening on port 502\n");
 80007e2:	480b      	ldr	r0, [pc, #44]	; (8000810 <main+0x1e4>)
 80007e4:	f004 fe6e 	bl	80054c4 <puts>
 80007e8:	e017      	b.n	800081a <main+0x1ee>
 80007ea:	bf00      	nop
 80007ec:	20000124 	.word	0x20000124
 80007f0:	0800058d 	.word	0x0800058d
 80007f4:	08000575 	.word	0x08000575
 80007f8:	0800060f 	.word	0x0800060f
 80007fc:	080005f5 	.word	0x080005f5
 8000800:	20000000 	.word	0x20000000
 8000804:	20000008 	.word	0x20000008
 8000808:	2000000c 	.word	0x2000000c
 800080c:	20000010 	.word	0x20000010
 8000810:	08006778 	.word	0x08006778
  }
  else{
	  printf("Not connected\n");
 8000814:	48b5      	ldr	r0, [pc, #724]	; (8000aec <main+0x4c0>)
 8000816:	f004 fe55 	bl	80054c4 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
    /* USER CODE END WHILE */
	 uint8_t status = getSn_SR(socketNumber);
 800081a:	f897 31d2 	ldrb.w	r3, [r7, #466]	; 0x1d2
 800081e:	009b      	lsls	r3, r3, #2
 8000820:	3301      	adds	r3, #1
 8000822:	00db      	lsls	r3, r3, #3
 8000824:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000828:	4618      	mov	r0, r3
 800082a:	f003 ffd7 	bl	80047dc <WIZCHIP_READ>
 800082e:	4603      	mov	r3, r0
 8000830:	f887 31d1 	strb.w	r3, [r7, #465]	; 0x1d1
	 if(status == SOCK_ESTABLISHED){
 8000834:	f897 31d1 	ldrb.w	r3, [r7, #465]	; 0x1d1
 8000838:	2b17      	cmp	r3, #23
 800083a:	d1ee      	bne.n	800081a <main+0x1ee>
		 //recv(socketNumber, (uint8_t *)receive_message, elemansayisi_array(receive_message));
		recv(socketNumber, (uint8_t *)receive_message, 12);
 800083c:	f897 31d2 	ldrb.w	r3, [r7, #466]	; 0x1d2
 8000840:	220c      	movs	r2, #12
 8000842:	49ab      	ldr	r1, [pc, #684]	; (8000af0 <main+0x4c4>)
 8000844:	4618      	mov	r0, r3
 8000846:	f003 ff13 	bl	8004670 <recv>
		unsigned short transaction_id = (receive_message[0] << 8) | receive_message[1];
 800084a:	4ba9      	ldr	r3, [pc, #676]	; (8000af0 <main+0x4c4>)
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	021b      	lsls	r3, r3, #8
 8000850:	b21a      	sxth	r2, r3
 8000852:	4ba7      	ldr	r3, [pc, #668]	; (8000af0 <main+0x4c4>)
 8000854:	785b      	ldrb	r3, [r3, #1]
 8000856:	b21b      	sxth	r3, r3
 8000858:	4313      	orrs	r3, r2
 800085a:	b21b      	sxth	r3, r3
 800085c:	f8a7 31ce 	strh.w	r3, [r7, #462]	; 0x1ce
		unsigned short protocol_id = (receive_message[2] << 8) | receive_message[3];
 8000860:	4ba3      	ldr	r3, [pc, #652]	; (8000af0 <main+0x4c4>)
 8000862:	789b      	ldrb	r3, [r3, #2]
 8000864:	021b      	lsls	r3, r3, #8
 8000866:	b21a      	sxth	r2, r3
 8000868:	4ba1      	ldr	r3, [pc, #644]	; (8000af0 <main+0x4c4>)
 800086a:	78db      	ldrb	r3, [r3, #3]
 800086c:	b21b      	sxth	r3, r3
 800086e:	4313      	orrs	r3, r2
 8000870:	b21b      	sxth	r3, r3
 8000872:	f8a7 31cc 	strh.w	r3, [r7, #460]	; 0x1cc
		unsigned short t_length = (receive_message[4]<<8) | receive_message[5];
 8000876:	4b9e      	ldr	r3, [pc, #632]	; (8000af0 <main+0x4c4>)
 8000878:	791b      	ldrb	r3, [r3, #4]
 800087a:	021b      	lsls	r3, r3, #8
 800087c:	b21a      	sxth	r2, r3
 800087e:	4b9c      	ldr	r3, [pc, #624]	; (8000af0 <main+0x4c4>)
 8000880:	795b      	ldrb	r3, [r3, #5]
 8000882:	b21b      	sxth	r3, r3
 8000884:	4313      	orrs	r3, r2
 8000886:	b21b      	sxth	r3, r3
 8000888:	f8a7 31ca 	strh.w	r3, [r7, #458]	; 0x1ca

		uint8_t unit_id = receive_message[6];
 800088c:	4b98      	ldr	r3, [pc, #608]	; (8000af0 <main+0x4c4>)
 800088e:	799b      	ldrb	r3, [r3, #6]
 8000890:	f887 31c9 	strb.w	r3, [r7, #457]	; 0x1c9
		uint8_t function_code = receive_message[7];
 8000894:	4b96      	ldr	r3, [pc, #600]	; (8000af0 <main+0x4c4>)
 8000896:	79db      	ldrb	r3, [r3, #7]
 8000898:	f887 31c8 	strb.w	r3, [r7, #456]	; 0x1c8
	    uint8_t MBAP[7];

	    MBAP[0] = highByte(transaction_id);
 800089c:	f8b7 31ce 	ldrh.w	r3, [r7, #462]	; 0x1ce
 80008a0:	0a1b      	lsrs	r3, r3, #8
 80008a2:	b29b      	uxth	r3, r3
 80008a4:	b2d9      	uxtb	r1, r3
 80008a6:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80008aa:	f5a3 72b6 	sub.w	r2, r3, #364	; 0x16c
 80008ae:	460b      	mov	r3, r1
 80008b0:	7013      	strb	r3, [r2, #0]
	    MBAP[1] = lowByte(transaction_id);
 80008b2:	f8b7 31ce 	ldrh.w	r3, [r7, #462]	; 0x1ce
 80008b6:	b2d9      	uxtb	r1, r3
 80008b8:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80008bc:	f5a3 72b6 	sub.w	r2, r3, #364	; 0x16c
 80008c0:	460b      	mov	r3, r1
 80008c2:	7053      	strb	r3, [r2, #1]
	    MBAP[2] = highByte(protocol_id);
 80008c4:	f8b7 31cc 	ldrh.w	r3, [r7, #460]	; 0x1cc
 80008c8:	0a1b      	lsrs	r3, r3, #8
 80008ca:	b29b      	uxth	r3, r3
 80008cc:	b2d9      	uxtb	r1, r3
 80008ce:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80008d2:	f5a3 72b6 	sub.w	r2, r3, #364	; 0x16c
 80008d6:	460b      	mov	r3, r1
 80008d8:	7093      	strb	r3, [r2, #2]
	    MBAP[3] = lowByte(protocol_id);
 80008da:	f8b7 31cc 	ldrh.w	r3, [r7, #460]	; 0x1cc
 80008de:	b2d9      	uxtb	r1, r3
 80008e0:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80008e4:	f5a3 72b6 	sub.w	r2, r3, #364	; 0x16c
 80008e8:	460b      	mov	r3, r1
 80008ea:	70d3      	strb	r3, [r2, #3]

	    /*MBAP[4] = highByte(response_t_length_f3_f4); \
	                                                    --------> Bu iki byte sadece Function3 ve Function4 için geçerli,
	                                                    --------> o yüzden bu iki byte ilgili fonksiyonlarda tanımlanmışlardır.
	    MBAP[5] = lowByte(response_t_length_f3_f4);  */
	    MBAP[6] = unit_id;
 80008ec:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80008f0:	f5a3 72b6 	sub.w	r2, r3, #364	; 0x16c
 80008f4:	f897 31c9 	ldrb.w	r3, [r7, #457]	; 0x1c9
 80008f8:	7193      	strb	r3, [r2, #6]

	    if(unit_id ==1){
 80008fa:	f897 31c9 	ldrb.w	r3, [r7, #457]	; 0x1c9
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d18b      	bne.n	800081a <main+0x1ee>
	    	if(function_code == 1){
 8000902:	f897 31c8 	ldrb.w	r3, [r7, #456]	; 0x1c8
 8000906:	2b01      	cmp	r3, #1
 8000908:	f040 81c9 	bne.w	8000c9e <main+0x672>
 800090c:	466b      	mov	r3, sp
 800090e:	461e      	mov	r6, r3
	            unsigned short start_address = (receive_message[8] << 8)| receive_message[9];    //Coils de Output Address olarak alınacak.
 8000910:	4b77      	ldr	r3, [pc, #476]	; (8000af0 <main+0x4c4>)
 8000912:	7a1b      	ldrb	r3, [r3, #8]
 8000914:	021b      	lsls	r3, r3, #8
 8000916:	b21a      	sxth	r2, r3
 8000918:	4b75      	ldr	r3, [pc, #468]	; (8000af0 <main+0x4c4>)
 800091a:	7a5b      	ldrb	r3, [r3, #9]
 800091c:	b21b      	sxth	r3, r3
 800091e:	4313      	orrs	r3, r2
 8000920:	b219      	sxth	r1, r3
 8000922:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000926:	f5a3 7293 	sub.w	r2, r3, #294	; 0x126
 800092a:	460b      	mov	r3, r1
 800092c:	8013      	strh	r3, [r2, #0]
	            unsigned short quantity_of_inputs = (receive_message[10] << 8)| receive_message[11];
 800092e:	4b70      	ldr	r3, [pc, #448]	; (8000af0 <main+0x4c4>)
 8000930:	7a9b      	ldrb	r3, [r3, #10]
 8000932:	021b      	lsls	r3, r3, #8
 8000934:	b21a      	sxth	r2, r3
 8000936:	4b6e      	ldr	r3, [pc, #440]	; (8000af0 <main+0x4c4>)
 8000938:	7adb      	ldrb	r3, [r3, #11]
 800093a:	b21b      	sxth	r3, r3
 800093c:	4313      	orrs	r3, r2
 800093e:	b219      	sxth	r1, r3
 8000940:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000944:	f5a3 7294 	sub.w	r2, r3, #296	; 0x128
 8000948:	460b      	mov	r3, r1
 800094a:	8013      	strh	r3, [r2, #0]
	            uint8_t response_pdu_length;
	            uint8_t byte_count;
	            //MBAP mesaj uzunluğunu bulmak için quantity of inputs sayısına bakılmalıdır.
	            //Fonksiyondaki mantık burada da yapılmıştır.
	            if(quantity_of_inputs >8){
 800094c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000950:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000954:	881b      	ldrh	r3, [r3, #0]
 8000956:	2b08      	cmp	r3, #8
 8000958:	d918      	bls.n	800098c <main+0x360>
	              byte_count = quantity_of_inputs /8;
 800095a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800095e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000962:	881b      	ldrh	r3, [r3, #0]
 8000964:	08db      	lsrs	r3, r3, #3
 8000966:	b29b      	uxth	r3, r3
 8000968:	f887 31d3 	strb.w	r3, [r7, #467]	; 0x1d3
	              if(quantity_of_inputs %8 != 0){
 800096c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000970:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000974:	881b      	ldrh	r3, [r3, #0]
 8000976:	f003 0307 	and.w	r3, r3, #7
 800097a:	b29b      	uxth	r3, r3
 800097c:	2b00      	cmp	r3, #0
 800097e:	d008      	beq.n	8000992 <main+0x366>
	                byte_count++;
 8000980:	f897 31d3 	ldrb.w	r3, [r7, #467]	; 0x1d3
 8000984:	3301      	adds	r3, #1
 8000986:	f887 31d3 	strb.w	r3, [r7, #467]	; 0x1d3
 800098a:	e002      	b.n	8000992 <main+0x366>
	              }
	            }else{
	              byte_count = 1;
 800098c:	2301      	movs	r3, #1
 800098e:	f887 31d3 	strb.w	r3, [r7, #467]	; 0x1d3
	            }
	            //function code(1 byte) + byte count (1 byte)
	            response_pdu_length = byte_count + 3;
 8000992:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000996:	f2a3 1229 	subw	r2, r3, #297	; 0x129
 800099a:	f897 31d3 	ldrb.w	r3, [r7, #467]	; 0x1d3
 800099e:	3303      	adds	r3, #3
 80009a0:	7013      	strb	r3, [r2, #0]
	            MBAP[4] = highByte(response_pdu_length);
 80009a2:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80009a6:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	121b      	asrs	r3, r3, #8
 80009ae:	b2d9      	uxtb	r1, r3
 80009b0:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80009b4:	f5a3 72b6 	sub.w	r2, r3, #364	; 0x16c
 80009b8:	460b      	mov	r3, r1
 80009ba:	7113      	strb	r3, [r2, #4]
	            MBAP[5] = lowByte(response_pdu_length);
 80009bc:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80009c0:	f5a3 72b6 	sub.w	r2, r3, #364	; 0x16c
 80009c4:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80009c8:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	7153      	strb	r3, [r2, #5]
	            //Size RES_PDU boyutunu tanımla
	            int size_RES_PDU = byte_count + 2;
 80009d0:	f897 11d3 	ldrb.w	r1, [r7, #467]	; 0x1d3
 80009d4:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80009d8:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 80009dc:	1c8b      	adds	r3, r1, #2
 80009de:	6013      	str	r3, [r2, #0]

	            //Fonksiyonu çağır ve geçici olarak PDU temp pointera ata (dönen değerlerin başlangıç adresi)

	            uint8_t *RES_PDU_TEMP = READ_COILS(function_code,start_address,quantity_of_inputs);
 80009e0:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80009e4:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80009e8:	881b      	ldrh	r3, [r3, #0]
 80009ea:	b2d9      	uxtb	r1, r3
 80009ec:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80009f0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80009f4:	881b      	ldrh	r3, [r3, #0]
 80009f6:	b2da      	uxtb	r2, r3
 80009f8:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80009fc:	f5a3 749a 	sub.w	r4, r3, #308	; 0x134
 8000a00:	f897 31c8 	ldrb.w	r3, [r7, #456]	; 0x1c8
 8000a04:	4618      	mov	r0, r3
 8000a06:	f001 f8ef 	bl	8001be8 <READ_COILS>
 8000a0a:	6020      	str	r0, [r4, #0]
	            //PDU arrayini olustur
	            uint8_t RES_PDU_1[size_RES_PDU];
 8000a0c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000a10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000a14:	681d      	ldr	r5, [r3, #0]
 8000a16:	1e6a      	subs	r2, r5, #1
 8000a18:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000a1c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	462a      	mov	r2, r5
 8000a24:	2300      	movs	r3, #0
 8000a26:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 8000a2a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8000a2e:	f04f 0200 	mov.w	r2, #0
 8000a32:	f04f 0300 	mov.w	r3, #0
 8000a36:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8000a3a:	00cb      	lsls	r3, r1, #3
 8000a3c:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8000a40:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8000a44:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8000a48:	00ca      	lsls	r2, r1, #3
 8000a4a:	462a      	mov	r2, r5
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8000a52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8000a56:	f04f 0200 	mov.w	r2, #0
 8000a5a:	f04f 0300 	mov.w	r3, #0
 8000a5e:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8000a62:	00cb      	lsls	r3, r1, #3
 8000a64:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8000a68:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8000a6c:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8000a70:	00ca      	lsls	r2, r1, #3
 8000a72:	462a      	mov	r2, r5
 8000a74:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000a78:	f5a3 719e 	sub.w	r1, r3, #316	; 0x13c
 8000a7c:	1dd3      	adds	r3, r2, #7
 8000a7e:	08db      	lsrs	r3, r3, #3
 8000a80:	00db      	lsls	r3, r3, #3
 8000a82:	ebad 0d03 	sub.w	sp, sp, r3
 8000a86:	466b      	mov	r3, sp
 8000a88:	3300      	adds	r3, #0
 8000a8a:	600b      	str	r3, [r1, #0]

	            //Temp pointerindaki değerleri PDU_1 e al
	            for(int i=0;i<size_RES_PDU;i++){
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8000a92:	e017      	b.n	8000ac4 <main+0x498>
	              RES_PDU_1[i] = *(RES_PDU_TEMP +i);
 8000a94:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000a98:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000a9c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4413      	add	r3, r2
 8000aa4:	7819      	ldrb	r1, [r3, #0]
 8000aa6:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000aaa:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000ab4:	441a      	add	r2, r3
 8000ab6:	460b      	mov	r3, r1
 8000ab8:	7013      	strb	r3, [r2, #0]
	            for(int i=0;i<size_RES_PDU;i++){
 8000aba:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000abe:	3301      	adds	r3, #1
 8000ac0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8000ac4:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000ac8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000acc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	429a      	cmp	r2, r3
 8000ad4:	dbde      	blt.n	8000a94 <main+0x468>
	            }

	            //Temp PDU pointeri boşalt
	            free(RES_PDU_TEMP);
 8000ad6:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000ada:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000ade:	6818      	ldr	r0, [r3, #0]
 8000ae0:	f004 fb64 	bl	80051ac <free>

	            for(int i =0;i<size_RES_PDU;i++){
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8000aea:	e015      	b.n	8000b18 <main+0x4ec>
 8000aec:	08006790 	.word	0x08006790
 8000af0:	20000220 	.word	0x20000220
	            	printf("/x%x ",RES_PDU_1[i]);
 8000af4:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000af8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8000b02:	4413      	add	r3, r2
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	4619      	mov	r1, r3
 8000b08:	48d5      	ldr	r0, [pc, #852]	; (8000e60 <main+0x834>)
 8000b0a:	f004 fc3f 	bl	800538c <iprintf>
	            for(int i =0;i<size_RES_PDU;i++){
 8000b0e:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8000b12:	3301      	adds	r3, #1
 8000b14:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8000b18:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000b1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000b20:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	429a      	cmp	r2, r3
 8000b28:	dbe4      	blt.n	8000af4 <main+0x4c8>
	            }

	            printf("\n");
 8000b2a:	200a      	movs	r0, #10
 8000b2c:	f004 fc46 	bl	80053bc <putchar>


	            //Mesaj uzunluğunu belirle
	            int size_all = elemansayisi_array(MBAP) + elemansayisi_array(RES_PDU_1);
 8000b30:	462b      	mov	r3, r5
 8000b32:	1dda      	adds	r2, r3, #7
 8000b34:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000b38:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8000b3c:	601a      	str	r2, [r3, #0]
	            /*printf("Size all: %d\n",size_all);
	             printf("Size MBAP: %d\n",elemansayisi_array(MBAP));
	             printf("Size PDU: %d\n",elemansayisi_array(RES_PDU_1))*/

	            //Tek framede birleştirdiktan sonra geçici olarak bit temp pointera ata
	            uint8_t *COMPLETE_FRAME_TEMP = COMBINE_MBAP_PDU(MBAP,RES_PDU_1,elemansayisi_array(MBAP),elemansayisi_array(RES_PDU_1));
 8000b3e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000b42:	f5a3 74a2 	sub.w	r4, r3, #324	; 0x144
 8000b46:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000b4a:	f5a3 719e 	sub.w	r1, r3, #316	; 0x13c
 8000b4e:	f107 00bc 	add.w	r0, r7, #188	; 0xbc
 8000b52:	462b      	mov	r3, r5
 8000b54:	2207      	movs	r2, #7
 8000b56:	6809      	ldr	r1, [r1, #0]
 8000b58:	f001 fb64 	bl	8002224 <COMBINE_MBAP_PDU>
 8000b5c:	6020      	str	r0, [r4, #0]

	            //Complete frame oluştur
	            uint8_t COMPLETE_FRAME[size_all];
 8000b5e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000b62:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8000b66:	681c      	ldr	r4, [r3, #0]
 8000b68:	466b      	mov	r3, sp
 8000b6a:	461d      	mov	r5, r3
 8000b6c:	1e62      	subs	r2, r4, #1
 8000b6e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000b72:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	4622      	mov	r2, r4
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8000b80:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8000b84:	f04f 0200 	mov.w	r2, #0
 8000b88:	f04f 0300 	mov.w	r3, #0
 8000b8c:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8000b90:	00cb      	lsls	r3, r1, #3
 8000b92:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8000b96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8000b9a:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8000b9e:	00ca      	lsls	r2, r1, #3
 8000ba0:	4622      	mov	r2, r4
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8000ba8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000bac:	f04f 0200 	mov.w	r2, #0
 8000bb0:	f04f 0300 	mov.w	r3, #0
 8000bb4:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8000bb8:	00cb      	lsls	r3, r1, #3
 8000bba:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8000bbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8000bc2:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8000bc6:	00ca      	lsls	r2, r1, #3
 8000bc8:	4622      	mov	r2, r4
 8000bca:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000bce:	f5a3 71a6 	sub.w	r1, r3, #332	; 0x14c
 8000bd2:	1dd3      	adds	r3, r2, #7
 8000bd4:	08db      	lsrs	r3, r3, #3
 8000bd6:	00db      	lsls	r3, r3, #3
 8000bd8:	ebad 0d03 	sub.w	sp, sp, r3
 8000bdc:	466b      	mov	r3, sp
 8000bde:	3300      	adds	r3, #0
 8000be0:	600b      	str	r3, [r1, #0]

	            //Tempdeki değerleri Complete Frame e al
	            for(int i=0;i<size_all;i++){
 8000be2:	2300      	movs	r3, #0
 8000be4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000be8:	e017      	b.n	8000c1a <main+0x5ee>
	              COMPLETE_FRAME[i] = *(COMPLETE_FRAME_TEMP+i);
 8000bea:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000bee:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000bf2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	7819      	ldrb	r1, [r3, #0]
 8000bfc:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000c00:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8000c0a:	441a      	add	r2, r3
 8000c0c:	460b      	mov	r3, r1
 8000c0e:	7013      	strb	r3, [r2, #0]
	            for(int i=0;i<size_all;i++){
 8000c10:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8000c14:	3301      	adds	r3, #1
 8000c16:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000c1a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000c1e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8000c22:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	dbde      	blt.n	8000bea <main+0x5be>
	            }

	            //Temp pointeri boşalt
	            free(COMPLETE_FRAME_TEMP);
 8000c2c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000c30:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8000c34:	6818      	ldr	r0, [r3, #0]
 8000c36:	f004 fab9 	bl	80051ac <free>

	            printf("COMPLETE FRAME: \n");
 8000c3a:	488a      	ldr	r0, [pc, #552]	; (8000e64 <main+0x838>)
 8000c3c:	f004 fc42 	bl	80054c4 <puts>

	            for(int i=0;i<size_all;i++){
 8000c40:	2300      	movs	r3, #0
 8000c42:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000c46:	e011      	b.n	8000c6c <main+0x640>
	            	printf("/x%x ",COMPLETE_FRAME[i]);
 8000c48:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000c4c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000c56:	4413      	add	r3, r2
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4880      	ldr	r0, [pc, #512]	; (8000e60 <main+0x834>)
 8000c5e:	f004 fb95 	bl	800538c <iprintf>
	            for(int i=0;i<size_all;i++){
 8000c62:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000c66:	3301      	adds	r3, #1
 8000c68:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000c6c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000c70:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8000c74:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	429a      	cmp	r2, r3
 8000c7c:	dbe4      	blt.n	8000c48 <main+0x61c>
	            }

	            printf("\n");
 8000c7e:	200a      	movs	r0, #10
 8000c80:	f004 fb9c 	bl	80053bc <putchar>

	            send(socketNumber, (uint8_t *)COMPLETE_FRAME, elemansayisi_array(COMPLETE_FRAME));
 8000c84:	b2a2      	uxth	r2, r4
 8000c86:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000c8a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8000c8e:	f897 01d2 	ldrb.w	r0, [r7, #466]	; 0x1d2
 8000c92:	6819      	ldr	r1, [r3, #0]
 8000c94:	f003 fbf2 	bl	800447c <send>
 8000c98:	46ad      	mov	sp, r5
 8000c9a:	46b5      	mov	sp, r6
 8000c9c:	e5bd      	b.n	800081a <main+0x1ee>

	    	}else if(function_code == 2){
 8000c9e:	f897 31c8 	ldrb.w	r3, [r7, #456]	; 0x1c8
 8000ca2:	2b02      	cmp	r3, #2
 8000ca4:	f040 81c7 	bne.w	8001036 <main+0xa0a>
 8000ca8:	466b      	mov	r3, sp
 8000caa:	461e      	mov	r6, r3
	    		//unsigned short start_address = (receive_message[8]<<8) | receive_message[9];
	    		unsigned short quantity_of_inputs = (receive_message[10] << 8) | receive_message[11];
 8000cac:	4b6e      	ldr	r3, [pc, #440]	; (8000e68 <main+0x83c>)
 8000cae:	7a9b      	ldrb	r3, [r3, #10]
 8000cb0:	021b      	lsls	r3, r3, #8
 8000cb2:	b21a      	sxth	r2, r3
 8000cb4:	4b6c      	ldr	r3, [pc, #432]	; (8000e68 <main+0x83c>)
 8000cb6:	7adb      	ldrb	r3, [r3, #11]
 8000cb8:	b21b      	sxth	r3, r3
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	b219      	sxth	r1, r3
 8000cbe:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000cc2:	f5a3 7281 	sub.w	r2, r3, #258	; 0x102
 8000cc6:	460b      	mov	r3, r1
 8000cc8:	8013      	strh	r3, [r2, #0]
	    		uint8_t response_pdu_length;
	    		uint8_t byte_count;

	    		if(quantity_of_inputs >8){
 8000cca:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000cce:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8000cd2:	881b      	ldrh	r3, [r3, #0]
 8000cd4:	2b08      	cmp	r3, #8
 8000cd6:	d918      	bls.n	8000d0a <main+0x6de>
	    			byte_count = quantity_of_inputs / 8;
 8000cd8:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000cdc:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8000ce0:	881b      	ldrh	r3, [r3, #0]
 8000ce2:	08db      	lsrs	r3, r3, #3
 8000ce4:	b29b      	uxth	r3, r3
 8000ce6:	f887 31e7 	strb.w	r3, [r7, #487]	; 0x1e7
	    			if(quantity_of_inputs % 8 != 0){
 8000cea:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000cee:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8000cf2:	881b      	ldrh	r3, [r3, #0]
 8000cf4:	f003 0307 	and.w	r3, r3, #7
 8000cf8:	b29b      	uxth	r3, r3
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d008      	beq.n	8000d10 <main+0x6e4>
	    				byte_count++;
 8000cfe:	f897 31e7 	ldrb.w	r3, [r7, #487]	; 0x1e7
 8000d02:	3301      	adds	r3, #1
 8000d04:	f887 31e7 	strb.w	r3, [r7, #487]	; 0x1e7
 8000d08:	e002      	b.n	8000d10 <main+0x6e4>
	    			}
	    		}else{
	    			byte_count =1;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	f887 31e7 	strb.w	r3, [r7, #487]	; 0x1e7
	    		}

	    		//function code(1 byte) + byte count (1 byte)
	    		response_pdu_length = byte_count+3;
 8000d10:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000d14:	f2a3 1203 	subw	r2, r3, #259	; 0x103
 8000d18:	f897 31e7 	ldrb.w	r3, [r7, #487]	; 0x1e7
 8000d1c:	3303      	adds	r3, #3
 8000d1e:	7013      	strb	r3, [r2, #0]

	    		MBAP[4] = highByte(response_pdu_length);
 8000d20:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000d24:	f2a3 1303 	subw	r3, r3, #259	; 0x103
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	121b      	asrs	r3, r3, #8
 8000d2c:	b2d9      	uxtb	r1, r3
 8000d2e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000d32:	f5a3 72b6 	sub.w	r2, r3, #364	; 0x16c
 8000d36:	460b      	mov	r3, r1
 8000d38:	7113      	strb	r3, [r2, #4]
	    		MBAP[5] = lowByte(response_pdu_length);
 8000d3a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000d3e:	f5a3 72b6 	sub.w	r2, r3, #364	; 0x16c
 8000d42:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000d46:	f2a3 1303 	subw	r3, r3, #259	; 0x103
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	7153      	strb	r3, [r2, #5]

	            //Size RES_PDU boyutunu tanımla
	            int size_RES_PDU = byte_count + 2;
 8000d4e:	f897 11e7 	ldrb.w	r1, [r7, #487]	; 0x1e7
 8000d52:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000d56:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 8000d5a:	1c8b      	adds	r3, r1, #2
 8000d5c:	6013      	str	r3, [r2, #0]

	            uint8_t *RES_PDU_TEMP = READ_DISCRETE_INPUT(function_code,quantity_of_inputs);
 8000d5e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000d62:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8000d66:	881b      	ldrh	r3, [r3, #0]
 8000d68:	b2da      	uxtb	r2, r3
 8000d6a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000d6e:	f5a3 7486 	sub.w	r4, r3, #268	; 0x10c
 8000d72:	f897 31c8 	ldrb.w	r3, [r7, #456]	; 0x1c8
 8000d76:	4611      	mov	r1, r2
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f000 ffcb 	bl	8001d14 <READ_DISCRETE_INPUT>
 8000d7e:	6020      	str	r0, [r4, #0]

	            //PDU arrayini olustur
	            uint8_t RES_PDU_2[size_RES_PDU];
 8000d80:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000d84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000d88:	681d      	ldr	r5, [r3, #0]
 8000d8a:	1e6a      	subs	r2, r5, #1
 8000d8c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000d90:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	462a      	mov	r2, r5
 8000d98:	2300      	movs	r3, #0
 8000d9a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8000d9e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000da2:	f04f 0200 	mov.w	r2, #0
 8000da6:	f04f 0300 	mov.w	r3, #0
 8000daa:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8000dae:	00cb      	lsls	r3, r1, #3
 8000db0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8000db4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8000db8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8000dbc:	00ca      	lsls	r2, r1, #3
 8000dbe:	462a      	mov	r2, r5
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8000dc6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000dca:	f04f 0200 	mov.w	r2, #0
 8000dce:	f04f 0300 	mov.w	r3, #0
 8000dd2:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8000dd6:	00cb      	lsls	r3, r1, #3
 8000dd8:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8000ddc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8000de0:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8000de4:	00ca      	lsls	r2, r1, #3
 8000de6:	462a      	mov	r2, r5
 8000de8:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000dec:	f5a3 718a 	sub.w	r1, r3, #276	; 0x114
 8000df0:	1dd3      	adds	r3, r2, #7
 8000df2:	08db      	lsrs	r3, r3, #3
 8000df4:	00db      	lsls	r3, r3, #3
 8000df6:	ebad 0d03 	sub.w	sp, sp, r3
 8000dfa:	466b      	mov	r3, sp
 8000dfc:	3300      	adds	r3, #0
 8000dfe:	600b      	str	r3, [r1, #0]


	            //Temp pointerindaki değerleri PDU_1 e al
	            for(int i=0;i<size_RES_PDU;i++){
 8000e00:	2300      	movs	r3, #0
 8000e02:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000e06:	e017      	b.n	8000e38 <main+0x80c>
	              RES_PDU_2[i] = *(RES_PDU_TEMP +i);
 8000e08:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 8000e0c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000e10:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4413      	add	r3, r2
 8000e18:	7819      	ldrb	r1, [r3, #0]
 8000e1a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000e1e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000e28:	441a      	add	r2, r3
 8000e2a:	460b      	mov	r3, r1
 8000e2c:	7013      	strb	r3, [r2, #0]
	            for(int i=0;i<size_RES_PDU;i++){
 8000e2e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000e32:	3301      	adds	r3, #1
 8000e34:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000e38:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000e3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000e40:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	429a      	cmp	r2, r3
 8000e48:	dbde      	blt.n	8000e08 <main+0x7dc>
	            }

	            //Temp PDU pointeri boşalt
	            free(RES_PDU_TEMP);
 8000e4a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000e4e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000e52:	6818      	ldr	r0, [r3, #0]
 8000e54:	f004 f9aa 	bl	80051ac <free>

	            for(int i=0;i<size_RES_PDU;i++){
 8000e58:	2300      	movs	r3, #0
 8000e5a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8000e5e:	e017      	b.n	8000e90 <main+0x864>
 8000e60:	080067a0 	.word	0x080067a0
 8000e64:	080067a8 	.word	0x080067a8
 8000e68:	20000220 	.word	0x20000220
	            	printf("/x%x ",RES_PDU_2[i]);
 8000e6c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000e70:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000e7a:	4413      	add	r3, r2
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	4619      	mov	r1, r3
 8000e80:	48ab      	ldr	r0, [pc, #684]	; (8001130 <main+0xb04>)
 8000e82:	f004 fa83 	bl	800538c <iprintf>
	            for(int i=0;i<size_RES_PDU;i++){
 8000e86:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8000e90:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000e94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000e98:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	429a      	cmp	r2, r3
 8000ea0:	dbe4      	blt.n	8000e6c <main+0x840>
	            }

	            printf("\n");
 8000ea2:	200a      	movs	r0, #10
 8000ea4:	f004 fa8a 	bl	80053bc <putchar>

	            //Mesaj uzunluğunu belirle
	            int size_all = elemansayisi_array(MBAP) + elemansayisi_array(RES_PDU_2);
 8000ea8:	462b      	mov	r3, r5
 8000eaa:	1dda      	adds	r2, r3, #7
 8000eac:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000eb0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000eb4:	601a      	str	r2, [r3, #0]

	            printf("Size all: %d\n",size_all);
 8000eb6:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000eba:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000ebe:	6819      	ldr	r1, [r3, #0]
 8000ec0:	489c      	ldr	r0, [pc, #624]	; (8001134 <main+0xb08>)
 8000ec2:	f004 fa63 	bl	800538c <iprintf>
	            printf("Size MBAP = %d\n",elemansayisi_array(MBAP));
 8000ec6:	2107      	movs	r1, #7
 8000ec8:	489b      	ldr	r0, [pc, #620]	; (8001138 <main+0xb0c>)
 8000eca:	f004 fa5f 	bl	800538c <iprintf>
	            printf("Size PDU = %d\n",elemansayisi_array(RES_PDU_2));
 8000ece:	462b      	mov	r3, r5
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	489a      	ldr	r0, [pc, #616]	; (800113c <main+0xb10>)
 8000ed4:	f004 fa5a 	bl	800538c <iprintf>

	            //Tek framede birleştirdiktan sonra geçici olarak bit temp pointera ata
	            uint8_t *COMPLETE_FRAME_TEMP = COMBINE_MBAP_PDU(MBAP,RES_PDU_2,elemansayisi_array(MBAP),elemansayisi_array(RES_PDU_2));
 8000ed8:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000edc:	f5a3 748e 	sub.w	r4, r3, #284	; 0x11c
 8000ee0:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000ee4:	f5a3 718a 	sub.w	r1, r3, #276	; 0x114
 8000ee8:	f107 00bc 	add.w	r0, r7, #188	; 0xbc
 8000eec:	462b      	mov	r3, r5
 8000eee:	2207      	movs	r2, #7
 8000ef0:	6809      	ldr	r1, [r1, #0]
 8000ef2:	f001 f997 	bl	8002224 <COMBINE_MBAP_PDU>
 8000ef6:	6020      	str	r0, [r4, #0]

	            //Complete frame oluştur
	            uint8_t COMPLETE_FRAME[size_all];
 8000ef8:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000efc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000f00:	681c      	ldr	r4, [r3, #0]
 8000f02:	466b      	mov	r3, sp
 8000f04:	461d      	mov	r5, r3
 8000f06:	1e62      	subs	r2, r4, #1
 8000f08:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000f0c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	4622      	mov	r2, r4
 8000f14:	2300      	movs	r3, #0
 8000f16:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8000f1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000f1e:	f04f 0200 	mov.w	r2, #0
 8000f22:	f04f 0300 	mov.w	r3, #0
 8000f26:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8000f2a:	00cb      	lsls	r3, r1, #3
 8000f2c:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8000f30:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8000f34:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8000f38:	00ca      	lsls	r2, r1, #3
 8000f3a:	4622      	mov	r2, r4
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	67ba      	str	r2, [r7, #120]	; 0x78
 8000f40:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000f42:	f04f 0200 	mov.w	r2, #0
 8000f46:	f04f 0300 	mov.w	r3, #0
 8000f4a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8000f4c:	00cb      	lsls	r3, r1, #3
 8000f4e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8000f50:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8000f54:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8000f56:	00ca      	lsls	r2, r1, #3
 8000f58:	4622      	mov	r2, r4
 8000f5a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000f5e:	f5a3 7192 	sub.w	r1, r3, #292	; 0x124
 8000f62:	1dd3      	adds	r3, r2, #7
 8000f64:	08db      	lsrs	r3, r3, #3
 8000f66:	00db      	lsls	r3, r3, #3
 8000f68:	ebad 0d03 	sub.w	sp, sp, r3
 8000f6c:	466b      	mov	r3, sp
 8000f6e:	3300      	adds	r3, #0
 8000f70:	600b      	str	r3, [r1, #0]

	            //Tempdeki değerleri Complete Frame e al
				for(int i=0;i<size_all;i++){
 8000f72:	2300      	movs	r3, #0
 8000f74:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8000f78:	e017      	b.n	8000faa <main+0x97e>
				  COMPLETE_FRAME[i] = *(COMPLETE_FRAME_TEMP+i);
 8000f7a:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8000f7e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000f82:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4413      	add	r3, r2
 8000f8a:	7819      	ldrb	r1, [r3, #0]
 8000f8c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000f90:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000f9a:	441a      	add	r2, r3
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	7013      	strb	r3, [r2, #0]
				for(int i=0;i<size_all;i++){
 8000fa0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8000faa:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000fae:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000fb2:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	dbde      	blt.n	8000f7a <main+0x94e>
				}
				printf("\n");
 8000fbc:	200a      	movs	r0, #10
 8000fbe:	f004 f9fd 	bl	80053bc <putchar>

				//Temp pointeri boşalt
				free(COMPLETE_FRAME_TEMP);
 8000fc2:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000fc6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8000fca:	6818      	ldr	r0, [r3, #0]
 8000fcc:	f004 f8ee 	bl	80051ac <free>

				printf("-----COMPLETE FRAME-------------\n");
 8000fd0:	485b      	ldr	r0, [pc, #364]	; (8001140 <main+0xb14>)
 8000fd2:	f004 fa77 	bl	80054c4 <puts>

				for(int i = 0;i<size_all;i++){
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 8000fdc:	e011      	b.n	8001002 <main+0x9d6>
					printf("/x%x ",COMPLETE_FRAME[i]);
 8000fde:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000fe2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000fec:	4413      	add	r3, r2
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	484f      	ldr	r0, [pc, #316]	; (8001130 <main+0xb04>)
 8000ff4:	f004 f9ca 	bl	800538c <iprintf>
				for(int i = 0;i<size_all;i++){
 8000ff8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 8001002:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001006:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800100a:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	429a      	cmp	r2, r3
 8001012:	dbe4      	blt.n	8000fde <main+0x9b2>
				}

				printf("\n");
 8001014:	200a      	movs	r0, #10
 8001016:	f004 f9d1 	bl	80053bc <putchar>

	            send(socketNumber, (uint8_t *)COMPLETE_FRAME, elemansayisi_array(COMPLETE_FRAME));//end function 2
 800101a:	b2a2      	uxth	r2, r4
 800101c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001020:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001024:	f897 01d2 	ldrb.w	r0, [r7, #466]	; 0x1d2
 8001028:	6819      	ldr	r1, [r3, #0]
 800102a:	f003 fa27 	bl	800447c <send>
 800102e:	46ad      	mov	sp, r5
 8001030:	46b5      	mov	sp, r6
 8001032:	f7ff bbf2 	b.w	800081a <main+0x1ee>
	    	}else if(function_code == 3){
 8001036:	f897 31c8 	ldrb.w	r3, [r7, #456]	; 0x1c8
 800103a:	2b03      	cmp	r3, #3
 800103c:	f040 813f 	bne.w	80012be <main+0xc92>
 8001040:	466b      	mov	r3, sp
 8001042:	607b      	str	r3, [r7, #4]
	            unsigned short start_address = (receive_message[8] << 8)| receive_message[9];               //Coils de Output Address olarak alınacak.
 8001044:	4b3f      	ldr	r3, [pc, #252]	; (8001144 <main+0xb18>)
 8001046:	7a1b      	ldrb	r3, [r3, #8]
 8001048:	021b      	lsls	r3, r3, #8
 800104a:	b21a      	sxth	r2, r3
 800104c:	4b3d      	ldr	r3, [pc, #244]	; (8001144 <main+0xb18>)
 800104e:	7a5b      	ldrb	r3, [r3, #9]
 8001050:	b21b      	sxth	r3, r3
 8001052:	4313      	orrs	r3, r2
 8001054:	b21b      	sxth	r3, r3
 8001056:	f8a7 314e 	strh.w	r3, [r7, #334]	; 0x14e
	            unsigned short quantity_of_inputs = (receive_message[10] << 8)| receive_message[11];
 800105a:	4b3a      	ldr	r3, [pc, #232]	; (8001144 <main+0xb18>)
 800105c:	7a9b      	ldrb	r3, [r3, #10]
 800105e:	021b      	lsls	r3, r3, #8
 8001060:	b21a      	sxth	r2, r3
 8001062:	4b38      	ldr	r3, [pc, #224]	; (8001144 <main+0xb18>)
 8001064:	7adb      	ldrb	r3, [r3, #11]
 8001066:	b21b      	sxth	r3, r3
 8001068:	4313      	orrs	r3, r2
 800106a:	b21b      	sxth	r3, r3
 800106c:	f8a7 314c 	strh.w	r3, [r7, #332]	; 0x14c
	            unsigned short response_t_length_f3_f4 = 1 + 2 + 2*quantity_of_inputs;
 8001070:	f8b7 314c 	ldrh.w	r3, [r7, #332]	; 0x14c
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	b29b      	uxth	r3, r3
 8001078:	3303      	adds	r3, #3
 800107a:	f8a7 314a 	strh.w	r3, [r7, #330]	; 0x14a
	            MBAP[4] = highByte(response_t_length_f3_f4);
 800107e:	f8b7 314a 	ldrh.w	r3, [r7, #330]	; 0x14a
 8001082:	0a1b      	lsrs	r3, r3, #8
 8001084:	b29b      	uxth	r3, r3
 8001086:	b2d9      	uxtb	r1, r3
 8001088:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800108c:	f5a3 72b6 	sub.w	r2, r3, #364	; 0x16c
 8001090:	460b      	mov	r3, r1
 8001092:	7113      	strb	r3, [r2, #4]
	            MBAP[5] = lowByte(response_t_length_f3_f4);
 8001094:	f8b7 314a 	ldrh.w	r3, [r7, #330]	; 0x14a
 8001098:	b2d9      	uxtb	r1, r3
 800109a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800109e:	f5a3 72b6 	sub.w	r2, r3, #364	; 0x16c
 80010a2:	460b      	mov	r3, r1
 80010a4:	7153      	strb	r3, [r2, #5]
	            int size_RES_PDU = 2*quantity_of_inputs + 1 + 1;
 80010a6:	f8b7 314c 	ldrh.w	r3, [r7, #332]	; 0x14c
 80010aa:	3301      	adds	r3, #1
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
	            //Fonksiyonu çağır ve geçici olarak PDU temp pointera ata
	            uint8_t *RES_PDU_TEMP = READ_H_REGS(function_code, start_address, quantity_of_inputs);
 80010b2:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 80010b6:	b2d9      	uxtb	r1, r3
 80010b8:	f8b7 314c 	ldrh.w	r3, [r7, #332]	; 0x14c
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	f897 01c8 	ldrb.w	r0, [r7, #456]	; 0x1c8
 80010c2:	461a      	mov	r2, r3
 80010c4:	f000 feb2 	bl	8001e2c <READ_H_REGS>
 80010c8:	f8c7 0140 	str.w	r0, [r7, #320]	; 0x140
	            //PDU arrayini oluştur.
	            uint8_t RES_PDU_3[size_RES_PDU];
 80010cc:	f8d7 4144 	ldr.w	r4, [r7, #324]	; 0x144
 80010d0:	1e63      	subs	r3, r4, #1
 80010d2:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80010d6:	4622      	mov	r2, r4
 80010d8:	2300      	movs	r3, #0
 80010da:	61ba      	str	r2, [r7, #24]
 80010dc:	61fb      	str	r3, [r7, #28]
 80010de:	f04f 0200 	mov.w	r2, #0
 80010e2:	f04f 0300 	mov.w	r3, #0
 80010e6:	e9d7 5606 	ldrd	r5, r6, [r7, #24]
 80010ea:	4631      	mov	r1, r6
 80010ec:	00cb      	lsls	r3, r1, #3
 80010ee:	4629      	mov	r1, r5
 80010f0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80010f4:	4629      	mov	r1, r5
 80010f6:	00ca      	lsls	r2, r1, #3
 80010f8:	4622      	mov	r2, r4
 80010fa:	2300      	movs	r3, #0
 80010fc:	4690      	mov	r8, r2
 80010fe:	4699      	mov	r9, r3
 8001100:	f04f 0200 	mov.w	r2, #0
 8001104:	f04f 0300 	mov.w	r3, #0
 8001108:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800110c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001110:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001114:	4623      	mov	r3, r4
 8001116:	3307      	adds	r3, #7
 8001118:	08db      	lsrs	r3, r3, #3
 800111a:	00db      	lsls	r3, r3, #3
 800111c:	ebad 0d03 	sub.w	sp, sp, r3
 8001120:	466b      	mov	r3, sp
 8001122:	3300      	adds	r3, #0
 8001124:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138

	            for(int i=0;i<size_RES_PDU;i++){
 8001128:	2300      	movs	r3, #0
 800112a:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 800112e:	e01d      	b.n	800116c <main+0xb40>
 8001130:	080067a0 	.word	0x080067a0
 8001134:	080067bc 	.word	0x080067bc
 8001138:	080067cc 	.word	0x080067cc
 800113c:	080067dc 	.word	0x080067dc
 8001140:	080067ec 	.word	0x080067ec
 8001144:	20000220 	.word	0x20000220
	                RES_PDU_3[i] = *(RES_PDU_TEMP +i);
 8001148:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 800114c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001150:	4413      	add	r3, r2
 8001152:	7819      	ldrb	r1, [r3, #0]
 8001154:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8001158:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800115c:	441a      	add	r2, r3
 800115e:	460b      	mov	r3, r1
 8001160:	7013      	strb	r3, [r2, #0]
	            for(int i=0;i<size_RES_PDU;i++){
 8001162:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001166:	3301      	adds	r3, #1
 8001168:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 800116c:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 8001170:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001174:	429a      	cmp	r2, r3
 8001176:	dbe7      	blt.n	8001148 <main+0xb1c>
	            }

	            //Temp pointeri boşalt
	            free(RES_PDU_TEMP);
 8001178:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 800117c:	f004 f816 	bl	80051ac <free>

	            //Response mesaj uzunluğunu belirle
	            int size_all = elemansayisi_array(MBAP) + elemansayisi_array(RES_PDU_3);
 8001180:	4623      	mov	r3, r4
 8001182:	3307      	adds	r3, #7
 8001184:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

	            printf("Size all: %d\n",size_all);
 8001188:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 800118c:	48ce      	ldr	r0, [pc, #824]	; (80014c8 <main+0xe9c>)
 800118e:	f004 f8fd 	bl	800538c <iprintf>
	            printf("Size MBAP: %d\n",elemansayisi_array(MBAP));
 8001192:	2107      	movs	r1, #7
 8001194:	48cd      	ldr	r0, [pc, #820]	; (80014cc <main+0xea0>)
 8001196:	f004 f8f9 	bl	800538c <iprintf>
	            printf("Size PDU: %d\n",elemansayisi_array(RES_PDU_3));
 800119a:	4623      	mov	r3, r4
 800119c:	4619      	mov	r1, r3
 800119e:	48cc      	ldr	r0, [pc, #816]	; (80014d0 <main+0xea4>)
 80011a0:	f004 f8f4 	bl	800538c <iprintf>

	            //Tek framede birleştirdiktan sonra geçici olarak bit temp pointera ata
	            uint8_t *COMPLETE_FRAME_TEMP = COMBINE_MBAP_PDU(MBAP,RES_PDU_3,elemansayisi_array(MBAP),elemansayisi_array(RES_PDU_3));
 80011a4:	f107 00bc 	add.w	r0, r7, #188	; 0xbc
 80011a8:	4623      	mov	r3, r4
 80011aa:	2207      	movs	r2, #7
 80011ac:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 80011b0:	f001 f838 	bl	8002224 <COMBINE_MBAP_PDU>
 80011b4:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130

	            //Complete frame oluştur
	            uint8_t COMPLETE_FRAME[size_all];
 80011b8:	f8d7 5134 	ldr.w	r5, [r7, #308]	; 0x134
 80011bc:	466b      	mov	r3, sp
 80011be:	461e      	mov	r6, r3
 80011c0:	1e6b      	subs	r3, r5, #1
 80011c2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80011c6:	462a      	mov	r2, r5
 80011c8:	2300      	movs	r3, #0
 80011ca:	673a      	str	r2, [r7, #112]	; 0x70
 80011cc:	677b      	str	r3, [r7, #116]	; 0x74
 80011ce:	f04f 0200 	mov.w	r2, #0
 80011d2:	f04f 0300 	mov.w	r3, #0
 80011d6:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80011d8:	00cb      	lsls	r3, r1, #3
 80011da:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80011dc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80011e0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80011e2:	00ca      	lsls	r2, r1, #3
 80011e4:	462a      	mov	r2, r5
 80011e6:	2300      	movs	r3, #0
 80011e8:	66ba      	str	r2, [r7, #104]	; 0x68
 80011ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80011ec:	f04f 0200 	mov.w	r2, #0
 80011f0:	f04f 0300 	mov.w	r3, #0
 80011f4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80011f6:	00cb      	lsls	r3, r1, #3
 80011f8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80011fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80011fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001200:	00ca      	lsls	r2, r1, #3
 8001202:	462a      	mov	r2, r5
 8001204:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001208:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
 800120c:	1dd3      	adds	r3, r2, #7
 800120e:	08db      	lsrs	r3, r3, #3
 8001210:	00db      	lsls	r3, r3, #3
 8001212:	ebad 0d03 	sub.w	sp, sp, r3
 8001216:	466b      	mov	r3, sp
 8001218:	3300      	adds	r3, #0
 800121a:	600b      	str	r3, [r1, #0]

	            //Pointerdaki verileri Complete frame ata
	            for(int i=0;i<(elemansayisi_array(MBAP) + elemansayisi_array(RES_PDU_3));i++){
 800121c:	2300      	movs	r3, #0
 800121e:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 8001222:	e014      	b.n	800124e <main+0xc22>
	                COMPLETE_FRAME[i] = *(COMPLETE_FRAME_TEMP +i);
 8001224:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 8001228:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800122c:	4413      	add	r3, r2
 800122e:	7819      	ldrb	r1, [r3, #0]
 8001230:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001234:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800123e:	441a      	add	r2, r3
 8001240:	460b      	mov	r3, r1
 8001242:	7013      	strb	r3, [r2, #0]
	            for(int i=0;i<(elemansayisi_array(MBAP) + elemansayisi_array(RES_PDU_3));i++){
 8001244:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001248:	3301      	adds	r3, #1
 800124a:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800124e:	4623      	mov	r3, r4
 8001250:	1dda      	adds	r2, r3, #7
 8001252:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001256:	429a      	cmp	r2, r3
 8001258:	d8e4      	bhi.n	8001224 <main+0xbf8>
	            }

	            for(int i =0;i<size_all;i++){
 800125a:	2300      	movs	r3, #0
 800125c:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 8001260:	e011      	b.n	8001286 <main+0xc5a>
	            	printf("/x%x ",COMPLETE_FRAME[i]);
 8001262:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001266:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001270:	4413      	add	r3, r2
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	4619      	mov	r1, r3
 8001276:	4897      	ldr	r0, [pc, #604]	; (80014d4 <main+0xea8>)
 8001278:	f004 f888 	bl	800538c <iprintf>
	            for(int i =0;i<size_all;i++){
 800127c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001280:	3301      	adds	r3, #1
 8001282:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 8001286:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 800128a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800128e:	429a      	cmp	r2, r3
 8001290:	dbe7      	blt.n	8001262 <main+0xc36>
	            }

	            printf("\n");
 8001292:	200a      	movs	r0, #10
 8001294:	f004 f892 	bl	80053bc <putchar>

	            //Temp pointeri boşalt
	            free(COMPLETE_FRAME_TEMP);
 8001298:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 800129c:	f003 ff86 	bl	80051ac <free>

	            //Response mesajı gönder
	            send(socketNumber, (uint8_t*)COMPLETE_FRAME, elemansayisi_array(COMPLETE_FRAME)); //end function3
 80012a0:	b2aa      	uxth	r2, r5
 80012a2:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80012a6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80012aa:	f897 01d2 	ldrb.w	r0, [r7, #466]	; 0x1d2
 80012ae:	6819      	ldr	r1, [r3, #0]
 80012b0:	f003 f8e4 	bl	800447c <send>
 80012b4:	46b5      	mov	sp, r6
 80012b6:	f8d7 d004 	ldr.w	sp, [r7, #4]
 80012ba:	f7ff baae 	b.w	800081a <main+0x1ee>
	    	}else if(function_code == 4){
 80012be:	f897 31c8 	ldrb.w	r3, [r7, #456]	; 0x1c8
 80012c2:	2b04      	cmp	r3, #4
 80012c4:	f040 8134 	bne.w	8001530 <main+0xf04>
 80012c8:	466b      	mov	r3, sp
 80012ca:	461e      	mov	r6, r3
	            unsigned short start_address = (receive_message[8] << 8)| receive_message[9];               //Coils de Output Address olarak alınacak.
 80012cc:	4b82      	ldr	r3, [pc, #520]	; (80014d8 <main+0xeac>)
 80012ce:	7a1b      	ldrb	r3, [r3, #8]
 80012d0:	021b      	lsls	r3, r3, #8
 80012d2:	b21a      	sxth	r2, r3
 80012d4:	4b80      	ldr	r3, [pc, #512]	; (80014d8 <main+0xeac>)
 80012d6:	7a5b      	ldrb	r3, [r3, #9]
 80012d8:	b21b      	sxth	r3, r3
 80012da:	4313      	orrs	r3, r2
 80012dc:	b21b      	sxth	r3, r3
 80012de:	f8a7 3176 	strh.w	r3, [r7, #374]	; 0x176
	            unsigned short quantity_of_inputs = (receive_message[10] << 8)| receive_message[11];
 80012e2:	4b7d      	ldr	r3, [pc, #500]	; (80014d8 <main+0xeac>)
 80012e4:	7a9b      	ldrb	r3, [r3, #10]
 80012e6:	021b      	lsls	r3, r3, #8
 80012e8:	b21a      	sxth	r2, r3
 80012ea:	4b7b      	ldr	r3, [pc, #492]	; (80014d8 <main+0xeac>)
 80012ec:	7adb      	ldrb	r3, [r3, #11]
 80012ee:	b21b      	sxth	r3, r3
 80012f0:	4313      	orrs	r3, r2
 80012f2:	b21b      	sxth	r3, r3
 80012f4:	f8a7 3174 	strh.w	r3, [r7, #372]	; 0x174
	            unsigned short response_t_length_f3_f4 = 1 + 2 + 2*quantity_of_inputs;
 80012f8:	f8b7 3174 	ldrh.w	r3, [r7, #372]	; 0x174
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	b29b      	uxth	r3, r3
 8001300:	3303      	adds	r3, #3
 8001302:	f8a7 3172 	strh.w	r3, [r7, #370]	; 0x172
	            MBAP[4] = highByte(response_t_length_f3_f4);
 8001306:	f8b7 3172 	ldrh.w	r3, [r7, #370]	; 0x172
 800130a:	0a1b      	lsrs	r3, r3, #8
 800130c:	b29b      	uxth	r3, r3
 800130e:	b2d9      	uxtb	r1, r3
 8001310:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001314:	f5a3 72b6 	sub.w	r2, r3, #364	; 0x16c
 8001318:	460b      	mov	r3, r1
 800131a:	7113      	strb	r3, [r2, #4]
	            MBAP[5] = lowByte(response_t_length_f3_f4);
 800131c:	f8b7 3172 	ldrh.w	r3, [r7, #370]	; 0x172
 8001320:	b2d9      	uxtb	r1, r3
 8001322:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001326:	f5a3 72b6 	sub.w	r2, r3, #364	; 0x16c
 800132a:	460b      	mov	r3, r1
 800132c:	7153      	strb	r3, [r2, #5]
	            //RES_PDU boyutu tanımla
	            int size_RES_PDU = 2*quantity_of_inputs + 1 + 1;
 800132e:	f8b7 3174 	ldrh.w	r3, [r7, #372]	; 0x174
 8001332:	3301      	adds	r3, #1
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
	            //Fonksiyonu çağır ve geçici olarak PDU temp pointera ata (dönen değerlerin başlangıç adresi)
	            uint8_t *RES_PDU_TEMP = READ_IN_REGS(function_code, start_address, quantity_of_inputs);
 800133a:	f8b7 3176 	ldrh.w	r3, [r7, #374]	; 0x176
 800133e:	b2d9      	uxtb	r1, r3
 8001340:	f8b7 3174 	ldrh.w	r3, [r7, #372]	; 0x174
 8001344:	b2db      	uxtb	r3, r3
 8001346:	f897 01c8 	ldrb.w	r0, [r7, #456]	; 0x1c8
 800134a:	461a      	mov	r2, r3
 800134c:	f000 fddc 	bl	8001f08 <READ_IN_REGS>
 8001350:	f8c7 0168 	str.w	r0, [r7, #360]	; 0x168
	            //PDU arrayini oluştur.
	            uint8_t RES_PDU_4[size_RES_PDU];
 8001354:	f8d7 416c 	ldr.w	r4, [r7, #364]	; 0x16c
 8001358:	1e63      	subs	r3, r4, #1
 800135a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 800135e:	4622      	mov	r2, r4
 8001360:	2300      	movs	r3, #0
 8001362:	663a      	str	r2, [r7, #96]	; 0x60
 8001364:	667b      	str	r3, [r7, #100]	; 0x64
 8001366:	f04f 0200 	mov.w	r2, #0
 800136a:	f04f 0300 	mov.w	r3, #0
 800136e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8001370:	00cb      	lsls	r3, r1, #3
 8001372:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001374:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001378:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800137a:	00ca      	lsls	r2, r1, #3
 800137c:	4622      	mov	r2, r4
 800137e:	2300      	movs	r3, #0
 8001380:	4692      	mov	sl, r2
 8001382:	469b      	mov	fp, r3
 8001384:	f04f 0200 	mov.w	r2, #0
 8001388:	f04f 0300 	mov.w	r3, #0
 800138c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001390:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001394:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001398:	4623      	mov	r3, r4
 800139a:	3307      	adds	r3, #7
 800139c:	08db      	lsrs	r3, r3, #3
 800139e:	00db      	lsls	r3, r3, #3
 80013a0:	ebad 0d03 	sub.w	sp, sp, r3
 80013a4:	466b      	mov	r3, sp
 80013a6:	3300      	adds	r3, #0
 80013a8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160

	            //Temp pointerdaki değerleri PDU_4 e al
	            for(int i=0;i<size_RES_PDU;i++){
 80013ac:	2300      	movs	r3, #0
 80013ae:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 80013b2:	e011      	b.n	80013d8 <main+0xdac>
	                RES_PDU_4[i] = *(RES_PDU_TEMP +i);
 80013b4:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 80013b8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80013bc:	4413      	add	r3, r2
 80013be:	7819      	ldrb	r1, [r3, #0]
 80013c0:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 80013c4:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80013c8:	441a      	add	r2, r3
 80013ca:	460b      	mov	r3, r1
 80013cc:	7013      	strb	r3, [r2, #0]
	            for(int i=0;i<size_RES_PDU;i++){
 80013ce:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80013d2:	3301      	adds	r3, #1
 80013d4:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 80013d8:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 80013dc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80013e0:	429a      	cmp	r2, r3
 80013e2:	dbe7      	blt.n	80013b4 <main+0xd88>
	            }

	            //Temp PDU pointeri boşalt
	            free(RES_PDU_TEMP);
 80013e4:	f8d7 0168 	ldr.w	r0, [r7, #360]	; 0x168
 80013e8:	f003 fee0 	bl	80051ac <free>

	            //Response mesaj uzunluğunu belirle
	            int size_all = elemansayisi_array(MBAP) + elemansayisi_array(RES_PDU_4);
 80013ec:	4623      	mov	r3, r4
 80013ee:	3307      	adds	r3, #7
 80013f0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

	            printf("Size all: %d\n",size_all);
 80013f4:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 80013f8:	4833      	ldr	r0, [pc, #204]	; (80014c8 <main+0xe9c>)
 80013fa:	f003 ffc7 	bl	800538c <iprintf>
	            printf("Size MBAP: %d\n",elemansayisi_array(MBAP));
 80013fe:	2107      	movs	r1, #7
 8001400:	4832      	ldr	r0, [pc, #200]	; (80014cc <main+0xea0>)
 8001402:	f003 ffc3 	bl	800538c <iprintf>
	            printf("Size PDU: %d\n",elemansayisi_array(RES_PDU_4));
 8001406:	4623      	mov	r3, r4
 8001408:	4619      	mov	r1, r3
 800140a:	4831      	ldr	r0, [pc, #196]	; (80014d0 <main+0xea4>)
 800140c:	f003 ffbe 	bl	800538c <iprintf>


	            //Tek framede birleştirdiktan sonra geçici olarak bit temp pointera ata
	            uint8_t *COMPLETE_FRAME_TEMP = COMBINE_MBAP_PDU(MBAP,RES_PDU_4,elemansayisi_array(MBAP),elemansayisi_array(RES_PDU_4));
 8001410:	f107 00bc 	add.w	r0, r7, #188	; 0xbc
 8001414:	4623      	mov	r3, r4
 8001416:	2207      	movs	r2, #7
 8001418:	f8d7 1160 	ldr.w	r1, [r7, #352]	; 0x160
 800141c:	f000 ff02 	bl	8002224 <COMBINE_MBAP_PDU>
 8001420:	f8c7 0158 	str.w	r0, [r7, #344]	; 0x158

	            //Complete frame oluştur
	            uint8_t COMPLETE_FRAME[size_all];
 8001424:	f8d7 415c 	ldr.w	r4, [r7, #348]	; 0x15c
 8001428:	466b      	mov	r3, sp
 800142a:	461d      	mov	r5, r3
 800142c:	1e63      	subs	r3, r4, #1
 800142e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001432:	4622      	mov	r2, r4
 8001434:	2300      	movs	r3, #0
 8001436:	65ba      	str	r2, [r7, #88]	; 0x58
 8001438:	65fb      	str	r3, [r7, #92]	; 0x5c
 800143a:	f04f 0200 	mov.w	r2, #0
 800143e:	f04f 0300 	mov.w	r3, #0
 8001442:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001444:	00cb      	lsls	r3, r1, #3
 8001446:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001448:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800144c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800144e:	00ca      	lsls	r2, r1, #3
 8001450:	4622      	mov	r2, r4
 8001452:	2300      	movs	r3, #0
 8001454:	653a      	str	r2, [r7, #80]	; 0x50
 8001456:	657b      	str	r3, [r7, #84]	; 0x54
 8001458:	f04f 0200 	mov.w	r2, #0
 800145c:	f04f 0300 	mov.w	r3, #0
 8001460:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001462:	00cb      	lsls	r3, r1, #3
 8001464:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001466:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800146a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800146c:	00ca      	lsls	r2, r1, #3
 800146e:	4623      	mov	r3, r4
 8001470:	3307      	adds	r3, #7
 8001472:	08db      	lsrs	r3, r3, #3
 8001474:	00db      	lsls	r3, r3, #3
 8001476:	ebad 0d03 	sub.w	sp, sp, r3
 800147a:	466b      	mov	r3, sp
 800147c:	3300      	adds	r3, #0
 800147e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150


	            //Tempdeki değerleri Complete Frame'e al
	            for(int i=0;i<size_all;i++){
 8001482:	2300      	movs	r3, #0
 8001484:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
 8001488:	e011      	b.n	80014ae <main+0xe82>
	              COMPLETE_FRAME[i] = *(COMPLETE_FRAME_TEMP+i);
 800148a:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 800148e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001492:	4413      	add	r3, r2
 8001494:	7819      	ldrb	r1, [r3, #0]
 8001496:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800149a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800149e:	441a      	add	r2, r3
 80014a0:	460b      	mov	r3, r1
 80014a2:	7013      	strb	r3, [r2, #0]
	            for(int i=0;i<size_all;i++){
 80014a4:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80014a8:	3301      	adds	r3, #1
 80014aa:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
 80014ae:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 80014b2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80014b6:	429a      	cmp	r2, r3
 80014b8:	dbe7      	blt.n	800148a <main+0xe5e>
	            }


	            printf("COMPLETE FRAME  \n");
 80014ba:	4808      	ldr	r0, [pc, #32]	; (80014dc <main+0xeb0>)
 80014bc:	f004 f802 	bl	80054c4 <puts>
	            for(int i=0;i<size_all;i++){
 80014c0:	2300      	movs	r3, #0
 80014c2:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 80014c6:	e01a      	b.n	80014fe <main+0xed2>
 80014c8:	080067bc 	.word	0x080067bc
 80014cc:	08006810 	.word	0x08006810
 80014d0:	08006820 	.word	0x08006820
 80014d4:	080067a0 	.word	0x080067a0
 80014d8:	20000220 	.word	0x20000220
 80014dc:	08006830 	.word	0x08006830
	            	printf("/x%x ",COMPLETE_FRAME[i]);
 80014e0:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 80014e4:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80014e8:	4413      	add	r3, r2
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	4619      	mov	r1, r3
 80014ee:	48a6      	ldr	r0, [pc, #664]	; (8001788 <main+0x115c>)
 80014f0:	f003 ff4c 	bl	800538c <iprintf>
	            for(int i=0;i<size_all;i++){
 80014f4:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80014f8:	3301      	adds	r3, #1
 80014fa:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 80014fe:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8001502:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001506:	429a      	cmp	r2, r3
 8001508:	dbea      	blt.n	80014e0 <main+0xeb4>
	            }

	            printf("\n");
 800150a:	200a      	movs	r0, #10
 800150c:	f003 ff56 	bl	80053bc <putchar>

	            //Temp pointeri boşalt
	            free(COMPLETE_FRAME_TEMP);
 8001510:	f8d7 0158 	ldr.w	r0, [r7, #344]	; 0x158
 8001514:	f003 fe4a 	bl	80051ac <free>
	            //Response mesajı gönder
	            send(socketNumber, (uint8_t*)COMPLETE_FRAME, elemansayisi_array(COMPLETE_FRAME)); //end function
 8001518:	b2a3      	uxth	r3, r4
 800151a:	f897 01d2 	ldrb.w	r0, [r7, #466]	; 0x1d2
 800151e:	461a      	mov	r2, r3
 8001520:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8001524:	f002 ffaa 	bl	800447c <send>
 8001528:	46ad      	mov	sp, r5
 800152a:	46b5      	mov	sp, r6
 800152c:	f7ff b975 	b.w	800081a <main+0x1ee>
	    	}else if(function_code == 5){
 8001530:	f897 31c8 	ldrb.w	r3, [r7, #456]	; 0x1c8
 8001534:	2b05      	cmp	r3, #5
 8001536:	f040 8133 	bne.w	80017a0 <main+0x1174>
 800153a:	466b      	mov	r3, sp
 800153c:	607b      	str	r3, [r7, #4]
	            unsigned short start_address = (receive_message[8] << 8)| receive_message[9];               //Coils de Output Address olarak alınacak.
 800153e:	4b93      	ldr	r3, [pc, #588]	; (800178c <main+0x1160>)
 8001540:	7a1b      	ldrb	r3, [r3, #8]
 8001542:	021b      	lsls	r3, r3, #8
 8001544:	b21a      	sxth	r2, r3
 8001546:	4b91      	ldr	r3, [pc, #580]	; (800178c <main+0x1160>)
 8001548:	7a5b      	ldrb	r3, [r3, #9]
 800154a:	b21b      	sxth	r3, r3
 800154c:	4313      	orrs	r3, r2
 800154e:	b21b      	sxth	r3, r3
 8001550:	f8a7 319e 	strh.w	r3, [r7, #414]	; 0x19e
	            unsigned short quantity_of_inputs = (receive_message[10] << 8)| receive_message[11];
 8001554:	4b8d      	ldr	r3, [pc, #564]	; (800178c <main+0x1160>)
 8001556:	7a9b      	ldrb	r3, [r3, #10]
 8001558:	021b      	lsls	r3, r3, #8
 800155a:	b21a      	sxth	r2, r3
 800155c:	4b8b      	ldr	r3, [pc, #556]	; (800178c <main+0x1160>)
 800155e:	7adb      	ldrb	r3, [r3, #11]
 8001560:	b21b      	sxth	r3, r3
 8001562:	4313      	orrs	r3, r2
 8001564:	b21b      	sxth	r3, r3
 8001566:	f8a7 319c 	strh.w	r3, [r7, #412]	; 0x19c
	            //Bu fonksiyonda Requestin bazı byte larında mesaj tipi değişiyor.
	            //Response message uzunluğu Request message uzunluğu ile aynı olacak. 12 byte
	            unsigned short response_pdu_length = 6;
 800156a:	2306      	movs	r3, #6
 800156c:	f8a7 319a 	strh.w	r3, [r7, #410]	; 0x19a
	            MBAP[4] = highByte(response_pdu_length);
 8001570:	f8b7 319a 	ldrh.w	r3, [r7, #410]	; 0x19a
 8001574:	0a1b      	lsrs	r3, r3, #8
 8001576:	b29b      	uxth	r3, r3
 8001578:	b2d9      	uxtb	r1, r3
 800157a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800157e:	f5a3 72b6 	sub.w	r2, r3, #364	; 0x16c
 8001582:	460b      	mov	r3, r1
 8001584:	7113      	strb	r3, [r2, #4]
	            MBAP[5] = lowByte(response_pdu_length);
 8001586:	f8b7 319a 	ldrh.w	r3, [r7, #410]	; 0x19a
 800158a:	b2d9      	uxtb	r1, r3
 800158c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001590:	f5a3 72b6 	sub.w	r2, r3, #364	; 0x16c
 8001594:	460b      	mov	r3, r1
 8001596:	7153      	strb	r3, [r2, #5]
	            //RES_PDU boyutunu tanımla
	            int size_RES_PDU = 5;
 8001598:	2305      	movs	r3, #5
 800159a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
	            //Fonksiyonu çağır ve geçici olarak PDU temp pointera ata
	            uint8_t *RES_PDU_TEMP = WRITE_SINGLE_COIL(function_code,start_address,quantity_of_inputs);
 800159e:	f8b7 319e 	ldrh.w	r3, [r7, #414]	; 0x19e
 80015a2:	b2d9      	uxtb	r1, r3
 80015a4:	f8b7 319c 	ldrh.w	r3, [r7, #412]	; 0x19c
 80015a8:	f897 01c8 	ldrb.w	r0, [r7, #456]	; 0x1c8
 80015ac:	461a      	mov	r2, r3
 80015ae:	f000 fd17 	bl	8001fe0 <WRITE_SINGLE_COIL>
 80015b2:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
	            //PDU arrayini oluştur.
	            uint8_t RES_PDU_5[size_RES_PDU];
 80015b6:	f8d7 4194 	ldr.w	r4, [r7, #404]	; 0x194
 80015ba:	1e63      	subs	r3, r4, #1
 80015bc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 80015c0:	4622      	mov	r2, r4
 80015c2:	2300      	movs	r3, #0
 80015c4:	613a      	str	r2, [r7, #16]
 80015c6:	617b      	str	r3, [r7, #20]
 80015c8:	f04f 0200 	mov.w	r2, #0
 80015cc:	f04f 0300 	mov.w	r3, #0
 80015d0:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 80015d4:	4631      	mov	r1, r6
 80015d6:	00cb      	lsls	r3, r1, #3
 80015d8:	4629      	mov	r1, r5
 80015da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80015de:	4629      	mov	r1, r5
 80015e0:	00ca      	lsls	r2, r1, #3
 80015e2:	4622      	mov	r2, r4
 80015e4:	2300      	movs	r3, #0
 80015e6:	60ba      	str	r2, [r7, #8]
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	f04f 0200 	mov.w	r2, #0
 80015ee:	f04f 0300 	mov.w	r3, #0
 80015f2:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 80015f6:	4631      	mov	r1, r6
 80015f8:	00cb      	lsls	r3, r1, #3
 80015fa:	4629      	mov	r1, r5
 80015fc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001600:	4629      	mov	r1, r5
 8001602:	00ca      	lsls	r2, r1, #3
 8001604:	4623      	mov	r3, r4
 8001606:	3307      	adds	r3, #7
 8001608:	08db      	lsrs	r3, r3, #3
 800160a:	00db      	lsls	r3, r3, #3
 800160c:	ebad 0d03 	sub.w	sp, sp, r3
 8001610:	466b      	mov	r3, sp
 8001612:	3300      	adds	r3, #0
 8001614:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188

	            //Temp pointerdaki değerleri RES_PDU_5 e al
	            for(int i =0;i<size_RES_PDU;i++){
 8001618:	2300      	movs	r3, #0
 800161a:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 800161e:	e011      	b.n	8001644 <main+0x1018>
	              RES_PDU_5[i] = *(RES_PDU_TEMP+i);
 8001620:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8001624:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001628:	4413      	add	r3, r2
 800162a:	7819      	ldrb	r1, [r3, #0]
 800162c:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8001630:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8001634:	441a      	add	r2, r3
 8001636:	460b      	mov	r3, r1
 8001638:	7013      	strb	r3, [r2, #0]
	            for(int i =0;i<size_RES_PDU;i++){
 800163a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800163e:	3301      	adds	r3, #1
 8001640:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8001644:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8001648:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800164c:	429a      	cmp	r2, r3
 800164e:	dbe7      	blt.n	8001620 <main+0xff4>
	            }

	            //Temp pointeri boşalt
	            free(RES_PDU_TEMP);
 8001650:	f8d7 0190 	ldr.w	r0, [r7, #400]	; 0x190
 8001654:	f003 fdaa 	bl	80051ac <free>

	            int size_all = elemansayisi_array(MBAP) + elemansayisi_array(RES_PDU_5);
 8001658:	4623      	mov	r3, r4
 800165a:	3307      	adds	r3, #7
 800165c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184

	            printf("Size all: %d\n",size_all);
 8001660:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8001664:	484a      	ldr	r0, [pc, #296]	; (8001790 <main+0x1164>)
 8001666:	f003 fe91 	bl	800538c <iprintf>
				printf("Size MBAP: %d\n",elemansayisi_array(MBAP));
 800166a:	2107      	movs	r1, #7
 800166c:	4849      	ldr	r0, [pc, #292]	; (8001794 <main+0x1168>)
 800166e:	f003 fe8d 	bl	800538c <iprintf>
				printf("Size PDU: %d\n",elemansayisi_array(RES_PDU_5));
 8001672:	4623      	mov	r3, r4
 8001674:	4619      	mov	r1, r3
 8001676:	4848      	ldr	r0, [pc, #288]	; (8001798 <main+0x116c>)
 8001678:	f003 fe88 	bl	800538c <iprintf>

		        //Tek framede birleştirdiktan sonra geçici olarak bit temp pointera ata
		        uint8_t *COMPLETE_FRAME_TEMP = COMBINE_MBAP_PDU(MBAP,RES_PDU_5,elemansayisi_array(MBAP),elemansayisi_array(RES_PDU_5));
 800167c:	f107 00bc 	add.w	r0, r7, #188	; 0xbc
 8001680:	4623      	mov	r3, r4
 8001682:	2207      	movs	r2, #7
 8001684:	f8d7 1188 	ldr.w	r1, [r7, #392]	; 0x188
 8001688:	f000 fdcc 	bl	8002224 <COMBINE_MBAP_PDU>
 800168c:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180

		          //Complete frame oluştur
		        uint8_t COMPLETE_FRAME[size_all];
 8001690:	f8d7 5184 	ldr.w	r5, [r7, #388]	; 0x184
 8001694:	466b      	mov	r3, sp
 8001696:	461e      	mov	r6, r3
 8001698:	1e6b      	subs	r3, r5, #1
 800169a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800169e:	462a      	mov	r2, r5
 80016a0:	2300      	movs	r3, #0
 80016a2:	64ba      	str	r2, [r7, #72]	; 0x48
 80016a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80016a6:	f04f 0200 	mov.w	r2, #0
 80016aa:	f04f 0300 	mov.w	r3, #0
 80016ae:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80016b0:	00cb      	lsls	r3, r1, #3
 80016b2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80016b4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80016b8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80016ba:	00ca      	lsls	r2, r1, #3
 80016bc:	462a      	mov	r2, r5
 80016be:	2300      	movs	r3, #0
 80016c0:	643a      	str	r2, [r7, #64]	; 0x40
 80016c2:	647b      	str	r3, [r7, #68]	; 0x44
 80016c4:	f04f 0200 	mov.w	r2, #0
 80016c8:	f04f 0300 	mov.w	r3, #0
 80016cc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80016ce:	00cb      	lsls	r3, r1, #3
 80016d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80016d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80016d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80016d8:	00ca      	lsls	r2, r1, #3
 80016da:	462b      	mov	r3, r5
 80016dc:	3307      	adds	r3, #7
 80016de:	08db      	lsrs	r3, r3, #3
 80016e0:	00db      	lsls	r3, r3, #3
 80016e2:	ebad 0d03 	sub.w	sp, sp, r3
 80016e6:	466b      	mov	r3, sp
 80016e8:	3300      	adds	r3, #0
 80016ea:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178

		        //Pointerdaki verileri Complete frame ata
		        for(int i=0;i<(elemansayisi_array(MBAP) + elemansayisi_array(RES_PDU_5));i++){
 80016ee:	2300      	movs	r3, #0
 80016f0:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 80016f4:	e011      	b.n	800171a <main+0x10ee>
		            COMPLETE_FRAME[i] = *(COMPLETE_FRAME_TEMP +i);
 80016f6:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 80016fa:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80016fe:	4413      	add	r3, r2
 8001700:	7819      	ldrb	r1, [r3, #0]
 8001702:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001706:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800170a:	441a      	add	r2, r3
 800170c:	460b      	mov	r3, r1
 800170e:	7013      	strb	r3, [r2, #0]
		        for(int i=0;i<(elemansayisi_array(MBAP) + elemansayisi_array(RES_PDU_5));i++){
 8001710:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001714:	3301      	adds	r3, #1
 8001716:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 800171a:	4623      	mov	r3, r4
 800171c:	1dda      	adds	r2, r3, #7
 800171e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001722:	429a      	cmp	r2, r3
 8001724:	d8e7      	bhi.n	80016f6 <main+0x10ca>
		        }

	            printf("COMPLETE FRAME  \n");
 8001726:	481d      	ldr	r0, [pc, #116]	; (800179c <main+0x1170>)
 8001728:	f003 fecc 	bl	80054c4 <puts>
	            for(int i=0;i<size_all;i++){
 800172c:	2300      	movs	r3, #0
 800172e:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8001732:	e00e      	b.n	8001752 <main+0x1126>
	            	printf("/x%x ",COMPLETE_FRAME[i]);
 8001734:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001738:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800173c:	4413      	add	r3, r2
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	4619      	mov	r1, r3
 8001742:	4811      	ldr	r0, [pc, #68]	; (8001788 <main+0x115c>)
 8001744:	f003 fe22 	bl	800538c <iprintf>
	            for(int i=0;i<size_all;i++){
 8001748:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800174c:	3301      	adds	r3, #1
 800174e:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8001752:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8001756:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800175a:	429a      	cmp	r2, r3
 800175c:	dbea      	blt.n	8001734 <main+0x1108>
	            }

	            printf("\n");
 800175e:	200a      	movs	r0, #10
 8001760:	f003 fe2c 	bl	80053bc <putchar>

	            //Temp pointeri boşalt
	            free(COMPLETE_FRAME_TEMP);
 8001764:	f8d7 0180 	ldr.w	r0, [r7, #384]	; 0x180
 8001768:	f003 fd20 	bl	80051ac <free>

	            //Response mesajı gönder
	            send(socketNumber, (uint8_t*)COMPLETE_FRAME, elemansayisi_array(COMPLETE_FRAME)); //end function 5
 800176c:	b2ab      	uxth	r3, r5
 800176e:	f897 01d2 	ldrb.w	r0, [r7, #466]	; 0x1d2
 8001772:	461a      	mov	r2, r3
 8001774:	f8d7 1178 	ldr.w	r1, [r7, #376]	; 0x178
 8001778:	f002 fe80 	bl	800447c <send>
 800177c:	46b5      	mov	sp, r6
 800177e:	f8d7 d004 	ldr.w	sp, [r7, #4]
 8001782:	f7ff b84a 	b.w	800081a <main+0x1ee>
 8001786:	bf00      	nop
 8001788:	080067a0 	.word	0x080067a0
 800178c:	20000220 	.word	0x20000220
 8001790:	080067bc 	.word	0x080067bc
 8001794:	08006810 	.word	0x08006810
 8001798:	08006820 	.word	0x08006820
 800179c:	08006830 	.word	0x08006830
	    	}else if(function_code == 6){
 80017a0:	f897 31c8 	ldrb.w	r3, [r7, #456]	; 0x1c8
 80017a4:	2b06      	cmp	r3, #6
 80017a6:	f47f a838 	bne.w	800081a <main+0x1ee>
 80017aa:	466b      	mov	r3, sp
 80017ac:	461e      	mov	r6, r3
	            unsigned short start_address = (receive_message[8] << 8)| receive_message[9];               //Coils de Output Address olarak alınacak.
 80017ae:	4b90      	ldr	r3, [pc, #576]	; (80019f0 <main+0x13c4>)
 80017b0:	7a1b      	ldrb	r3, [r3, #8]
 80017b2:	021b      	lsls	r3, r3, #8
 80017b4:	b21a      	sxth	r2, r3
 80017b6:	4b8e      	ldr	r3, [pc, #568]	; (80019f0 <main+0x13c4>)
 80017b8:	7a5b      	ldrb	r3, [r3, #9]
 80017ba:	b21b      	sxth	r3, r3
 80017bc:	4313      	orrs	r3, r2
 80017be:	b21b      	sxth	r3, r3
 80017c0:	f8a7 31c6 	strh.w	r3, [r7, #454]	; 0x1c6
	            unsigned short quantity_of_inputs = (receive_message[10] << 8)| receive_message[11];
 80017c4:	4b8a      	ldr	r3, [pc, #552]	; (80019f0 <main+0x13c4>)
 80017c6:	7a9b      	ldrb	r3, [r3, #10]
 80017c8:	021b      	lsls	r3, r3, #8
 80017ca:	b21a      	sxth	r2, r3
 80017cc:	4b88      	ldr	r3, [pc, #544]	; (80019f0 <main+0x13c4>)
 80017ce:	7adb      	ldrb	r3, [r3, #11]
 80017d0:	b21b      	sxth	r3, r3
 80017d2:	4313      	orrs	r3, r2
 80017d4:	b21b      	sxth	r3, r3
 80017d6:	f8a7 31c4 	strh.w	r3, [r7, #452]	; 0x1c4
	            //Bu fonksiyonda Requestin bazı byte larında mesaj tipi değişiyor.
	            //Response message uzunluğu Request message uzunluğu ile aynı olacak. 12 byte
	            unsigned short response_pdu_length = 6;
 80017da:	2306      	movs	r3, #6
 80017dc:	f8a7 31c2 	strh.w	r3, [r7, #450]	; 0x1c2
	            MBAP[4] = highByte(response_pdu_length);
 80017e0:	f8b7 31c2 	ldrh.w	r3, [r7, #450]	; 0x1c2
 80017e4:	0a1b      	lsrs	r3, r3, #8
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	b2d9      	uxtb	r1, r3
 80017ea:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80017ee:	f5a3 72b6 	sub.w	r2, r3, #364	; 0x16c
 80017f2:	460b      	mov	r3, r1
 80017f4:	7113      	strb	r3, [r2, #4]
	            MBAP[5] = lowByte(response_pdu_length);
 80017f6:	f8b7 31c2 	ldrh.w	r3, [r7, #450]	; 0x1c2
 80017fa:	b2d9      	uxtb	r1, r3
 80017fc:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001800:	f5a3 72b6 	sub.w	r2, r3, #364	; 0x16c
 8001804:	460b      	mov	r3, r1
 8001806:	7153      	strb	r3, [r2, #5]
	            //RES_PDU boyutunu tanımla
	            int size_RES_PDU = 5;
 8001808:	2305      	movs	r3, #5
 800180a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc

	            uint8_t *RES_PDU_TEMP = WRITE_SINGLE_REG(function_code,start_address,quantity_of_inputs);
 800180e:	f8b7 31c6 	ldrh.w	r3, [r7, #454]	; 0x1c6
 8001812:	b2d9      	uxtb	r1, r3
 8001814:	f8b7 31c4 	ldrh.w	r3, [r7, #452]	; 0x1c4
 8001818:	b2db      	uxtb	r3, r3
 800181a:	f897 01c8 	ldrb.w	r0, [r7, #456]	; 0x1c8
 800181e:	461a      	mov	r2, r3
 8001820:	f000 fc40 	bl	80020a4 <WRITE_SINGLE_REG>
 8001824:	f8c7 01b8 	str.w	r0, [r7, #440]	; 0x1b8

	            //PDU arrayini oluştur
	            uint8_t RES_PDU_6[size_RES_PDU];
 8001828:	f8d7 41bc 	ldr.w	r4, [r7, #444]	; 0x1bc
 800182c:	1e63      	subs	r3, r4, #1
 800182e:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8001832:	4622      	mov	r2, r4
 8001834:	2300      	movs	r3, #0
 8001836:	63ba      	str	r2, [r7, #56]	; 0x38
 8001838:	63fb      	str	r3, [r7, #60]	; 0x3c
 800183a:	f04f 0200 	mov.w	r2, #0
 800183e:	f04f 0300 	mov.w	r3, #0
 8001842:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001844:	00cb      	lsls	r3, r1, #3
 8001846:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001848:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800184c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800184e:	00ca      	lsls	r2, r1, #3
 8001850:	4622      	mov	r2, r4
 8001852:	2300      	movs	r3, #0
 8001854:	633a      	str	r2, [r7, #48]	; 0x30
 8001856:	637b      	str	r3, [r7, #52]	; 0x34
 8001858:	f04f 0200 	mov.w	r2, #0
 800185c:	f04f 0300 	mov.w	r3, #0
 8001860:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001862:	00cb      	lsls	r3, r1, #3
 8001864:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001866:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800186a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800186c:	00ca      	lsls	r2, r1, #3
 800186e:	4623      	mov	r3, r4
 8001870:	3307      	adds	r3, #7
 8001872:	08db      	lsrs	r3, r3, #3
 8001874:	00db      	lsls	r3, r3, #3
 8001876:	ebad 0d03 	sub.w	sp, sp, r3
 800187a:	466b      	mov	r3, sp
 800187c:	3300      	adds	r3, #0
 800187e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0

	            //Temp pointerdaki değerleri RES_PDU_5 e al
	            for(int i =0;i<size_RES_PDU;i++){
 8001882:	2300      	movs	r3, #0
 8001884:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8001888:	e011      	b.n	80018ae <main+0x1282>
	              RES_PDU_6[i] = *(RES_PDU_TEMP+i);
 800188a:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 800188e:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8001892:	4413      	add	r3, r2
 8001894:	7819      	ldrb	r1, [r3, #0]
 8001896:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 800189a:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800189e:	441a      	add	r2, r3
 80018a0:	460b      	mov	r3, r1
 80018a2:	7013      	strb	r3, [r2, #0]
	            for(int i =0;i<size_RES_PDU;i++){
 80018a4:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80018a8:	3301      	adds	r3, #1
 80018aa:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 80018ae:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 80018b2:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80018b6:	429a      	cmp	r2, r3
 80018b8:	dbe7      	blt.n	800188a <main+0x125e>
	            }

	            //Temp pointeri boşalt
	            free(RES_PDU_TEMP);
 80018ba:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 80018be:	f003 fc75 	bl	80051ac <free>

	            int size_all = elemansayisi_array(MBAP) + elemansayisi_array(RES_PDU_6);
 80018c2:	4623      	mov	r3, r4
 80018c4:	3307      	adds	r3, #7
 80018c6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac

	            printf("Size all: %d\n",size_all);
 80018ca:	f8d7 11ac 	ldr.w	r1, [r7, #428]	; 0x1ac
 80018ce:	4849      	ldr	r0, [pc, #292]	; (80019f4 <main+0x13c8>)
 80018d0:	f003 fd5c 	bl	800538c <iprintf>
				printf("Size MBAP: %d\n",elemansayisi_array(MBAP));
 80018d4:	2107      	movs	r1, #7
 80018d6:	4848      	ldr	r0, [pc, #288]	; (80019f8 <main+0x13cc>)
 80018d8:	f003 fd58 	bl	800538c <iprintf>
				printf("Size PDU: %d\n",elemansayisi_array(RES_PDU_6));
 80018dc:	4623      	mov	r3, r4
 80018de:	4619      	mov	r1, r3
 80018e0:	4846      	ldr	r0, [pc, #280]	; (80019fc <main+0x13d0>)
 80018e2:	f003 fd53 	bl	800538c <iprintf>

		        //Tek framede birleştirdiktan sonra geçici olarak bit temp pointera ata
		        uint8_t *COMPLETE_FRAME_TEMP = COMBINE_MBAP_PDU(MBAP,RES_PDU_6,elemansayisi_array(MBAP),elemansayisi_array(RES_PDU_6));
 80018e6:	f107 00bc 	add.w	r0, r7, #188	; 0xbc
 80018ea:	4623      	mov	r3, r4
 80018ec:	2207      	movs	r2, #7
 80018ee:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 80018f2:	f000 fc97 	bl	8002224 <COMBINE_MBAP_PDU>
 80018f6:	f8c7 01a8 	str.w	r0, [r7, #424]	; 0x1a8

		        //Complete frame oluştur
		        uint8_t COMPLETE_FRAME[size_all];
 80018fa:	f8d7 41ac 	ldr.w	r4, [r7, #428]	; 0x1ac
 80018fe:	466b      	mov	r3, sp
 8001900:	461d      	mov	r5, r3
 8001902:	1e63      	subs	r3, r4, #1
 8001904:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001908:	4622      	mov	r2, r4
 800190a:	2300      	movs	r3, #0
 800190c:	62ba      	str	r2, [r7, #40]	; 0x28
 800190e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001910:	f04f 0200 	mov.w	r2, #0
 8001914:	f04f 0300 	mov.w	r3, #0
 8001918:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800191a:	00cb      	lsls	r3, r1, #3
 800191c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800191e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001922:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001924:	00ca      	lsls	r2, r1, #3
 8001926:	4622      	mov	r2, r4
 8001928:	2300      	movs	r3, #0
 800192a:	623a      	str	r2, [r7, #32]
 800192c:	627b      	str	r3, [r7, #36]	; 0x24
 800192e:	f04f 0200 	mov.w	r2, #0
 8001932:	f04f 0300 	mov.w	r3, #0
 8001936:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001938:	00cb      	lsls	r3, r1, #3
 800193a:	6a39      	ldr	r1, [r7, #32]
 800193c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001940:	6a39      	ldr	r1, [r7, #32]
 8001942:	00ca      	lsls	r2, r1, #3
 8001944:	4623      	mov	r3, r4
 8001946:	3307      	adds	r3, #7
 8001948:	08db      	lsrs	r3, r3, #3
 800194a:	00db      	lsls	r3, r3, #3
 800194c:	ebad 0d03 	sub.w	sp, sp, r3
 8001950:	466b      	mov	r3, sp
 8001952:	3300      	adds	r3, #0
 8001954:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0


		        //Pointerdaki verileri Complete frame ata
		        for(int i=0;i<size_all;i++){
 8001958:	2300      	movs	r3, #0
 800195a:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 800195e:	e011      	b.n	8001984 <main+0x1358>
		            COMPLETE_FRAME[i] = *(COMPLETE_FRAME_TEMP +i);
 8001960:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8001964:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001968:	4413      	add	r3, r2
 800196a:	7819      	ldrb	r1, [r3, #0]
 800196c:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 8001970:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001974:	441a      	add	r2, r3
 8001976:	460b      	mov	r3, r1
 8001978:	7013      	strb	r3, [r2, #0]
		        for(int i=0;i<size_all;i++){
 800197a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800197e:	3301      	adds	r3, #1
 8001980:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 8001984:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8001988:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800198c:	429a      	cmp	r2, r3
 800198e:	dbe7      	blt.n	8001960 <main+0x1334>
		        }

	            printf("COMPLETE FRAME  \n");
 8001990:	481b      	ldr	r0, [pc, #108]	; (8001a00 <main+0x13d4>)
 8001992:	f003 fd97 	bl	80054c4 <puts>
	            for(int i=0;i<size_all;i++){
 8001996:	2300      	movs	r3, #0
 8001998:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800199c:	e00e      	b.n	80019bc <main+0x1390>
	            	printf("/x%x ",COMPLETE_FRAME[i]);
 800199e:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 80019a2:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80019a6:	4413      	add	r3, r2
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	4619      	mov	r1, r3
 80019ac:	4815      	ldr	r0, [pc, #84]	; (8001a04 <main+0x13d8>)
 80019ae:	f003 fced 	bl	800538c <iprintf>
	            for(int i=0;i<size_all;i++){
 80019b2:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80019b6:	3301      	adds	r3, #1
 80019b8:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 80019bc:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 80019c0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80019c4:	429a      	cmp	r2, r3
 80019c6:	dbea      	blt.n	800199e <main+0x1372>
	            }

	            printf("\n");
 80019c8:	200a      	movs	r0, #10
 80019ca:	f003 fcf7 	bl	80053bc <putchar>

	            //Temp pointeri boşalt
	            free(COMPLETE_FRAME_TEMP);
 80019ce:	f8d7 01a8 	ldr.w	r0, [r7, #424]	; 0x1a8
 80019d2:	f003 fbeb 	bl	80051ac <free>

	            //Response mesajı gönder
	            send(socketNumber, (uint8_t*)COMPLETE_FRAME, elemansayisi_array(COMPLETE_FRAME));// end function6
 80019d6:	b2a3      	uxth	r3, r4
 80019d8:	f897 01d2 	ldrb.w	r0, [r7, #466]	; 0x1d2
 80019dc:	461a      	mov	r2, r3
 80019de:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 80019e2:	f002 fd4b 	bl	800447c <send>
 80019e6:	46ad      	mov	sp, r5
 80019e8:	46b5      	mov	sp, r6
  while (1){
 80019ea:	f7fe bf16 	b.w	800081a <main+0x1ee>
 80019ee:	bf00      	nop
 80019f0:	20000220 	.word	0x20000220
 80019f4:	080067bc 	.word	0x080067bc
 80019f8:	08006810 	.word	0x08006810
 80019fc:	08006820 	.word	0x08006820
 8001a00:	08006830 	.word	0x08006830
 8001a04:	080067a0 	.word	0x080067a0

08001a08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b094      	sub	sp, #80	; 0x50
 8001a0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a0e:	f107 0320 	add.w	r3, r7, #32
 8001a12:	2230      	movs	r2, #48	; 0x30
 8001a14:	2100      	movs	r1, #0
 8001a16:	4618      	mov	r0, r3
 8001a18:	f003 fbd0 	bl	80051bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a1c:	f107 030c 	add.w	r3, r7, #12
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	605a      	str	r2, [r3, #4]
 8001a26:	609a      	str	r2, [r3, #8]
 8001a28:	60da      	str	r2, [r3, #12]
 8001a2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	60bb      	str	r3, [r7, #8]
 8001a30:	4b28      	ldr	r3, [pc, #160]	; (8001ad4 <SystemClock_Config+0xcc>)
 8001a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a34:	4a27      	ldr	r2, [pc, #156]	; (8001ad4 <SystemClock_Config+0xcc>)
 8001a36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a3a:	6413      	str	r3, [r2, #64]	; 0x40
 8001a3c:	4b25      	ldr	r3, [pc, #148]	; (8001ad4 <SystemClock_Config+0xcc>)
 8001a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a44:	60bb      	str	r3, [r7, #8]
 8001a46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a48:	2300      	movs	r3, #0
 8001a4a:	607b      	str	r3, [r7, #4]
 8001a4c:	4b22      	ldr	r3, [pc, #136]	; (8001ad8 <SystemClock_Config+0xd0>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a21      	ldr	r2, [pc, #132]	; (8001ad8 <SystemClock_Config+0xd0>)
 8001a52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a56:	6013      	str	r3, [r2, #0]
 8001a58:	4b1f      	ldr	r3, [pc, #124]	; (8001ad8 <SystemClock_Config+0xd0>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a60:	607b      	str	r3, [r7, #4]
 8001a62:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a64:	2301      	movs	r3, #1
 8001a66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a6c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a6e:	2302      	movs	r3, #2
 8001a70:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a72:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001a78:	2304      	movs	r3, #4
 8001a7a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001a7c:	2348      	movs	r3, #72	; 0x48
 8001a7e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a80:	2302      	movs	r3, #2
 8001a82:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001a84:	2307      	movs	r3, #7
 8001a86:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a88:	f107 0320 	add.w	r3, r7, #32
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f001 f90b 	bl	8002ca8 <HAL_RCC_OscConfig>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a98:	f000 fc1e 	bl	80022d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a9c:	230f      	movs	r3, #15
 8001a9e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001aa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001aae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ab2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ab4:	f107 030c 	add.w	r3, r7, #12
 8001ab8:	2102      	movs	r1, #2
 8001aba:	4618      	mov	r0, r3
 8001abc:	f001 fb6c 	bl	8003198 <HAL_RCC_ClockConfig>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001ac6:	f000 fc07 	bl	80022d8 <Error_Handler>
  }
}
 8001aca:	bf00      	nop
 8001acc:	3750      	adds	r7, #80	; 0x50
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	40007000 	.word	0x40007000

08001adc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001ae0:	4b17      	ldr	r3, [pc, #92]	; (8001b40 <MX_SPI1_Init+0x64>)
 8001ae2:	4a18      	ldr	r2, [pc, #96]	; (8001b44 <MX_SPI1_Init+0x68>)
 8001ae4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ae6:	4b16      	ldr	r3, [pc, #88]	; (8001b40 <MX_SPI1_Init+0x64>)
 8001ae8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001aec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001aee:	4b14      	ldr	r3, [pc, #80]	; (8001b40 <MX_SPI1_Init+0x64>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001af4:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <MX_SPI1_Init+0x64>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001afa:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <MX_SPI1_Init+0x64>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b00:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <MX_SPI1_Init+0x64>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b06:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <MX_SPI1_Init+0x64>)
 8001b08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b0c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b0e:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <MX_SPI1_Init+0x64>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b14:	4b0a      	ldr	r3, [pc, #40]	; (8001b40 <MX_SPI1_Init+0x64>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b1a:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <MX_SPI1_Init+0x64>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b20:	4b07      	ldr	r3, [pc, #28]	; (8001b40 <MX_SPI1_Init+0x64>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001b26:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <MX_SPI1_Init+0x64>)
 8001b28:	220a      	movs	r2, #10
 8001b2a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b2c:	4804      	ldr	r0, [pc, #16]	; (8001b40 <MX_SPI1_Init+0x64>)
 8001b2e:	f001 fd1f 	bl	8003570 <HAL_SPI_Init>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001b38:	f000 fbce 	bl	80022d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b3c:	bf00      	nop
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	200000cc 	.word	0x200000cc
 8001b44:	40013000 	.word	0x40013000

08001b48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b088      	sub	sp, #32
 8001b4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4e:	f107 030c 	add.w	r3, r7, #12
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	605a      	str	r2, [r3, #4]
 8001b58:	609a      	str	r2, [r3, #8]
 8001b5a:	60da      	str	r2, [r3, #12]
 8001b5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60bb      	str	r3, [r7, #8]
 8001b62:	4b1f      	ldr	r3, [pc, #124]	; (8001be0 <MX_GPIO_Init+0x98>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	4a1e      	ldr	r2, [pc, #120]	; (8001be0 <MX_GPIO_Init+0x98>)
 8001b68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6e:	4b1c      	ldr	r3, [pc, #112]	; (8001be0 <MX_GPIO_Init+0x98>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b76:	60bb      	str	r3, [r7, #8]
 8001b78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	607b      	str	r3, [r7, #4]
 8001b7e:	4b18      	ldr	r3, [pc, #96]	; (8001be0 <MX_GPIO_Init+0x98>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	4a17      	ldr	r2, [pc, #92]	; (8001be0 <MX_GPIO_Init+0x98>)
 8001b84:	f043 0308 	orr.w	r3, r3, #8
 8001b88:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8a:	4b15      	ldr	r3, [pc, #84]	; (8001be0 <MX_GPIO_Init+0x98>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	f003 0308 	and.w	r3, r3, #8
 8001b92:	607b      	str	r3, [r7, #4]
 8001b94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b96:	2300      	movs	r3, #0
 8001b98:	603b      	str	r3, [r7, #0]
 8001b9a:	4b11      	ldr	r3, [pc, #68]	; (8001be0 <MX_GPIO_Init+0x98>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	4a10      	ldr	r2, [pc, #64]	; (8001be0 <MX_GPIO_Init+0x98>)
 8001ba0:	f043 0302 	orr.w	r3, r3, #2
 8001ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba6:	4b0e      	ldr	r3, [pc, #56]	; (8001be0 <MX_GPIO_Init+0x98>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	603b      	str	r3, [r7, #0]
 8001bb0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_Pin_GPIO_Port, CS_Pin_Pin, GPIO_PIN_RESET);
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	2180      	movs	r1, #128	; 0x80
 8001bb6:	480b      	ldr	r0, [pc, #44]	; (8001be4 <MX_GPIO_Init+0x9c>)
 8001bb8:	f001 f85c 	bl	8002c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_Pin_Pin */
  GPIO_InitStruct.Pin = CS_Pin_Pin;
 8001bbc:	2380      	movs	r3, #128	; 0x80
 8001bbe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS_Pin_GPIO_Port, &GPIO_InitStruct);
 8001bcc:	f107 030c 	add.w	r3, r7, #12
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4804      	ldr	r0, [pc, #16]	; (8001be4 <MX_GPIO_Init+0x9c>)
 8001bd4:	f000 fe9a 	bl	800290c <HAL_GPIO_Init>

}
 8001bd8:	bf00      	nop
 8001bda:	3720      	adds	r7, #32
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	40023800 	.word	0x40023800
 8001be4:	40020c00 	.word	0x40020c00

08001be8 <READ_COILS>:

/* USER CODE BEGIN 4 */

/*MODBUS TCP/IP Functions*//*Modbus TCP/IP functions from 1 to 6*/
//01 (0x01) Read Coils
uint8_t *READ_COILS(uint8_t function_code,uint8_t start_address, uint8_t quantity_of_inputs){
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b092      	sub	sp, #72	; 0x48
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	71fb      	strb	r3, [r7, #7]
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	71bb      	strb	r3, [r7, #6]
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	717b      	strb	r3, [r7, #5]
  //RES PDU'nun uzunluğu quantity of inputsun değerine göre değişiyor.
  REG[102] = GPIO_PIN_RESET;
 8001bfa:	4b41      	ldr	r3, [pc, #260]	; (8001d00 <READ_COILS+0x118>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
  REG[103] = GPIO_PIN_SET;
 8001c02:	4b3f      	ldr	r3, [pc, #252]	; (8001d00 <READ_COILS+0x118>)
 8001c04:	2201      	movs	r2, #1
 8001c06:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
  int length_res_pdu;
  int byte_count;
  if(quantity_of_inputs>8){
 8001c0a:	797b      	ldrb	r3, [r7, #5]
 8001c0c:	2b08      	cmp	r3, #8
 8001c0e:	d90d      	bls.n	8001c2c <READ_COILS+0x44>
    //Burada response uzunluğunun belirlenmesi için quantity of inputs sayısının 8 e bölünmesi gerekir.
    //Tam kısmı bizim byte sayımızı oluşturur. Eğer 8 e tam bölünmüyorsa artık bitler için ekstra bir byte
    //atanması gerekir.
    byte_count = quantity_of_inputs /8;
 8001c10:	797b      	ldrb	r3, [r7, #5]
 8001c12:	08db      	lsrs	r3, r3, #3
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	647b      	str	r3, [r7, #68]	; 0x44
    if(quantity_of_inputs %8 != 0){
 8001c18:	797b      	ldrb	r3, [r7, #5]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d005      	beq.n	8001c30 <READ_COILS+0x48>
      byte_count++;
 8001c24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c26:	3301      	adds	r3, #1
 8001c28:	647b      	str	r3, [r7, #68]	; 0x44
 8001c2a:	e001      	b.n	8001c30 <READ_COILS+0x48>
    }
  }else{
    byte_count=1;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  //response length = 1 byte(function code) + 1 byte(byte count) + output status byte
  length_res_pdu = byte_count +2;
 8001c30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c32:	3302      	adds	r3, #2
 8001c34:	643b      	str	r3, [r7, #64]	; 0x40

  uint8_t *RES_PDU_1 = malloc(length_res_pdu*sizeof(uint8_t));
 8001c36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f003 faaf 	bl	800519c <malloc>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	63fb      	str	r3, [r7, #60]	; 0x3c

  RES_PDU_1[0] = function_code; //Function code
 8001c42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c44:	79fa      	ldrb	r2, [r7, #7]
 8001c46:	701a      	strb	r2, [r3, #0]
  RES_PDU_1[1] = byte_count; //byte count
 8001c48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001c4e:	b2d2      	uxtb	r2, r2
 8001c50:	701a      	strb	r2, [r3, #0]

  int mosfet1_status = REG[102];
 8001c52:	4b2b      	ldr	r3, [pc, #172]	; (8001d00 <READ_COILS+0x118>)
 8001c54:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 8001c58:	63bb      	str	r3, [r7, #56]	; 0x38
  int mosfet2_status = REG[103];
 8001c5a:	4b29      	ldr	r3, [pc, #164]	; (8001d00 <READ_COILS+0x118>)
 8001c5c:	f8b3 30ce 	ldrh.w	r3, [r3, #206]	; 0xce
 8001c60:	637b      	str	r3, [r7, #52]	; 0x34

  //Röleleri sür
  HAL_GPIO_WritePin(Role1_GPIO_Port, Role1_Pin, REG[102]);
 8001c62:	4b27      	ldr	r3, [pc, #156]	; (8001d00 <READ_COILS+0x118>)
 8001c64:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c70:	4824      	ldr	r0, [pc, #144]	; (8001d04 <READ_COILS+0x11c>)
 8001c72:	f000 ffff 	bl	8002c74 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Role2_GPIO_Port, Role2_Pin, REG[103]);
 8001c76:	4b22      	ldr	r3, [pc, #136]	; (8001d00 <READ_COILS+0x118>)
 8001c78:	f8b3 30ce 	ldrh.w	r3, [r3, #206]	; 0xce
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	461a      	mov	r2, r3
 8001c80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c84:	481f      	ldr	r0, [pc, #124]	; (8001d04 <READ_COILS+0x11c>)
 8001c86:	f000 fff5 	bl	8002c74 <HAL_GPIO_WritePin>

  //Burada sadece iki tane röleyi süreceğinden start adress kullanmaya gerek kalmamıştır.
  //Eğer fazla sayıda bir dijital input okunacaksa geçici bir arraye push fonksiyonuyla status
  //değerler atılıp PDU registerina yazılır ardından temp arraydeki değerler resetlenerek
  //yeni değerlerin girişine hazır edilir.
  int status_role[8] = {0,0,0,0,0,0,mosfet2_status,mosfet1_status};
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60bb      	str	r3, [r7, #8]
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60fb      	str	r3, [r7, #12]
 8001c92:	2300      	movs	r3, #0
 8001c94:	613b      	str	r3, [r7, #16]
 8001c96:	2300      	movs	r3, #0
 8001c98:	617b      	str	r3, [r7, #20]
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	61bb      	str	r3, [r7, #24]
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61fb      	str	r3, [r7, #28]
 8001ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ca4:	623b      	str	r3, [r7, #32]
 8001ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ca8:	627b      	str	r3, [r7, #36]	; 0x24

  int result_array_to_hex = arrayToHex(status_role,elemansayisi_array(status_role));
 8001caa:	f107 0308 	add.w	r3, r7, #8
 8001cae:	2108      	movs	r1, #8
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f000 fa59 	bl	8002168 <arrayToHex>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	633b      	str	r3, [r7, #48]	; 0x30
  printf("Array to hex: %d\n",result_array_to_hex);
 8001cba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001cbc:	4812      	ldr	r0, [pc, #72]	; (8001d08 <READ_COILS+0x120>)
 8001cbe:	f003 fb65 	bl	800538c <iprintf>
  char *hexString = decimalToHex(result_array_to_hex);
 8001cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f000 fa71 	bl	80021ac <decimalToHex>
 8001cca:	62f8      	str	r0, [r7, #44]	; 0x2c
  int con_hexString = atoi(hexString); //char olarak uint8 tipinde bir arraye atamayız. O yüzden char stringi int tipine dönüştürdüm.
 8001ccc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001cce:	f003 fa23 	bl	8005118 <atoi>
 8001cd2:	62b8      	str	r0, [r7, #40]	; 0x28
  printf("Hex format: %d\n",con_hexString);
 8001cd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001cd6:	480d      	ldr	r0, [pc, #52]	; (8001d0c <READ_COILS+0x124>)
 8001cd8:	f003 fb58 	bl	800538c <iprintf>

  //Sadece iki adet mosfet girişi olduğundan sadece üç elemanlı bir RESPONSE PDU arrayi oluşturulmuştur.
  RES_PDU_1[2] = (uint8_t)con_hexString;
 8001cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cde:	3302      	adds	r3, #2
 8001ce0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ce2:	b2d2      	uxtb	r2, r2
 8001ce4:	701a      	strb	r2, [r3, #0]

  printf("RES_PDU_1[2] = %d",RES_PDU_1[2]);
 8001ce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ce8:	3302      	adds	r3, #2
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	4619      	mov	r1, r3
 8001cee:	4808      	ldr	r0, [pc, #32]	; (8001d10 <READ_COILS+0x128>)
 8001cf0:	f003 fb4c 	bl	800538c <iprintf>
  return RES_PDU_1;
 8001cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3748      	adds	r7, #72	; 0x48
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	20000124 	.word	0x20000124
 8001d04:	40020c00 	.word	0x40020c00
 8001d08:	08006844 	.word	0x08006844
 8001d0c:	08006858 	.word	0x08006858
 8001d10:	08006868 	.word	0x08006868

08001d14 <READ_DISCRETE_INPUT>:

//02 (0x02) Read Discrete Input
uint8_t *READ_DISCRETE_INPUT(uint8_t function_code, uint8_t quantity_of_inputs){
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b092      	sub	sp, #72	; 0x48
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	460a      	mov	r2, r1
 8001d1e:	71fb      	strb	r3, [r7, #7]
 8001d20:	4613      	mov	r3, r2
 8001d22:	71bb      	strb	r3, [r7, #6]
  //RES PDU'nun uzunluğu quantity of inputsun değerine göre değişiyor.
  int length_res_pdu;
  int byte_count;
  REG[102] = HAL_GPIO_ReadPin(MOSFET1_GPIO_Port, MOSFET1_Pin);
 8001d24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d28:	483b      	ldr	r0, [pc, #236]	; (8001e18 <READ_DISCRETE_INPUT+0x104>)
 8001d2a:	f000 ff8b 	bl	8002c44 <HAL_GPIO_ReadPin>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	4b3a      	ldr	r3, [pc, #232]	; (8001e1c <READ_DISCRETE_INPUT+0x108>)
 8001d34:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
  REG[103] = HAL_GPIO_ReadPin(MOSFET2_GPIO_Port, MOSFET2_Pin);
 8001d38:	2140      	movs	r1, #64	; 0x40
 8001d3a:	4837      	ldr	r0, [pc, #220]	; (8001e18 <READ_DISCRETE_INPUT+0x104>)
 8001d3c:	f000 ff82 	bl	8002c44 <HAL_GPIO_ReadPin>
 8001d40:	4603      	mov	r3, r0
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	4b35      	ldr	r3, [pc, #212]	; (8001e1c <READ_DISCRETE_INPUT+0x108>)
 8001d46:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
  if(quantity_of_inputs>8){
 8001d4a:	79bb      	ldrb	r3, [r7, #6]
 8001d4c:	2b08      	cmp	r3, #8
 8001d4e:	d90d      	bls.n	8001d6c <READ_DISCRETE_INPUT+0x58>
    //Burada response uzunluğunun belirlenmesi için quantity of inputs sayısının 8 e bölünmesi gerekir.
    //Tam kısmı bizim byte sayımızı oluşturur. Eğer 8 e tam bölünmüyorsa artık bitler için ekstra bir byte
    //atanması gerekir.
    byte_count = quantity_of_inputs /8;
 8001d50:	79bb      	ldrb	r3, [r7, #6]
 8001d52:	08db      	lsrs	r3, r3, #3
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	647b      	str	r3, [r7, #68]	; 0x44
    if(quantity_of_inputs %8 != 0){
 8001d58:	79bb      	ldrb	r3, [r7, #6]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d005      	beq.n	8001d70 <READ_DISCRETE_INPUT+0x5c>
      byte_count++;
 8001d64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d66:	3301      	adds	r3, #1
 8001d68:	647b      	str	r3, [r7, #68]	; 0x44
 8001d6a:	e001      	b.n	8001d70 <READ_DISCRETE_INPUT+0x5c>
    }
  }else{
    byte_count=1;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  //response length = 1 byte(function code) + 1 byte(byte count) + output status byte
  length_res_pdu = byte_count +2;
 8001d70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d72:	3302      	adds	r3, #2
 8001d74:	643b      	str	r3, [r7, #64]	; 0x40

  uint8_t *RES_PDU_2 = malloc(length_res_pdu*sizeof(uint8_t));
 8001d76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f003 fa0f 	bl	800519c <malloc>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	63fb      	str	r3, [r7, #60]	; 0x3c

  RES_PDU_2[0] = function_code;
 8001d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d84:	79fa      	ldrb	r2, [r7, #7]
 8001d86:	701a      	strb	r2, [r3, #0]
  RES_PDU_2[1] = byte_count;
 8001d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001d8e:	b2d2      	uxtb	r2, r2
 8001d90:	701a      	strb	r2, [r3, #0]

  int role1_status = REG[102];
 8001d92:	4b22      	ldr	r3, [pc, #136]	; (8001e1c <READ_DISCRETE_INPUT+0x108>)
 8001d94:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 8001d98:	63bb      	str	r3, [r7, #56]	; 0x38
  int role2_status = REG[103];
 8001d9a:	4b20      	ldr	r3, [pc, #128]	; (8001e1c <READ_DISCRETE_INPUT+0x108>)
 8001d9c:	f8b3 30ce 	ldrh.w	r3, [r3, #206]	; 0xce
 8001da0:	637b      	str	r3, [r7, #52]	; 0x34

  //Burada sadece iki tane röle girişi okunacağından start adress kullanmaya gerek kalmamıştır.
  //Eğer fazla sayıda bir dijital input okunacaksa geçici bir arraye push fonksiyonuyla status
  //değerler atılıp PDU registerina yazılır ardından temp arraydeki değerler resetlenerek
  //yeni değerlerin girişine hazır edilir.
  int status_role[8] = {0,0,0,0,0,0,role2_status,role1_status};
 8001da2:	2300      	movs	r3, #0
 8001da4:	60bb      	str	r3, [r7, #8]
 8001da6:	2300      	movs	r3, #0
 8001da8:	60fb      	str	r3, [r7, #12]
 8001daa:	2300      	movs	r3, #0
 8001dac:	613b      	str	r3, [r7, #16]
 8001dae:	2300      	movs	r3, #0
 8001db0:	617b      	str	r3, [r7, #20]
 8001db2:	2300      	movs	r3, #0
 8001db4:	61bb      	str	r3, [r7, #24]
 8001db6:	2300      	movs	r3, #0
 8001db8:	61fb      	str	r3, [r7, #28]
 8001dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dbc:	623b      	str	r3, [r7, #32]
 8001dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dc0:	627b      	str	r3, [r7, #36]	; 0x24

  int result_array_to_hex = arrayToHex(status_role,elemansayisi_array(status_role));
 8001dc2:	f107 0308 	add.w	r3, r7, #8
 8001dc6:	2108      	movs	r1, #8
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f000 f9cd 	bl	8002168 <arrayToHex>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	633b      	str	r3, [r7, #48]	; 0x30
  printf("Array to hex: %d\n",result_array_to_hex);
 8001dd2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001dd4:	4812      	ldr	r0, [pc, #72]	; (8001e20 <READ_DISCRETE_INPUT+0x10c>)
 8001dd6:	f003 fad9 	bl	800538c <iprintf>
  char *hexString = decimalToHex(result_array_to_hex);
 8001dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f000 f9e5 	bl	80021ac <decimalToHex>
 8001de2:	62f8      	str	r0, [r7, #44]	; 0x2c
  int con_hexString = atoi(hexString); //char olarak uint8 tipinde bir arraye atamayız. O yüzden char stringi int tipine dönüştürdüm.
 8001de4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001de6:	f003 f997 	bl	8005118 <atoi>
 8001dea:	62b8      	str	r0, [r7, #40]	; 0x28
  printf("Hex format: %d\n",con_hexString);
 8001dec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001dee:	480d      	ldr	r0, [pc, #52]	; (8001e24 <READ_DISCRETE_INPUT+0x110>)
 8001df0:	f003 facc 	bl	800538c <iprintf>
  //Sadece iki adet röle girişi olduğundan sadece üç elemanlı bir RESPONSE PDU arrayi oluşturulmuştur.

  RES_PDU_2[2] = (uint8_t)con_hexString;
 8001df4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001df6:	3302      	adds	r3, #2
 8001df8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001dfa:	b2d2      	uxtb	r2, r2
 8001dfc:	701a      	strb	r2, [r3, #0]
  printf("RES_PDU_2[2] = %d\n",RES_PDU_2[2]);
 8001dfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e00:	3302      	adds	r3, #2
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	4619      	mov	r1, r3
 8001e06:	4808      	ldr	r0, [pc, #32]	; (8001e28 <READ_DISCRETE_INPUT+0x114>)
 8001e08:	f003 fac0 	bl	800538c <iprintf>
  return RES_PDU_2;
 8001e0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3748      	adds	r7, #72	; 0x48
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40020800 	.word	0x40020800
 8001e1c:	20000124 	.word	0x20000124
 8001e20:	08006844 	.word	0x08006844
 8001e24:	08006858 	.word	0x08006858
 8001e28:	0800687c 	.word	0x0800687c

08001e2c <READ_H_REGS>:

//03 (0x03) Read Holding Registers
uint8_t *READ_H_REGS( uint8_t function_code, uint8_t start_address, uint8_t quantity_of_inputs)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b088      	sub	sp, #32
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4603      	mov	r3, r0
 8001e34:	71fb      	strb	r3, [r7, #7]
 8001e36:	460b      	mov	r3, r1
 8001e38:	71bb      	strb	r3, [r7, #6]
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	717b      	strb	r3, [r7, #5]
  // RES_PDU nun uzunluğu 2*quantity_of_inputs (1byte*2) + byte_count(1 byte) + function_code(1byte)
  int length_res_pdu = 2*quantity_of_inputs + 1 + 1;
 8001e3e:	797b      	ldrb	r3, [r7, #5]
 8001e40:	3301      	adds	r3, #1
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	617b      	str	r3, [r7, #20]
  REG[100] = 355;
 8001e46:	4b2d      	ldr	r3, [pc, #180]	; (8001efc <READ_H_REGS+0xd0>)
 8001e48:	f240 1263 	movw	r2, #355	; 0x163
 8001e4c:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
  REG[101] = 356;
 8001e50:	4b2a      	ldr	r3, [pc, #168]	; (8001efc <READ_H_REGS+0xd0>)
 8001e52:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8001e56:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
  //Adjustment to memory dynamically
  uint8_t *RES_PDU_3 = malloc(length_res_pdu*sizeof(uint8_t));
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f003 f99d 	bl	800519c <malloc>
 8001e62:	4603      	mov	r3, r0
 8001e64:	613b      	str	r3, [r7, #16]

  uint8_t byte_count = 2*quantity_of_inputs;
 8001e66:	797b      	ldrb	r3, [r7, #5]
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	73fb      	strb	r3, [r7, #15]
  RES_PDU_3[0] = function_code;
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	79fa      	ldrb	r2, [r7, #7]
 8001e70:	701a      	strb	r2, [r3, #0]
  RES_PDU_3[1] = byte_count;
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	3301      	adds	r3, #1
 8001e76:	7bfa      	ldrb	r2, [r7, #15]
 8001e78:	701a      	strb	r2, [r3, #0]

  //Burada Arduino'nun Analog Output çıkışlarını okuyacak değerler yer alacak
  for(int i = 0; i<quantity_of_inputs; i++)
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	61fb      	str	r3, [r7, #28]
 8001e7e:	e01e      	b.n	8001ebe <READ_H_REGS+0x92>
  {
    RES_PDU_3[(2*i)+2] = highByte(REG[start_address + i]);
 8001e80:	79ba      	ldrb	r2, [r7, #6]
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	4413      	add	r3, r2
 8001e86:	4a1d      	ldr	r2, [pc, #116]	; (8001efc <READ_H_REGS+0xd0>)
 8001e88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e8c:	0a1b      	lsrs	r3, r3, #8
 8001e8e:	b299      	uxth	r1, r3
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	3302      	adds	r3, #2
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	4413      	add	r3, r2
 8001e9a:	b2ca      	uxtb	r2, r1
 8001e9c:	701a      	strb	r2, [r3, #0]
    RES_PDU_3[(2*i)+3] = lowByte(REG[start_address + i]);
 8001e9e:	79ba      	ldrb	r2, [r7, #6]
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	4a15      	ldr	r2, [pc, #84]	; (8001efc <READ_H_REGS+0xd0>)
 8001ea6:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	3303      	adds	r3, #3
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	b2ca      	uxtb	r2, r1
 8001eb6:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i<quantity_of_inputs; i++)
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	61fb      	str	r3, [r7, #28]
 8001ebe:	797b      	ldrb	r3, [r7, #5]
 8001ec0:	69fa      	ldr	r2, [r7, #28]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	dbdc      	blt.n	8001e80 <READ_H_REGS+0x54>
  }
  printf("RES_PDU \n");
 8001ec6:	480e      	ldr	r0, [pc, #56]	; (8001f00 <READ_H_REGS+0xd4>)
 8001ec8:	f003 fafc 	bl	80054c4 <puts>
  for (int i = 0; i < length_res_pdu; i++)
 8001ecc:	2300      	movs	r3, #0
 8001ece:	61bb      	str	r3, [r7, #24]
 8001ed0:	e00a      	b.n	8001ee8 <READ_H_REGS+0xbc>
  {
    printf("/x%x ",RES_PDU_3[i]);
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	693a      	ldr	r2, [r7, #16]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	4619      	mov	r1, r3
 8001edc:	4809      	ldr	r0, [pc, #36]	; (8001f04 <READ_H_REGS+0xd8>)
 8001ede:	f003 fa55 	bl	800538c <iprintf>
  for (int i = 0; i < length_res_pdu; i++)
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	61bb      	str	r3, [r7, #24]
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	dbf0      	blt.n	8001ed2 <READ_H_REGS+0xa6>
  }
  return RES_PDU_3;
 8001ef0:	693b      	ldr	r3, [r7, #16]
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3720      	adds	r7, #32
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	20000124 	.word	0x20000124
 8001f00:	08006890 	.word	0x08006890
 8001f04:	080067a0 	.word	0x080067a0

08001f08 <READ_IN_REGS>:

//04 (0x04) Read Input Registers (analogRead() fonksiyonuyla analog voltaj girişlerini okuyabiliyoruz)
uint8_t *READ_IN_REGS(uint8_t function_code, uint8_t start_address, uint8_t quantity_of_inputs){
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b088      	sub	sp, #32
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	4603      	mov	r3, r0
 8001f10:	71fb      	strb	r3, [r7, #7]
 8001f12:	460b      	mov	r3, r1
 8001f14:	71bb      	strb	r3, [r7, #6]
 8001f16:	4613      	mov	r3, r2
 8001f18:	717b      	strb	r3, [r7, #5]
  // RES_PDU nun uzunluğu 2*quantity_of_inputs (1byte*2) + byte_count(1 byte) + function_code(1byte)
  int length_res_pdu = 2*quantity_of_inputs + 1 + 1;
 8001f1a:	797b      	ldrb	r3, [r7, #5]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	617b      	str	r3, [r7, #20]

  //Adjustment to memory dynamically
  uint8_t *RES_PDU_4 = malloc(length_res_pdu*sizeof(uint8_t));
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f003 f939 	bl	800519c <malloc>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	613b      	str	r3, [r7, #16]

  uint8_t byte_count = 2*quantity_of_inputs;
 8001f2e:	797b      	ldrb	r3, [r7, #5]
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	73fb      	strb	r3, [r7, #15]
  RES_PDU_4[0] = function_code;
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	79fa      	ldrb	r2, [r7, #7]
 8001f38:	701a      	strb	r2, [r3, #0]
  RES_PDU_4[1] = byte_count;
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	7bfa      	ldrb	r2, [r7, #15]
 8001f40:	701a      	strb	r2, [r3, #0]
  //Burada yapılması gereken bir map fonksiyonu oluşturmak
  //Eğer birden fazla ise switch case yapısı ile for döngüsü yapılmalı yada if-else if condition şeklinde
  //Burada örnek olarak map fonksiyonundan çıkan değeri REG[100]-REG[101] değerlerine atamamız lazım.
  //Şimdilik sadece değer olarak atanmalı sonrası için değişiklikler yapılmalı

  REG[100] = 64;
 8001f42:	4b24      	ldr	r3, [pc, #144]	; (8001fd4 <READ_IN_REGS+0xcc>)
 8001f44:	2240      	movs	r2, #64	; 0x40
 8001f46:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
  REG[101] = 65;
 8001f4a:	4b22      	ldr	r3, [pc, #136]	; (8001fd4 <READ_IN_REGS+0xcc>)
 8001f4c:	2241      	movs	r2, #65	; 0x41
 8001f4e:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca

  for(int i = 0; i<quantity_of_inputs; i++)
 8001f52:	2300      	movs	r3, #0
 8001f54:	61fb      	str	r3, [r7, #28]
 8001f56:	e01e      	b.n	8001f96 <READ_IN_REGS+0x8e>
  {
    RES_PDU_4[(2*i)+2] = highByte(REG[start_address + i]); //analogRead fonksiyonunu analog giriş verdiğimizde koymalıyız
 8001f58:	79ba      	ldrb	r2, [r7, #6]
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	4a1d      	ldr	r2, [pc, #116]	; (8001fd4 <READ_IN_REGS+0xcc>)
 8001f60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f64:	0a1b      	lsrs	r3, r3, #8
 8001f66:	b299      	uxth	r1, r3
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	3302      	adds	r3, #2
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	4413      	add	r3, r2
 8001f72:	b2ca      	uxtb	r2, r1
 8001f74:	701a      	strb	r2, [r3, #0]
    RES_PDU_4[(2*i)+3] = lowByte(REG[start_address + i]);  //analogRead fonksiyonunu analog giriş verdiğimizde koymalıyız
 8001f76:	79ba      	ldrb	r2, [r7, #6]
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	4a15      	ldr	r2, [pc, #84]	; (8001fd4 <READ_IN_REGS+0xcc>)
 8001f7e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	3303      	adds	r3, #3
 8001f88:	693a      	ldr	r2, [r7, #16]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	b2ca      	uxtb	r2, r1
 8001f8e:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i<quantity_of_inputs; i++)
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	3301      	adds	r3, #1
 8001f94:	61fb      	str	r3, [r7, #28]
 8001f96:	797b      	ldrb	r3, [r7, #5]
 8001f98:	69fa      	ldr	r2, [r7, #28]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	dbdc      	blt.n	8001f58 <READ_IN_REGS+0x50>
  }
  printf("RES_PDU \n");
 8001f9e:	480e      	ldr	r0, [pc, #56]	; (8001fd8 <READ_IN_REGS+0xd0>)
 8001fa0:	f003 fa90 	bl	80054c4 <puts>
  for (int i = 0; i < length_res_pdu; i++)
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	61bb      	str	r3, [r7, #24]
 8001fa8:	e00a      	b.n	8001fc0 <READ_IN_REGS+0xb8>
  {
    printf("/x%x ",RES_PDU_4[i]);
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	4413      	add	r3, r2
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4809      	ldr	r0, [pc, #36]	; (8001fdc <READ_IN_REGS+0xd4>)
 8001fb6:	f003 f9e9 	bl	800538c <iprintf>
  for (int i = 0; i < length_res_pdu; i++)
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	61bb      	str	r3, [r7, #24]
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	dbf0      	blt.n	8001faa <READ_IN_REGS+0xa2>
  }
  return RES_PDU_4;
 8001fc8:	693b      	ldr	r3, [r7, #16]
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3720      	adds	r7, #32
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	20000124 	.word	0x20000124
 8001fd8:	08006890 	.word	0x08006890
 8001fdc:	080067a0 	.word	0x080067a0

08001fe0 <WRITE_SINGLE_COIL>:


//05 (0x5) Write Single Coil
uint8_t *WRITE_SINGLE_COIL(uint8_t function_code,uint8_t output_address,uint16_t output_value){
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b08a      	sub	sp, #40	; 0x28
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	71fb      	strb	r3, [r7, #7]
 8001fea:	460b      	mov	r3, r1
 8001fec:	71bb      	strb	r3, [r7, #6]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	80bb      	strh	r3, [r7, #4]
    //RES PDU nun uzunluğu 5 byte = 1 byte (Function code) + 2byte (Output Address) + 2 byte (Output value)
    int length_res_pdu = 5;
 8001ff2:	2305      	movs	r3, #5
 8001ff4:	61bb      	str	r3, [r7, #24]
    uint8_t *output_address_high_low_byte = Dec2Hex(output_address);
 8001ff6:	79bb      	ldrb	r3, [r7, #6]
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f000 f8f6 	bl	80021ec <Dec2Hex>
 8002000:	6178      	str	r0, [r7, #20]
    uint8_t *output_value_high_low_byte = Dec2Hex(output_value);
 8002002:	88bb      	ldrh	r3, [r7, #4]
 8002004:	4618      	mov	r0, r3
 8002006:	f000 f8f1 	bl	80021ec <Dec2Hex>
 800200a:	6138      	str	r0, [r7, #16]
    //Adjustment to memory dynamically
    uint8_t *RES_PDU_5 = malloc(length_res_pdu*sizeof(uint8_t));
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	4618      	mov	r0, r3
 8002010:	f003 f8c4 	bl	800519c <malloc>
 8002014:	4603      	mov	r3, r0
 8002016:	60fb      	str	r3, [r7, #12]

    RES_PDU_5[0] = function_code;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	79fa      	ldrb	r2, [r7, #7]
 800201c:	701a      	strb	r2, [r3, #0]

    //Burada bir dijital bir pin çıktısı adresi atanması lazım.
    for(int i=0;i<2;i++){
 800201e:	2300      	movs	r3, #0
 8002020:	627b      	str	r3, [r7, #36]	; 0x24
 8002022:	e00b      	b.n	800203c <WRITE_SINGLE_COIL+0x5c>
      RES_PDU_5[i+1] = *(output_address_high_low_byte + i);
 8002024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002026:	697a      	ldr	r2, [r7, #20]
 8002028:	441a      	add	r2, r3
 800202a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202c:	3301      	adds	r3, #1
 800202e:	68f9      	ldr	r1, [r7, #12]
 8002030:	440b      	add	r3, r1
 8002032:	7812      	ldrb	r2, [r2, #0]
 8002034:	701a      	strb	r2, [r3, #0]
    for(int i=0;i<2;i++){
 8002036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002038:	3301      	adds	r3, #1
 800203a:	627b      	str	r3, [r7, #36]	; 0x24
 800203c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203e:	2b01      	cmp	r3, #1
 8002040:	ddf0      	ble.n	8002024 <WRITE_SINGLE_COIL+0x44>
    }
    //Eğer output value 0xFF00 (aslında 0xFF ama high byte FF low byte 00 olarak ayarlanmış) ise
    //GPIO_Write fonksiyonu üzerinden olarak dijital pin aktif edilmelidir. Bu fonksiyona yazılmalıdır
    for(int i=0;i<2;i++){
 8002042:	2300      	movs	r3, #0
 8002044:	623b      	str	r3, [r7, #32]
 8002046:	e00b      	b.n	8002060 <WRITE_SINGLE_COIL+0x80>
      RES_PDU_5[i+3] = *(output_value_high_low_byte+i);
 8002048:	6a3b      	ldr	r3, [r7, #32]
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	441a      	add	r2, r3
 800204e:	6a3b      	ldr	r3, [r7, #32]
 8002050:	3303      	adds	r3, #3
 8002052:	68f9      	ldr	r1, [r7, #12]
 8002054:	440b      	add	r3, r1
 8002056:	7812      	ldrb	r2, [r2, #0]
 8002058:	701a      	strb	r2, [r3, #0]
    for(int i=0;i<2;i++){
 800205a:	6a3b      	ldr	r3, [r7, #32]
 800205c:	3301      	adds	r3, #1
 800205e:	623b      	str	r3, [r7, #32]
 8002060:	6a3b      	ldr	r3, [r7, #32]
 8002062:	2b01      	cmp	r3, #1
 8002064:	ddf0      	ble.n	8002048 <WRITE_SINGLE_COIL+0x68>
    }

    printf("RES_PDU \n");
 8002066:	480d      	ldr	r0, [pc, #52]	; (800209c <WRITE_SINGLE_COIL+0xbc>)
 8002068:	f003 fa2c 	bl	80054c4 <puts>
    for(int i=0;i<length_res_pdu;i++){
 800206c:	2300      	movs	r3, #0
 800206e:	61fb      	str	r3, [r7, #28]
 8002070:	e00a      	b.n	8002088 <WRITE_SINGLE_COIL+0xa8>
        printf("/x%x \n",RES_PDU_5[i]);
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	4413      	add	r3, r2
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	4619      	mov	r1, r3
 800207c:	4808      	ldr	r0, [pc, #32]	; (80020a0 <WRITE_SINGLE_COIL+0xc0>)
 800207e:	f003 f985 	bl	800538c <iprintf>
    for(int i=0;i<length_res_pdu;i++){
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	3301      	adds	r3, #1
 8002086:	61fb      	str	r3, [r7, #28]
 8002088:	69fa      	ldr	r2, [r7, #28]
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	429a      	cmp	r2, r3
 800208e:	dbf0      	blt.n	8002072 <WRITE_SINGLE_COIL+0x92>
    }

    return RES_PDU_5;
 8002090:	68fb      	ldr	r3, [r7, #12]
}
 8002092:	4618      	mov	r0, r3
 8002094:	3728      	adds	r7, #40	; 0x28
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	08006890 	.word	0x08006890
 80020a0:	0800689c 	.word	0x0800689c

080020a4 <WRITE_SINGLE_REG>:

//06 (0x06) Write Single Register
//This command is used to record one value of the analog output AO.
uint8_t *WRITE_SINGLE_REG(uint8_t function_code,uint8_t start_address,uint8_t output_value){
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b08a      	sub	sp, #40	; 0x28
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	4603      	mov	r3, r0
 80020ac:	71fb      	strb	r3, [r7, #7]
 80020ae:	460b      	mov	r3, r1
 80020b0:	71bb      	strb	r3, [r7, #6]
 80020b2:	4613      	mov	r3, r2
 80020b4:	717b      	strb	r3, [r7, #5]
  //RES PDU'nun uzunluğu 5byte = 1byte (function code) + 2byte(Register Byte High/Low) + 2byte(High/Low Byte meaning)
  int length_res_pdu = 5;
 80020b6:	2305      	movs	r3, #5
 80020b8:	61bb      	str	r3, [r7, #24]
  uint8_t *output_address_high_low_byte = Dec2Hex(start_address);
 80020ba:	79bb      	ldrb	r3, [r7, #6]
 80020bc:	b29b      	uxth	r3, r3
 80020be:	4618      	mov	r0, r3
 80020c0:	f000 f894 	bl	80021ec <Dec2Hex>
 80020c4:	6178      	str	r0, [r7, #20]
  uint8_t *output_value_high_low_byte = Dec2Hex(output_value);
 80020c6:	797b      	ldrb	r3, [r7, #5]
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	4618      	mov	r0, r3
 80020cc:	f000 f88e 	bl	80021ec <Dec2Hex>
 80020d0:	6138      	str	r0, [r7, #16]

  uint8_t *RES_PDU_6 = malloc(length_res_pdu*sizeof(uint8_t));
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f003 f861 	bl	800519c <malloc>
 80020da:	4603      	mov	r3, r0
 80020dc:	60fb      	str	r3, [r7, #12]

  RES_PDU_6[0] = function_code;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	79fa      	ldrb	r2, [r7, #7]
 80020e2:	701a      	strb	r2, [r3, #0]

  //Burada bir dijital bir pin çıktısı adresi atanması lazım.
  for(int i=0;i<2;i++){
 80020e4:	2300      	movs	r3, #0
 80020e6:	627b      	str	r3, [r7, #36]	; 0x24
 80020e8:	e00b      	b.n	8002102 <WRITE_SINGLE_REG+0x5e>
    RES_PDU_6[i+1] = *(output_address_high_low_byte + i);
 80020ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ec:	697a      	ldr	r2, [r7, #20]
 80020ee:	441a      	add	r2, r3
 80020f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f2:	3301      	adds	r3, #1
 80020f4:	68f9      	ldr	r1, [r7, #12]
 80020f6:	440b      	add	r3, r1
 80020f8:	7812      	ldrb	r2, [r2, #0]
 80020fa:	701a      	strb	r2, [r3, #0]
  for(int i=0;i<2;i++){
 80020fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fe:	3301      	adds	r3, #1
 8002100:	627b      	str	r3, [r7, #36]	; 0x24
 8002102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002104:	2b01      	cmp	r3, #1
 8002106:	ddf0      	ble.n	80020ea <WRITE_SINGLE_REG+0x46>
  }

  for(int i=0;i<2;i++){
 8002108:	2300      	movs	r3, #0
 800210a:	623b      	str	r3, [r7, #32]
 800210c:	e00b      	b.n	8002126 <WRITE_SINGLE_REG+0x82>
    RES_PDU_6[i+3] = *(output_value_high_low_byte + i);
 800210e:	6a3b      	ldr	r3, [r7, #32]
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	441a      	add	r2, r3
 8002114:	6a3b      	ldr	r3, [r7, #32]
 8002116:	3303      	adds	r3, #3
 8002118:	68f9      	ldr	r1, [r7, #12]
 800211a:	440b      	add	r3, r1
 800211c:	7812      	ldrb	r2, [r2, #0]
 800211e:	701a      	strb	r2, [r3, #0]
  for(int i=0;i<2;i++){
 8002120:	6a3b      	ldr	r3, [r7, #32]
 8002122:	3301      	adds	r3, #1
 8002124:	623b      	str	r3, [r7, #32]
 8002126:	6a3b      	ldr	r3, [r7, #32]
 8002128:	2b01      	cmp	r3, #1
 800212a:	ddf0      	ble.n	800210e <WRITE_SINGLE_REG+0x6a>

  //Duruma göre output değeriyle çıkış sürülebilir. Mesela 5V çıkış alacaksak direkt output değerini sürebilir.
  //DAC ataması yapıldı sadece değeri sürmek kalıyor.

  //PDU yu bastır
  printf("RES_PDU: \n");
 800212c:	480c      	ldr	r0, [pc, #48]	; (8002160 <WRITE_SINGLE_REG+0xbc>)
 800212e:	f003 f9c9 	bl	80054c4 <puts>
  for(int i=0;i<length_res_pdu;i++){
 8002132:	2300      	movs	r3, #0
 8002134:	61fb      	str	r3, [r7, #28]
 8002136:	e00a      	b.n	800214e <WRITE_SINGLE_REG+0xaa>
    printf("/x%x \n",RES_PDU_6[i]);
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	4413      	add	r3, r2
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	4619      	mov	r1, r3
 8002142:	4808      	ldr	r0, [pc, #32]	; (8002164 <WRITE_SINGLE_REG+0xc0>)
 8002144:	f003 f922 	bl	800538c <iprintf>
  for(int i=0;i<length_res_pdu;i++){
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	3301      	adds	r3, #1
 800214c:	61fb      	str	r3, [r7, #28]
 800214e:	69fa      	ldr	r2, [r7, #28]
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	429a      	cmp	r2, r3
 8002154:	dbf0      	blt.n	8002138 <WRITE_SINGLE_REG+0x94>
  }
  return RES_PDU_6;
 8002156:	68fb      	ldr	r3, [r7, #12]
}
 8002158:	4618      	mov	r0, r3
 800215a:	3728      	adds	r7, #40	; 0x28
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	080068a4 	.word	0x080068a4
 8002164:	0800689c 	.word	0x0800689c

08002168 <arrayToHex>:



//Bir 8 elemanlı arrayi (0 ve 1 lerden oluşan) hexadecimale çeviriyor.
unsigned int arrayToHex(int a[], int length) {
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
    unsigned int hexValue = 0;
 8002172:	2300      	movs	r3, #0
 8002174:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < length; i++) {
 8002176:	2300      	movs	r3, #0
 8002178:	60bb      	str	r3, [r7, #8]
 800217a:	e00b      	b.n	8002194 <arrayToHex+0x2c>
        hexValue = (hexValue << 1) | a[i];
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	68ba      	ldr	r2, [r7, #8]
 8002182:	0092      	lsls	r2, r2, #2
 8002184:	6879      	ldr	r1, [r7, #4]
 8002186:	440a      	add	r2, r1
 8002188:	6812      	ldr	r2, [r2, #0]
 800218a:	4313      	orrs	r3, r2
 800218c:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < length; i++) {
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	3301      	adds	r3, #1
 8002192:	60bb      	str	r3, [r7, #8]
 8002194:	68ba      	ldr	r2, [r7, #8]
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	429a      	cmp	r2, r3
 800219a:	dbef      	blt.n	800217c <arrayToHex+0x14>
    }
    return hexValue;
 800219c:	68fb      	ldr	r3, [r7, #12]
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3714      	adds	r7, #20
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
	...

080021ac <decimalToHex>:
    return decimal;
}


//Decimal bir değeri Hex sayısına çevirmek için (arrayToHex den gelen sayıyı hex formatına çevirir)
char* decimalToHex(unsigned int decimal) {
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
    char* hexValue = (char*)malloc(sizeof(char) * 10); // Bellekte alan ayır, maksimum 10 karakterlik hex değeri
 80021b4:	200a      	movs	r0, #10
 80021b6:	f002 fff1 	bl	800519c <malloc>
 80021ba:	4603      	mov	r3, r0
 80021bc:	60fb      	str	r3, [r7, #12]
    if(hexValue == NULL) {
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d105      	bne.n	80021d0 <decimalToHex+0x24>
        printf("Bellek tahsisi basarisiz!\n");
 80021c4:	4807      	ldr	r0, [pc, #28]	; (80021e4 <decimalToHex+0x38>)
 80021c6:	f003 f97d 	bl	80054c4 <puts>
        exit(1);
 80021ca:	2001      	movs	r0, #1
 80021cc:	f002 ffae 	bl	800512c <exit>
    }
    sprintf(hexValue, "%X", decimal); // Ondalık sayıyı hexadecimal olarak dönüştür
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	4905      	ldr	r1, [pc, #20]	; (80021e8 <decimalToHex+0x3c>)
 80021d4:	68f8      	ldr	r0, [r7, #12]
 80021d6:	f003 f98d 	bl	80054f4 <siprintf>
    return hexValue;
 80021da:	68fb      	ldr	r3, [r7, #12]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3710      	adds	r7, #16
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	080068b0 	.word	0x080068b0
 80021e8:	080068cc 	.word	0x080068cc

080021ec <Dec2Hex>:

//Decimal to High-Low Byte Hexidecimal value
uint8_t *Dec2Hex(uint16_t c){
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	4603      	mov	r3, r0
 80021f4:	80fb      	strh	r3, [r7, #6]
    uint8_t high_byte = (c>>8) & 0xFF;
 80021f6:	88fb      	ldrh	r3, [r7, #6]
 80021f8:	0a1b      	lsrs	r3, r3, #8
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	73fb      	strb	r3, [r7, #15]
    uint8_t low_byte = c & 0xFF;
 80021fe:	88fb      	ldrh	r3, [r7, #6]
 8002200:	73bb      	strb	r3, [r7, #14]

    uint8_t *result = malloc(2*sizeof(uint8_t));
 8002202:	2002      	movs	r0, #2
 8002204:	f002 ffca 	bl	800519c <malloc>
 8002208:	4603      	mov	r3, r0
 800220a:	60bb      	str	r3, [r7, #8]
    result[0] = high_byte;
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	7bfa      	ldrb	r2, [r7, #15]
 8002210:	701a      	strb	r2, [r3, #0]
    result[1] = low_byte;
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	3301      	adds	r3, #1
 8002216:	7bba      	ldrb	r2, [r7, #14]
 8002218:	701a      	strb	r2, [r3, #0]

    return result;
 800221a:	68bb      	ldr	r3, [r7, #8]
}
 800221c:	4618      	mov	r0, r3
 800221e:	3710      	adds	r7, #16
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <COMBINE_MBAP_PDU>:

uint8_t *COMBINE_MBAP_PDU(uint8_t *MBAP, uint8_t *PDU,int size_MBAP,int size_PDU)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b08a      	sub	sp, #40	; 0x28
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
 8002230:	603b      	str	r3, [r7, #0]
  int size_all = size_MBAP + size_PDU;
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	4413      	add	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
  uint8_t *COMPLETE_FRAME = malloc(size_all * sizeof(uint8_t));
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	4618      	mov	r0, r3
 800223e:	f002 ffad 	bl	800519c <malloc>
 8002242:	4603      	mov	r3, r0
 8002244:	617b      	str	r3, [r7, #20]

  for(int i = 0; i<size_MBAP; i++)
 8002246:	2300      	movs	r3, #0
 8002248:	627b      	str	r3, [r7, #36]	; 0x24
 800224a:	e00a      	b.n	8002262 <COMBINE_MBAP_PDU+0x3e>
  {
    COMPLETE_FRAME[i] = MBAP[i];
 800224c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	441a      	add	r2, r3
 8002252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002254:	6979      	ldr	r1, [r7, #20]
 8002256:	440b      	add	r3, r1
 8002258:	7812      	ldrb	r2, [r2, #0]
 800225a:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i<size_MBAP; i++)
 800225c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225e:	3301      	adds	r3, #1
 8002260:	627b      	str	r3, [r7, #36]	; 0x24
 8002262:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	429a      	cmp	r2, r3
 8002268:	dbf0      	blt.n	800224c <COMBINE_MBAP_PDU+0x28>
  }
  for (int i = 0; i<size_PDU; i++)
 800226a:	2300      	movs	r3, #0
 800226c:	623b      	str	r3, [r7, #32]
 800226e:	e00d      	b.n	800228c <COMBINE_MBAP_PDU+0x68>
  {
    COMPLETE_FRAME[i + size_MBAP] = PDU[i];
 8002270:	6a3b      	ldr	r3, [r7, #32]
 8002272:	68ba      	ldr	r2, [r7, #8]
 8002274:	441a      	add	r2, r3
 8002276:	6a39      	ldr	r1, [r7, #32]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	440b      	add	r3, r1
 800227c:	4619      	mov	r1, r3
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	440b      	add	r3, r1
 8002282:	7812      	ldrb	r2, [r2, #0]
 8002284:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i<size_PDU; i++)
 8002286:	6a3b      	ldr	r3, [r7, #32]
 8002288:	3301      	adds	r3, #1
 800228a:	623b      	str	r3, [r7, #32]
 800228c:	6a3a      	ldr	r2, [r7, #32]
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	429a      	cmp	r2, r3
 8002292:	dbed      	blt.n	8002270 <COMBINE_MBAP_PDU+0x4c>
  }
  printf("COMPLETE_FRAME: \n");
 8002294:	480e      	ldr	r0, [pc, #56]	; (80022d0 <COMBINE_MBAP_PDU+0xac>)
 8002296:	f003 f915 	bl	80054c4 <puts>
  for (int i = 0; i < size_all; i++)
 800229a:	2300      	movs	r3, #0
 800229c:	61fb      	str	r3, [r7, #28]
 800229e:	e00a      	b.n	80022b6 <COMBINE_MBAP_PDU+0x92>
  {
    printf("/x%x ",*(COMPLETE_FRAME +i));
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	697a      	ldr	r2, [r7, #20]
 80022a4:	4413      	add	r3, r2
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	4619      	mov	r1, r3
 80022aa:	480a      	ldr	r0, [pc, #40]	; (80022d4 <COMBINE_MBAP_PDU+0xb0>)
 80022ac:	f003 f86e 	bl	800538c <iprintf>
  for (int i = 0; i < size_all; i++)
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	3301      	adds	r3, #1
 80022b4:	61fb      	str	r3, [r7, #28]
 80022b6:	69fa      	ldr	r2, [r7, #28]
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	dbf0      	blt.n	80022a0 <COMBINE_MBAP_PDU+0x7c>
  }
  printf("\n");
 80022be:	200a      	movs	r0, #10
 80022c0:	f003 f87c 	bl	80053bc <putchar>
  return COMPLETE_FRAME;
 80022c4:	697b      	ldr	r3, [r7, #20]
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3728      	adds	r7, #40	; 0x28
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	080068d0 	.word	0x080068d0
 80022d4:	080067a0 	.word	0x080067a0

080022d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022dc:	b672      	cpsid	i
}
 80022de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022e0:	e7fe      	b.n	80022e0 <Error_Handler+0x8>
	...

080022e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ea:	2300      	movs	r3, #0
 80022ec:	607b      	str	r3, [r7, #4]
 80022ee:	4b10      	ldr	r3, [pc, #64]	; (8002330 <HAL_MspInit+0x4c>)
 80022f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f2:	4a0f      	ldr	r2, [pc, #60]	; (8002330 <HAL_MspInit+0x4c>)
 80022f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022f8:	6453      	str	r3, [r2, #68]	; 0x44
 80022fa:	4b0d      	ldr	r3, [pc, #52]	; (8002330 <HAL_MspInit+0x4c>)
 80022fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002302:	607b      	str	r3, [r7, #4]
 8002304:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002306:	2300      	movs	r3, #0
 8002308:	603b      	str	r3, [r7, #0]
 800230a:	4b09      	ldr	r3, [pc, #36]	; (8002330 <HAL_MspInit+0x4c>)
 800230c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230e:	4a08      	ldr	r2, [pc, #32]	; (8002330 <HAL_MspInit+0x4c>)
 8002310:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002314:	6413      	str	r3, [r2, #64]	; 0x40
 8002316:	4b06      	ldr	r3, [pc, #24]	; (8002330 <HAL_MspInit+0x4c>)
 8002318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800231e:	603b      	str	r3, [r7, #0]
 8002320:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002322:	2007      	movs	r0, #7
 8002324:	f000 fabe 	bl	80028a4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002328:	bf00      	nop
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40023800 	.word	0x40023800

08002334 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b08a      	sub	sp, #40	; 0x28
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800233c:	f107 0314 	add.w	r3, r7, #20
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	605a      	str	r2, [r3, #4]
 8002346:	609a      	str	r2, [r3, #8]
 8002348:	60da      	str	r2, [r3, #12]
 800234a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a19      	ldr	r2, [pc, #100]	; (80023b8 <HAL_SPI_MspInit+0x84>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d12b      	bne.n	80023ae <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002356:	2300      	movs	r3, #0
 8002358:	613b      	str	r3, [r7, #16]
 800235a:	4b18      	ldr	r3, [pc, #96]	; (80023bc <HAL_SPI_MspInit+0x88>)
 800235c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235e:	4a17      	ldr	r2, [pc, #92]	; (80023bc <HAL_SPI_MspInit+0x88>)
 8002360:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002364:	6453      	str	r3, [r2, #68]	; 0x44
 8002366:	4b15      	ldr	r3, [pc, #84]	; (80023bc <HAL_SPI_MspInit+0x88>)
 8002368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800236e:	613b      	str	r3, [r7, #16]
 8002370:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002372:	2300      	movs	r3, #0
 8002374:	60fb      	str	r3, [r7, #12]
 8002376:	4b11      	ldr	r3, [pc, #68]	; (80023bc <HAL_SPI_MspInit+0x88>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237a:	4a10      	ldr	r2, [pc, #64]	; (80023bc <HAL_SPI_MspInit+0x88>)
 800237c:	f043 0302 	orr.w	r3, r3, #2
 8002380:	6313      	str	r3, [r2, #48]	; 0x30
 8002382:	4b0e      	ldr	r3, [pc, #56]	; (80023bc <HAL_SPI_MspInit+0x88>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800238e:	2338      	movs	r3, #56	; 0x38
 8002390:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002392:	2302      	movs	r3, #2
 8002394:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002396:	2300      	movs	r3, #0
 8002398:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800239a:	2303      	movs	r3, #3
 800239c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800239e:	2305      	movs	r3, #5
 80023a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023a2:	f107 0314 	add.w	r3, r7, #20
 80023a6:	4619      	mov	r1, r3
 80023a8:	4805      	ldr	r0, [pc, #20]	; (80023c0 <HAL_SPI_MspInit+0x8c>)
 80023aa:	f000 faaf 	bl	800290c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80023ae:	bf00      	nop
 80023b0:	3728      	adds	r7, #40	; 0x28
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	40013000 	.word	0x40013000
 80023bc:	40023800 	.word	0x40023800
 80023c0:	40020400 	.word	0x40020400

080023c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023c8:	e7fe      	b.n	80023c8 <NMI_Handler+0x4>

080023ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023ca:	b480      	push	{r7}
 80023cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023ce:	e7fe      	b.n	80023ce <HardFault_Handler+0x4>

080023d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023d4:	e7fe      	b.n	80023d4 <MemManage_Handler+0x4>

080023d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023d6:	b480      	push	{r7}
 80023d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023da:	e7fe      	b.n	80023da <BusFault_Handler+0x4>

080023dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023e0:	e7fe      	b.n	80023e0 <UsageFault_Handler+0x4>

080023e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023e2:	b480      	push	{r7}
 80023e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023e6:	bf00      	nop
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023f4:	bf00      	nop
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr

080023fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023fe:	b480      	push	{r7}
 8002400:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002402:	bf00      	nop
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002410:	f000 f976 	bl	8002700 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002414:	bf00      	nop
 8002416:	bd80      	pop	{r7, pc}

08002418 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	4603      	mov	r3, r0
 8002420:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8002422:	4b0f      	ldr	r3, [pc, #60]	; (8002460 <ITM_SendChar+0x48>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a0e      	ldr	r2, [pc, #56]	; (8002460 <ITM_SendChar+0x48>)
 8002428:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800242c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800242e:	4b0d      	ldr	r3, [pc, #52]	; (8002464 <ITM_SendChar+0x4c>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a0c      	ldr	r2, [pc, #48]	; (8002464 <ITM_SendChar+0x4c>)
 8002434:	f043 0301 	orr.w	r3, r3, #1
 8002438:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800243a:	bf00      	nop
 800243c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	2b00      	cmp	r3, #0
 8002448:	d0f8      	beq.n	800243c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800244a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800244e:	79fb      	ldrb	r3, [r7, #7]
 8002450:	6013      	str	r3, [r2, #0]
}
 8002452:	bf00      	nop
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	e000edfc 	.word	0xe000edfc
 8002464:	e0000e00 	.word	0xe0000e00

08002468 <_kill>:
{
  return 1;
}

int _kill(int pid, int sig)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002472:	f002 fe55 	bl	8005120 <__errno>
 8002476:	4603      	mov	r3, r0
 8002478:	2216      	movs	r2, #22
 800247a:	601a      	str	r2, [r3, #0]
  return -1;
 800247c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002480:	4618      	mov	r0, r3
 8002482:	3708      	adds	r7, #8
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <_exit>:

void _exit (int status)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002490:	f04f 31ff 	mov.w	r1, #4294967295
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f7ff ffe7 	bl	8002468 <_kill>
  while (1) {}    /* Make sure we hang here */
 800249a:	e7fe      	b.n	800249a <_exit+0x12>

0800249c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024a8:	2300      	movs	r3, #0
 80024aa:	617b      	str	r3, [r7, #20]
 80024ac:	e00a      	b.n	80024c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024ae:	f3af 8000 	nop.w
 80024b2:	4601      	mov	r1, r0
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	1c5a      	adds	r2, r3, #1
 80024b8:	60ba      	str	r2, [r7, #8]
 80024ba:	b2ca      	uxtb	r2, r1
 80024bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	3301      	adds	r3, #1
 80024c2:	617b      	str	r3, [r7, #20]
 80024c4:	697a      	ldr	r2, [r7, #20]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	dbf0      	blt.n	80024ae <_read+0x12>
  }

  return len;
 80024cc:	687b      	ldr	r3, [r7, #4]
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3718      	adds	r7, #24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b086      	sub	sp, #24
 80024da:	af00      	add	r7, sp, #0
 80024dc:	60f8      	str	r0, [r7, #12]
 80024de:	60b9      	str	r1, [r7, #8]
 80024e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024e2:	2300      	movs	r3, #0
 80024e4:	617b      	str	r3, [r7, #20]
 80024e6:	e009      	b.n	80024fc <_write+0x26>
  {
    //__io_putchar(*ptr++);
	ITM_SendChar(*ptr++);
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	1c5a      	adds	r2, r3, #1
 80024ec:	60ba      	str	r2, [r7, #8]
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7ff ff91 	bl	8002418 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	3301      	adds	r3, #1
 80024fa:	617b      	str	r3, [r7, #20]
 80024fc:	697a      	ldr	r2, [r7, #20]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	429a      	cmp	r2, r3
 8002502:	dbf1      	blt.n	80024e8 <_write+0x12>
  }
  return len;
 8002504:	687b      	ldr	r3, [r7, #4]
}
 8002506:	4618      	mov	r0, r3
 8002508:	3718      	adds	r7, #24
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <_close>:

int _close(int file)
{
 800250e:	b480      	push	{r7}
 8002510:	b083      	sub	sp, #12
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002516:	f04f 33ff 	mov.w	r3, #4294967295
}
 800251a:	4618      	mov	r0, r3
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr

08002526 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002526:	b480      	push	{r7}
 8002528:	b083      	sub	sp, #12
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
 800252e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002536:	605a      	str	r2, [r3, #4]
  return 0;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr

08002546 <_isatty>:

int _isatty(int file)
{
 8002546:	b480      	push	{r7}
 8002548:	b083      	sub	sp, #12
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800254e:	2301      	movs	r3, #1
}
 8002550:	4618      	mov	r0, r3
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800255c:	b480      	push	{r7}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3714      	adds	r7, #20
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
	...

08002578 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002580:	4a14      	ldr	r2, [pc, #80]	; (80025d4 <_sbrk+0x5c>)
 8002582:	4b15      	ldr	r3, [pc, #84]	; (80025d8 <_sbrk+0x60>)
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800258c:	4b13      	ldr	r3, [pc, #76]	; (80025dc <_sbrk+0x64>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d102      	bne.n	800259a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002594:	4b11      	ldr	r3, [pc, #68]	; (80025dc <_sbrk+0x64>)
 8002596:	4a12      	ldr	r2, [pc, #72]	; (80025e0 <_sbrk+0x68>)
 8002598:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800259a:	4b10      	ldr	r3, [pc, #64]	; (80025dc <_sbrk+0x64>)
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4413      	add	r3, r2
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d207      	bcs.n	80025b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025a8:	f002 fdba 	bl	8005120 <__errno>
 80025ac:	4603      	mov	r3, r0
 80025ae:	220c      	movs	r2, #12
 80025b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025b2:	f04f 33ff 	mov.w	r3, #4294967295
 80025b6:	e009      	b.n	80025cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025b8:	4b08      	ldr	r3, [pc, #32]	; (80025dc <_sbrk+0x64>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025be:	4b07      	ldr	r3, [pc, #28]	; (80025dc <_sbrk+0x64>)
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4413      	add	r3, r2
 80025c6:	4a05      	ldr	r2, [pc, #20]	; (80025dc <_sbrk+0x64>)
 80025c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025ca:	68fb      	ldr	r3, [r7, #12]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3718      	adds	r7, #24
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	20020000 	.word	0x20020000
 80025d8:	00000400 	.word	0x00000400
 80025dc:	2000022c 	.word	0x2000022c
 80025e0:	20000268 	.word	0x20000268

080025e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025e8:	4b06      	ldr	r3, [pc, #24]	; (8002604 <SystemInit+0x20>)
 80025ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ee:	4a05      	ldr	r2, [pc, #20]	; (8002604 <SystemInit+0x20>)
 80025f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025f8:	bf00      	nop
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	e000ed00 	.word	0xe000ed00

08002608 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002608:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002640 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800260c:	480d      	ldr	r0, [pc, #52]	; (8002644 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800260e:	490e      	ldr	r1, [pc, #56]	; (8002648 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002610:	4a0e      	ldr	r2, [pc, #56]	; (800264c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002612:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002614:	e002      	b.n	800261c <LoopCopyDataInit>

08002616 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002616:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002618:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800261a:	3304      	adds	r3, #4

0800261c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800261c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800261e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002620:	d3f9      	bcc.n	8002616 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002622:	4a0b      	ldr	r2, [pc, #44]	; (8002650 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002624:	4c0b      	ldr	r4, [pc, #44]	; (8002654 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002626:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002628:	e001      	b.n	800262e <LoopFillZerobss>

0800262a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800262a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800262c:	3204      	adds	r2, #4

0800262e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800262e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002630:	d3fb      	bcc.n	800262a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002632:	f7ff ffd7 	bl	80025e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002636:	f002 fd8d 	bl	8005154 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800263a:	f7fd fff7 	bl	800062c <main>
  bx  lr    
 800263e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002640:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002644:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002648:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 800264c:	08006aa0 	.word	0x08006aa0
  ldr r2, =_sbss
 8002650:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8002654:	20000268 	.word	0x20000268

08002658 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002658:	e7fe      	b.n	8002658 <ADC_IRQHandler>
	...

0800265c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002660:	4b0e      	ldr	r3, [pc, #56]	; (800269c <HAL_Init+0x40>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a0d      	ldr	r2, [pc, #52]	; (800269c <HAL_Init+0x40>)
 8002666:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800266a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800266c:	4b0b      	ldr	r3, [pc, #44]	; (800269c <HAL_Init+0x40>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a0a      	ldr	r2, [pc, #40]	; (800269c <HAL_Init+0x40>)
 8002672:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002676:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002678:	4b08      	ldr	r3, [pc, #32]	; (800269c <HAL_Init+0x40>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a07      	ldr	r2, [pc, #28]	; (800269c <HAL_Init+0x40>)
 800267e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002682:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002684:	2003      	movs	r0, #3
 8002686:	f000 f90d 	bl	80028a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800268a:	2000      	movs	r0, #0
 800268c:	f000 f808 	bl	80026a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002690:	f7ff fe28 	bl	80022e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	40023c00 	.word	0x40023c00

080026a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026a8:	4b12      	ldr	r3, [pc, #72]	; (80026f4 <HAL_InitTick+0x54>)
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	4b12      	ldr	r3, [pc, #72]	; (80026f8 <HAL_InitTick+0x58>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	4619      	mov	r1, r3
 80026b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80026ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80026be:	4618      	mov	r0, r3
 80026c0:	f000 f917 	bl	80028f2 <HAL_SYSTICK_Config>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e00e      	b.n	80026ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2b0f      	cmp	r3, #15
 80026d2:	d80a      	bhi.n	80026ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026d4:	2200      	movs	r2, #0
 80026d6:	6879      	ldr	r1, [r7, #4]
 80026d8:	f04f 30ff 	mov.w	r0, #4294967295
 80026dc:	f000 f8ed 	bl	80028ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026e0:	4a06      	ldr	r2, [pc, #24]	; (80026fc <HAL_InitTick+0x5c>)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
 80026e8:	e000      	b.n	80026ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3708      	adds	r7, #8
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	20000014 	.word	0x20000014
 80026f8:	2000001c 	.word	0x2000001c
 80026fc:	20000018 	.word	0x20000018

08002700 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002704:	4b06      	ldr	r3, [pc, #24]	; (8002720 <HAL_IncTick+0x20>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	461a      	mov	r2, r3
 800270a:	4b06      	ldr	r3, [pc, #24]	; (8002724 <HAL_IncTick+0x24>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4413      	add	r3, r2
 8002710:	4a04      	ldr	r2, [pc, #16]	; (8002724 <HAL_IncTick+0x24>)
 8002712:	6013      	str	r3, [r2, #0]
}
 8002714:	bf00      	nop
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	2000001c 	.word	0x2000001c
 8002724:	20000230 	.word	0x20000230

08002728 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  return uwTick;
 800272c:	4b03      	ldr	r3, [pc, #12]	; (800273c <HAL_GetTick+0x14>)
 800272e:	681b      	ldr	r3, [r3, #0]
}
 8002730:	4618      	mov	r0, r3
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	20000230 	.word	0x20000230

08002740 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f003 0307 	and.w	r3, r3, #7
 800274e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002750:	4b0c      	ldr	r3, [pc, #48]	; (8002784 <__NVIC_SetPriorityGrouping+0x44>)
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002756:	68ba      	ldr	r2, [r7, #8]
 8002758:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800275c:	4013      	ands	r3, r2
 800275e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002768:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800276c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002770:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002772:	4a04      	ldr	r2, [pc, #16]	; (8002784 <__NVIC_SetPriorityGrouping+0x44>)
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	60d3      	str	r3, [r2, #12]
}
 8002778:	bf00      	nop
 800277a:	3714      	adds	r7, #20
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr
 8002784:	e000ed00 	.word	0xe000ed00

08002788 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800278c:	4b04      	ldr	r3, [pc, #16]	; (80027a0 <__NVIC_GetPriorityGrouping+0x18>)
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	0a1b      	lsrs	r3, r3, #8
 8002792:	f003 0307 	and.w	r3, r3, #7
}
 8002796:	4618      	mov	r0, r3
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr
 80027a0:	e000ed00 	.word	0xe000ed00

080027a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	4603      	mov	r3, r0
 80027ac:	6039      	str	r1, [r7, #0]
 80027ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	db0a      	blt.n	80027ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	b2da      	uxtb	r2, r3
 80027bc:	490c      	ldr	r1, [pc, #48]	; (80027f0 <__NVIC_SetPriority+0x4c>)
 80027be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c2:	0112      	lsls	r2, r2, #4
 80027c4:	b2d2      	uxtb	r2, r2
 80027c6:	440b      	add	r3, r1
 80027c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027cc:	e00a      	b.n	80027e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	b2da      	uxtb	r2, r3
 80027d2:	4908      	ldr	r1, [pc, #32]	; (80027f4 <__NVIC_SetPriority+0x50>)
 80027d4:	79fb      	ldrb	r3, [r7, #7]
 80027d6:	f003 030f 	and.w	r3, r3, #15
 80027da:	3b04      	subs	r3, #4
 80027dc:	0112      	lsls	r2, r2, #4
 80027de:	b2d2      	uxtb	r2, r2
 80027e0:	440b      	add	r3, r1
 80027e2:	761a      	strb	r2, [r3, #24]
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr
 80027f0:	e000e100 	.word	0xe000e100
 80027f4:	e000ed00 	.word	0xe000ed00

080027f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b089      	sub	sp, #36	; 0x24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f003 0307 	and.w	r3, r3, #7
 800280a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	f1c3 0307 	rsb	r3, r3, #7
 8002812:	2b04      	cmp	r3, #4
 8002814:	bf28      	it	cs
 8002816:	2304      	movcs	r3, #4
 8002818:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	3304      	adds	r3, #4
 800281e:	2b06      	cmp	r3, #6
 8002820:	d902      	bls.n	8002828 <NVIC_EncodePriority+0x30>
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	3b03      	subs	r3, #3
 8002826:	e000      	b.n	800282a <NVIC_EncodePriority+0x32>
 8002828:	2300      	movs	r3, #0
 800282a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800282c:	f04f 32ff 	mov.w	r2, #4294967295
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	fa02 f303 	lsl.w	r3, r2, r3
 8002836:	43da      	mvns	r2, r3
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	401a      	ands	r2, r3
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002840:	f04f 31ff 	mov.w	r1, #4294967295
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	fa01 f303 	lsl.w	r3, r1, r3
 800284a:	43d9      	mvns	r1, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002850:	4313      	orrs	r3, r2
         );
}
 8002852:	4618      	mov	r0, r3
 8002854:	3724      	adds	r7, #36	; 0x24
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
	...

08002860 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	3b01      	subs	r3, #1
 800286c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002870:	d301      	bcc.n	8002876 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002872:	2301      	movs	r3, #1
 8002874:	e00f      	b.n	8002896 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002876:	4a0a      	ldr	r2, [pc, #40]	; (80028a0 <SysTick_Config+0x40>)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	3b01      	subs	r3, #1
 800287c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800287e:	210f      	movs	r1, #15
 8002880:	f04f 30ff 	mov.w	r0, #4294967295
 8002884:	f7ff ff8e 	bl	80027a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002888:	4b05      	ldr	r3, [pc, #20]	; (80028a0 <SysTick_Config+0x40>)
 800288a:	2200      	movs	r2, #0
 800288c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800288e:	4b04      	ldr	r3, [pc, #16]	; (80028a0 <SysTick_Config+0x40>)
 8002890:	2207      	movs	r2, #7
 8002892:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3708      	adds	r7, #8
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	e000e010 	.word	0xe000e010

080028a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f7ff ff47 	bl	8002740 <__NVIC_SetPriorityGrouping>
}
 80028b2:	bf00      	nop
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b086      	sub	sp, #24
 80028be:	af00      	add	r7, sp, #0
 80028c0:	4603      	mov	r3, r0
 80028c2:	60b9      	str	r1, [r7, #8]
 80028c4:	607a      	str	r2, [r7, #4]
 80028c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028c8:	2300      	movs	r3, #0
 80028ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028cc:	f7ff ff5c 	bl	8002788 <__NVIC_GetPriorityGrouping>
 80028d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	68b9      	ldr	r1, [r7, #8]
 80028d6:	6978      	ldr	r0, [r7, #20]
 80028d8:	f7ff ff8e 	bl	80027f8 <NVIC_EncodePriority>
 80028dc:	4602      	mov	r2, r0
 80028de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028e2:	4611      	mov	r1, r2
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7ff ff5d 	bl	80027a4 <__NVIC_SetPriority>
}
 80028ea:	bf00      	nop
 80028ec:	3718      	adds	r7, #24
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b082      	sub	sp, #8
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f7ff ffb0 	bl	8002860 <SysTick_Config>
 8002900:	4603      	mov	r3, r0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3708      	adds	r7, #8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
	...

0800290c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800290c:	b480      	push	{r7}
 800290e:	b089      	sub	sp, #36	; 0x24
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002916:	2300      	movs	r3, #0
 8002918:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800291a:	2300      	movs	r3, #0
 800291c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800291e:	2300      	movs	r3, #0
 8002920:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002922:	2300      	movs	r3, #0
 8002924:	61fb      	str	r3, [r7, #28]
 8002926:	e16b      	b.n	8002c00 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002928:	2201      	movs	r2, #1
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	4013      	ands	r3, r2
 800293a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	429a      	cmp	r2, r3
 8002942:	f040 815a 	bne.w	8002bfa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f003 0303 	and.w	r3, r3, #3
 800294e:	2b01      	cmp	r3, #1
 8002950:	d005      	beq.n	800295e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800295a:	2b02      	cmp	r3, #2
 800295c:	d130      	bne.n	80029c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	2203      	movs	r2, #3
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	43db      	mvns	r3, r3
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	4013      	ands	r3, r2
 8002974:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	68da      	ldr	r2, [r3, #12]
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	fa02 f303 	lsl.w	r3, r2, r3
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	4313      	orrs	r3, r2
 8002986:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002994:	2201      	movs	r2, #1
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	43db      	mvns	r3, r3
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	4013      	ands	r3, r2
 80029a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	091b      	lsrs	r3, r3, #4
 80029aa:	f003 0201 	and.w	r2, r3, #1
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f003 0303 	and.w	r3, r3, #3
 80029c8:	2b03      	cmp	r3, #3
 80029ca:	d017      	beq.n	80029fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	2203      	movs	r2, #3
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	43db      	mvns	r3, r3
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	4013      	ands	r3, r2
 80029e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f003 0303 	and.w	r3, r3, #3
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d123      	bne.n	8002a50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	08da      	lsrs	r2, r3, #3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	3208      	adds	r2, #8
 8002a10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	f003 0307 	and.w	r3, r3, #7
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	220f      	movs	r2, #15
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	43db      	mvns	r3, r3
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	691a      	ldr	r2, [r3, #16]
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	f003 0307 	and.w	r3, r3, #7
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	08da      	lsrs	r2, r3, #3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	3208      	adds	r2, #8
 8002a4a:	69b9      	ldr	r1, [r7, #24]
 8002a4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	2203      	movs	r2, #3
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	43db      	mvns	r3, r3
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	4013      	ands	r3, r2
 8002a66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f003 0203 	and.w	r2, r3, #3
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	f000 80b4 	beq.w	8002bfa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a92:	2300      	movs	r3, #0
 8002a94:	60fb      	str	r3, [r7, #12]
 8002a96:	4b60      	ldr	r3, [pc, #384]	; (8002c18 <HAL_GPIO_Init+0x30c>)
 8002a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9a:	4a5f      	ldr	r2, [pc, #380]	; (8002c18 <HAL_GPIO_Init+0x30c>)
 8002a9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002aa0:	6453      	str	r3, [r2, #68]	; 0x44
 8002aa2:	4b5d      	ldr	r3, [pc, #372]	; (8002c18 <HAL_GPIO_Init+0x30c>)
 8002aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aaa:	60fb      	str	r3, [r7, #12]
 8002aac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002aae:	4a5b      	ldr	r2, [pc, #364]	; (8002c1c <HAL_GPIO_Init+0x310>)
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	089b      	lsrs	r3, r3, #2
 8002ab4:	3302      	adds	r3, #2
 8002ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	f003 0303 	and.w	r3, r3, #3
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	220f      	movs	r2, #15
 8002ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aca:	43db      	mvns	r3, r3
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a52      	ldr	r2, [pc, #328]	; (8002c20 <HAL_GPIO_Init+0x314>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d02b      	beq.n	8002b32 <HAL_GPIO_Init+0x226>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a51      	ldr	r2, [pc, #324]	; (8002c24 <HAL_GPIO_Init+0x318>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d025      	beq.n	8002b2e <HAL_GPIO_Init+0x222>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a50      	ldr	r2, [pc, #320]	; (8002c28 <HAL_GPIO_Init+0x31c>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d01f      	beq.n	8002b2a <HAL_GPIO_Init+0x21e>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a4f      	ldr	r2, [pc, #316]	; (8002c2c <HAL_GPIO_Init+0x320>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d019      	beq.n	8002b26 <HAL_GPIO_Init+0x21a>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a4e      	ldr	r2, [pc, #312]	; (8002c30 <HAL_GPIO_Init+0x324>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d013      	beq.n	8002b22 <HAL_GPIO_Init+0x216>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a4d      	ldr	r2, [pc, #308]	; (8002c34 <HAL_GPIO_Init+0x328>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d00d      	beq.n	8002b1e <HAL_GPIO_Init+0x212>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a4c      	ldr	r2, [pc, #304]	; (8002c38 <HAL_GPIO_Init+0x32c>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d007      	beq.n	8002b1a <HAL_GPIO_Init+0x20e>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a4b      	ldr	r2, [pc, #300]	; (8002c3c <HAL_GPIO_Init+0x330>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d101      	bne.n	8002b16 <HAL_GPIO_Init+0x20a>
 8002b12:	2307      	movs	r3, #7
 8002b14:	e00e      	b.n	8002b34 <HAL_GPIO_Init+0x228>
 8002b16:	2308      	movs	r3, #8
 8002b18:	e00c      	b.n	8002b34 <HAL_GPIO_Init+0x228>
 8002b1a:	2306      	movs	r3, #6
 8002b1c:	e00a      	b.n	8002b34 <HAL_GPIO_Init+0x228>
 8002b1e:	2305      	movs	r3, #5
 8002b20:	e008      	b.n	8002b34 <HAL_GPIO_Init+0x228>
 8002b22:	2304      	movs	r3, #4
 8002b24:	e006      	b.n	8002b34 <HAL_GPIO_Init+0x228>
 8002b26:	2303      	movs	r3, #3
 8002b28:	e004      	b.n	8002b34 <HAL_GPIO_Init+0x228>
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	e002      	b.n	8002b34 <HAL_GPIO_Init+0x228>
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e000      	b.n	8002b34 <HAL_GPIO_Init+0x228>
 8002b32:	2300      	movs	r3, #0
 8002b34:	69fa      	ldr	r2, [r7, #28]
 8002b36:	f002 0203 	and.w	r2, r2, #3
 8002b3a:	0092      	lsls	r2, r2, #2
 8002b3c:	4093      	lsls	r3, r2
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b44:	4935      	ldr	r1, [pc, #212]	; (8002c1c <HAL_GPIO_Init+0x310>)
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	089b      	lsrs	r3, r3, #2
 8002b4a:	3302      	adds	r3, #2
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b52:	4b3b      	ldr	r3, [pc, #236]	; (8002c40 <HAL_GPIO_Init+0x334>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	43db      	mvns	r3, r3
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d003      	beq.n	8002b76 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b76:	4a32      	ldr	r2, [pc, #200]	; (8002c40 <HAL_GPIO_Init+0x334>)
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b7c:	4b30      	ldr	r3, [pc, #192]	; (8002c40 <HAL_GPIO_Init+0x334>)
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	43db      	mvns	r3, r3
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d003      	beq.n	8002ba0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ba0:	4a27      	ldr	r2, [pc, #156]	; (8002c40 <HAL_GPIO_Init+0x334>)
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ba6:	4b26      	ldr	r3, [pc, #152]	; (8002c40 <HAL_GPIO_Init+0x334>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	43db      	mvns	r3, r3
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d003      	beq.n	8002bca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bca:	4a1d      	ldr	r2, [pc, #116]	; (8002c40 <HAL_GPIO_Init+0x334>)
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bd0:	4b1b      	ldr	r3, [pc, #108]	; (8002c40 <HAL_GPIO_Init+0x334>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d003      	beq.n	8002bf4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bf4:	4a12      	ldr	r2, [pc, #72]	; (8002c40 <HAL_GPIO_Init+0x334>)
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	61fb      	str	r3, [r7, #28]
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	2b0f      	cmp	r3, #15
 8002c04:	f67f ae90 	bls.w	8002928 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c08:	bf00      	nop
 8002c0a:	bf00      	nop
 8002c0c:	3724      	adds	r7, #36	; 0x24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	40023800 	.word	0x40023800
 8002c1c:	40013800 	.word	0x40013800
 8002c20:	40020000 	.word	0x40020000
 8002c24:	40020400 	.word	0x40020400
 8002c28:	40020800 	.word	0x40020800
 8002c2c:	40020c00 	.word	0x40020c00
 8002c30:	40021000 	.word	0x40021000
 8002c34:	40021400 	.word	0x40021400
 8002c38:	40021800 	.word	0x40021800
 8002c3c:	40021c00 	.word	0x40021c00
 8002c40:	40013c00 	.word	0x40013c00

08002c44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	691a      	ldr	r2, [r3, #16]
 8002c54:	887b      	ldrh	r3, [r7, #2]
 8002c56:	4013      	ands	r3, r2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d002      	beq.n	8002c62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	73fb      	strb	r3, [r7, #15]
 8002c60:	e001      	b.n	8002c66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c62:	2300      	movs	r3, #0
 8002c64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3714      	adds	r7, #20
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	807b      	strh	r3, [r7, #2]
 8002c80:	4613      	mov	r3, r2
 8002c82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c84:	787b      	ldrb	r3, [r7, #1]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d003      	beq.n	8002c92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c8a:	887a      	ldrh	r2, [r7, #2]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c90:	e003      	b.n	8002c9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c92:	887b      	ldrh	r3, [r7, #2]
 8002c94:	041a      	lsls	r2, r3, #16
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	619a      	str	r2, [r3, #24]
}
 8002c9a:	bf00      	nop
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
	...

08002ca8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e267      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d075      	beq.n	8002db2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cc6:	4b88      	ldr	r3, [pc, #544]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f003 030c 	and.w	r3, r3, #12
 8002cce:	2b04      	cmp	r3, #4
 8002cd0:	d00c      	beq.n	8002cec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cd2:	4b85      	ldr	r3, [pc, #532]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cda:	2b08      	cmp	r3, #8
 8002cdc:	d112      	bne.n	8002d04 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cde:	4b82      	ldr	r3, [pc, #520]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ce6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cea:	d10b      	bne.n	8002d04 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cec:	4b7e      	ldr	r3, [pc, #504]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d05b      	beq.n	8002db0 <HAL_RCC_OscConfig+0x108>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d157      	bne.n	8002db0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e242      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d0c:	d106      	bne.n	8002d1c <HAL_RCC_OscConfig+0x74>
 8002d0e:	4b76      	ldr	r3, [pc, #472]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a75      	ldr	r2, [pc, #468]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002d14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d18:	6013      	str	r3, [r2, #0]
 8002d1a:	e01d      	b.n	8002d58 <HAL_RCC_OscConfig+0xb0>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d24:	d10c      	bne.n	8002d40 <HAL_RCC_OscConfig+0x98>
 8002d26:	4b70      	ldr	r3, [pc, #448]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a6f      	ldr	r2, [pc, #444]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002d2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d30:	6013      	str	r3, [r2, #0]
 8002d32:	4b6d      	ldr	r3, [pc, #436]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a6c      	ldr	r2, [pc, #432]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002d38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d3c:	6013      	str	r3, [r2, #0]
 8002d3e:	e00b      	b.n	8002d58 <HAL_RCC_OscConfig+0xb0>
 8002d40:	4b69      	ldr	r3, [pc, #420]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a68      	ldr	r2, [pc, #416]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002d46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d4a:	6013      	str	r3, [r2, #0]
 8002d4c:	4b66      	ldr	r3, [pc, #408]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a65      	ldr	r2, [pc, #404]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002d52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d013      	beq.n	8002d88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d60:	f7ff fce2 	bl	8002728 <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d68:	f7ff fcde 	bl	8002728 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b64      	cmp	r3, #100	; 0x64
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e207      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d7a:	4b5b      	ldr	r3, [pc, #364]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d0f0      	beq.n	8002d68 <HAL_RCC_OscConfig+0xc0>
 8002d86:	e014      	b.n	8002db2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d88:	f7ff fcce 	bl	8002728 <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d90:	f7ff fcca 	bl	8002728 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b64      	cmp	r3, #100	; 0x64
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e1f3      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002da2:	4b51      	ldr	r3, [pc, #324]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1f0      	bne.n	8002d90 <HAL_RCC_OscConfig+0xe8>
 8002dae:	e000      	b.n	8002db2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002db0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d063      	beq.n	8002e86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dbe:	4b4a      	ldr	r3, [pc, #296]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f003 030c 	and.w	r3, r3, #12
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00b      	beq.n	8002de2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dca:	4b47      	ldr	r3, [pc, #284]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dd2:	2b08      	cmp	r3, #8
 8002dd4:	d11c      	bne.n	8002e10 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dd6:	4b44      	ldr	r3, [pc, #272]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d116      	bne.n	8002e10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002de2:	4b41      	ldr	r3, [pc, #260]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d005      	beq.n	8002dfa <HAL_RCC_OscConfig+0x152>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d001      	beq.n	8002dfa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e1c7      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dfa:	4b3b      	ldr	r3, [pc, #236]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	4937      	ldr	r1, [pc, #220]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e0e:	e03a      	b.n	8002e86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d020      	beq.n	8002e5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e18:	4b34      	ldr	r3, [pc, #208]	; (8002eec <HAL_RCC_OscConfig+0x244>)
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e1e:	f7ff fc83 	bl	8002728 <HAL_GetTick>
 8002e22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e24:	e008      	b.n	8002e38 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e26:	f7ff fc7f 	bl	8002728 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d901      	bls.n	8002e38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e1a8      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e38:	4b2b      	ldr	r3, [pc, #172]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0302 	and.w	r3, r3, #2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d0f0      	beq.n	8002e26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e44:	4b28      	ldr	r3, [pc, #160]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	00db      	lsls	r3, r3, #3
 8002e52:	4925      	ldr	r1, [pc, #148]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	600b      	str	r3, [r1, #0]
 8002e58:	e015      	b.n	8002e86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e5a:	4b24      	ldr	r3, [pc, #144]	; (8002eec <HAL_RCC_OscConfig+0x244>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e60:	f7ff fc62 	bl	8002728 <HAL_GetTick>
 8002e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e66:	e008      	b.n	8002e7a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e68:	f7ff fc5e 	bl	8002728 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e187      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e7a:	4b1b      	ldr	r3, [pc, #108]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1f0      	bne.n	8002e68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0308 	and.w	r3, r3, #8
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d036      	beq.n	8002f00 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d016      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e9a:	4b15      	ldr	r3, [pc, #84]	; (8002ef0 <HAL_RCC_OscConfig+0x248>)
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea0:	f7ff fc42 	bl	8002728 <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ea6:	e008      	b.n	8002eba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ea8:	f7ff fc3e 	bl	8002728 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e167      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eba:	4b0b      	ldr	r3, [pc, #44]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002ebc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d0f0      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x200>
 8002ec6:	e01b      	b.n	8002f00 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ec8:	4b09      	ldr	r3, [pc, #36]	; (8002ef0 <HAL_RCC_OscConfig+0x248>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ece:	f7ff fc2b 	bl	8002728 <HAL_GetTick>
 8002ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ed4:	e00e      	b.n	8002ef4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ed6:	f7ff fc27 	bl	8002728 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d907      	bls.n	8002ef4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e150      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
 8002ee8:	40023800 	.word	0x40023800
 8002eec:	42470000 	.word	0x42470000
 8002ef0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ef4:	4b88      	ldr	r3, [pc, #544]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8002ef6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d1ea      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0304 	and.w	r3, r3, #4
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f000 8097 	beq.w	800303c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f12:	4b81      	ldr	r3, [pc, #516]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8002f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d10f      	bne.n	8002f3e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f1e:	2300      	movs	r3, #0
 8002f20:	60bb      	str	r3, [r7, #8]
 8002f22:	4b7d      	ldr	r3, [pc, #500]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8002f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f26:	4a7c      	ldr	r2, [pc, #496]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8002f28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f2e:	4b7a      	ldr	r3, [pc, #488]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8002f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f36:	60bb      	str	r3, [r7, #8]
 8002f38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f3e:	4b77      	ldr	r3, [pc, #476]	; (800311c <HAL_RCC_OscConfig+0x474>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d118      	bne.n	8002f7c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f4a:	4b74      	ldr	r3, [pc, #464]	; (800311c <HAL_RCC_OscConfig+0x474>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a73      	ldr	r2, [pc, #460]	; (800311c <HAL_RCC_OscConfig+0x474>)
 8002f50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f56:	f7ff fbe7 	bl	8002728 <HAL_GetTick>
 8002f5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f5c:	e008      	b.n	8002f70 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f5e:	f7ff fbe3 	bl	8002728 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d901      	bls.n	8002f70 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e10c      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f70:	4b6a      	ldr	r3, [pc, #424]	; (800311c <HAL_RCC_OscConfig+0x474>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d0f0      	beq.n	8002f5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d106      	bne.n	8002f92 <HAL_RCC_OscConfig+0x2ea>
 8002f84:	4b64      	ldr	r3, [pc, #400]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8002f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f88:	4a63      	ldr	r2, [pc, #396]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8002f8a:	f043 0301 	orr.w	r3, r3, #1
 8002f8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f90:	e01c      	b.n	8002fcc <HAL_RCC_OscConfig+0x324>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	2b05      	cmp	r3, #5
 8002f98:	d10c      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x30c>
 8002f9a:	4b5f      	ldr	r3, [pc, #380]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8002f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9e:	4a5e      	ldr	r2, [pc, #376]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8002fa0:	f043 0304 	orr.w	r3, r3, #4
 8002fa4:	6713      	str	r3, [r2, #112]	; 0x70
 8002fa6:	4b5c      	ldr	r3, [pc, #368]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8002fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002faa:	4a5b      	ldr	r2, [pc, #364]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8002fac:	f043 0301 	orr.w	r3, r3, #1
 8002fb0:	6713      	str	r3, [r2, #112]	; 0x70
 8002fb2:	e00b      	b.n	8002fcc <HAL_RCC_OscConfig+0x324>
 8002fb4:	4b58      	ldr	r3, [pc, #352]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8002fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb8:	4a57      	ldr	r2, [pc, #348]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8002fba:	f023 0301 	bic.w	r3, r3, #1
 8002fbe:	6713      	str	r3, [r2, #112]	; 0x70
 8002fc0:	4b55      	ldr	r3, [pc, #340]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8002fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc4:	4a54      	ldr	r2, [pc, #336]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8002fc6:	f023 0304 	bic.w	r3, r3, #4
 8002fca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d015      	beq.n	8003000 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd4:	f7ff fba8 	bl	8002728 <HAL_GetTick>
 8002fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fda:	e00a      	b.n	8002ff2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fdc:	f7ff fba4 	bl	8002728 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e0cb      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ff2:	4b49      	ldr	r3, [pc, #292]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8002ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d0ee      	beq.n	8002fdc <HAL_RCC_OscConfig+0x334>
 8002ffe:	e014      	b.n	800302a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003000:	f7ff fb92 	bl	8002728 <HAL_GetTick>
 8003004:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003006:	e00a      	b.n	800301e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003008:	f7ff fb8e 	bl	8002728 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	f241 3288 	movw	r2, #5000	; 0x1388
 8003016:	4293      	cmp	r3, r2
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e0b5      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800301e:	4b3e      	ldr	r3, [pc, #248]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8003020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1ee      	bne.n	8003008 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800302a:	7dfb      	ldrb	r3, [r7, #23]
 800302c:	2b01      	cmp	r3, #1
 800302e:	d105      	bne.n	800303c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003030:	4b39      	ldr	r3, [pc, #228]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8003032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003034:	4a38      	ldr	r2, [pc, #224]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8003036:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800303a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	2b00      	cmp	r3, #0
 8003042:	f000 80a1 	beq.w	8003188 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003046:	4b34      	ldr	r3, [pc, #208]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f003 030c 	and.w	r3, r3, #12
 800304e:	2b08      	cmp	r3, #8
 8003050:	d05c      	beq.n	800310c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	2b02      	cmp	r3, #2
 8003058:	d141      	bne.n	80030de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800305a:	4b31      	ldr	r3, [pc, #196]	; (8003120 <HAL_RCC_OscConfig+0x478>)
 800305c:	2200      	movs	r2, #0
 800305e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003060:	f7ff fb62 	bl	8002728 <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003066:	e008      	b.n	800307a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003068:	f7ff fb5e 	bl	8002728 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b02      	cmp	r3, #2
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e087      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800307a:	4b27      	ldr	r3, [pc, #156]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1f0      	bne.n	8003068 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	69da      	ldr	r2, [r3, #28]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	431a      	orrs	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003094:	019b      	lsls	r3, r3, #6
 8003096:	431a      	orrs	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309c:	085b      	lsrs	r3, r3, #1
 800309e:	3b01      	subs	r3, #1
 80030a0:	041b      	lsls	r3, r3, #16
 80030a2:	431a      	orrs	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a8:	061b      	lsls	r3, r3, #24
 80030aa:	491b      	ldr	r1, [pc, #108]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030b0:	4b1b      	ldr	r3, [pc, #108]	; (8003120 <HAL_RCC_OscConfig+0x478>)
 80030b2:	2201      	movs	r2, #1
 80030b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b6:	f7ff fb37 	bl	8002728 <HAL_GetTick>
 80030ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030bc:	e008      	b.n	80030d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030be:	f7ff fb33 	bl	8002728 <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d901      	bls.n	80030d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e05c      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030d0:	4b11      	ldr	r3, [pc, #68]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d0f0      	beq.n	80030be <HAL_RCC_OscConfig+0x416>
 80030dc:	e054      	b.n	8003188 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030de:	4b10      	ldr	r3, [pc, #64]	; (8003120 <HAL_RCC_OscConfig+0x478>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e4:	f7ff fb20 	bl	8002728 <HAL_GetTick>
 80030e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ea:	e008      	b.n	80030fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030ec:	f7ff fb1c 	bl	8002728 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e045      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030fe:	4b06      	ldr	r3, [pc, #24]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1f0      	bne.n	80030ec <HAL_RCC_OscConfig+0x444>
 800310a:	e03d      	b.n	8003188 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d107      	bne.n	8003124 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e038      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
 8003118:	40023800 	.word	0x40023800
 800311c:	40007000 	.word	0x40007000
 8003120:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003124:	4b1b      	ldr	r3, [pc, #108]	; (8003194 <HAL_RCC_OscConfig+0x4ec>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d028      	beq.n	8003184 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800313c:	429a      	cmp	r2, r3
 800313e:	d121      	bne.n	8003184 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800314a:	429a      	cmp	r2, r3
 800314c:	d11a      	bne.n	8003184 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003154:	4013      	ands	r3, r2
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800315a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800315c:	4293      	cmp	r3, r2
 800315e:	d111      	bne.n	8003184 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316a:	085b      	lsrs	r3, r3, #1
 800316c:	3b01      	subs	r3, #1
 800316e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003170:	429a      	cmp	r2, r3
 8003172:	d107      	bne.n	8003184 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800317e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003180:	429a      	cmp	r2, r3
 8003182:	d001      	beq.n	8003188 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e000      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3718      	adds	r7, #24
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	40023800 	.word	0x40023800

08003198 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d101      	bne.n	80031ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e0cc      	b.n	8003346 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031ac:	4b68      	ldr	r3, [pc, #416]	; (8003350 <HAL_RCC_ClockConfig+0x1b8>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0307 	and.w	r3, r3, #7
 80031b4:	683a      	ldr	r2, [r7, #0]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d90c      	bls.n	80031d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ba:	4b65      	ldr	r3, [pc, #404]	; (8003350 <HAL_RCC_ClockConfig+0x1b8>)
 80031bc:	683a      	ldr	r2, [r7, #0]
 80031be:	b2d2      	uxtb	r2, r2
 80031c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031c2:	4b63      	ldr	r3, [pc, #396]	; (8003350 <HAL_RCC_ClockConfig+0x1b8>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0307 	and.w	r3, r3, #7
 80031ca:	683a      	ldr	r2, [r7, #0]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d001      	beq.n	80031d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e0b8      	b.n	8003346 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0302 	and.w	r3, r3, #2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d020      	beq.n	8003222 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0304 	and.w	r3, r3, #4
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d005      	beq.n	80031f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031ec:	4b59      	ldr	r3, [pc, #356]	; (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	4a58      	ldr	r2, [pc, #352]	; (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 80031f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0308 	and.w	r3, r3, #8
 8003200:	2b00      	cmp	r3, #0
 8003202:	d005      	beq.n	8003210 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003204:	4b53      	ldr	r3, [pc, #332]	; (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	4a52      	ldr	r2, [pc, #328]	; (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 800320a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800320e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003210:	4b50      	ldr	r3, [pc, #320]	; (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	494d      	ldr	r1, [pc, #308]	; (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 800321e:	4313      	orrs	r3, r2
 8003220:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b00      	cmp	r3, #0
 800322c:	d044      	beq.n	80032b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d107      	bne.n	8003246 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003236:	4b47      	ldr	r3, [pc, #284]	; (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d119      	bne.n	8003276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e07f      	b.n	8003346 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	2b02      	cmp	r3, #2
 800324c:	d003      	beq.n	8003256 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003252:	2b03      	cmp	r3, #3
 8003254:	d107      	bne.n	8003266 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003256:	4b3f      	ldr	r3, [pc, #252]	; (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d109      	bne.n	8003276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e06f      	b.n	8003346 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003266:	4b3b      	ldr	r3, [pc, #236]	; (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e067      	b.n	8003346 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003276:	4b37      	ldr	r3, [pc, #220]	; (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f023 0203 	bic.w	r2, r3, #3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	4934      	ldr	r1, [pc, #208]	; (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 8003284:	4313      	orrs	r3, r2
 8003286:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003288:	f7ff fa4e 	bl	8002728 <HAL_GetTick>
 800328c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800328e:	e00a      	b.n	80032a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003290:	f7ff fa4a 	bl	8002728 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	f241 3288 	movw	r2, #5000	; 0x1388
 800329e:	4293      	cmp	r3, r2
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e04f      	b.n	8003346 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032a6:	4b2b      	ldr	r3, [pc, #172]	; (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f003 020c 	and.w	r2, r3, #12
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d1eb      	bne.n	8003290 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032b8:	4b25      	ldr	r3, [pc, #148]	; (8003350 <HAL_RCC_ClockConfig+0x1b8>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0307 	and.w	r3, r3, #7
 80032c0:	683a      	ldr	r2, [r7, #0]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d20c      	bcs.n	80032e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032c6:	4b22      	ldr	r3, [pc, #136]	; (8003350 <HAL_RCC_ClockConfig+0x1b8>)
 80032c8:	683a      	ldr	r2, [r7, #0]
 80032ca:	b2d2      	uxtb	r2, r2
 80032cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ce:	4b20      	ldr	r3, [pc, #128]	; (8003350 <HAL_RCC_ClockConfig+0x1b8>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0307 	and.w	r3, r3, #7
 80032d6:	683a      	ldr	r2, [r7, #0]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d001      	beq.n	80032e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e032      	b.n	8003346 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0304 	and.w	r3, r3, #4
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d008      	beq.n	80032fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032ec:	4b19      	ldr	r3, [pc, #100]	; (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	4916      	ldr	r1, [pc, #88]	; (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0308 	and.w	r3, r3, #8
 8003306:	2b00      	cmp	r3, #0
 8003308:	d009      	beq.n	800331e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800330a:	4b12      	ldr	r3, [pc, #72]	; (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	490e      	ldr	r1, [pc, #56]	; (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 800331a:	4313      	orrs	r3, r2
 800331c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800331e:	f000 f821 	bl	8003364 <HAL_RCC_GetSysClockFreq>
 8003322:	4602      	mov	r2, r0
 8003324:	4b0b      	ldr	r3, [pc, #44]	; (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	091b      	lsrs	r3, r3, #4
 800332a:	f003 030f 	and.w	r3, r3, #15
 800332e:	490a      	ldr	r1, [pc, #40]	; (8003358 <HAL_RCC_ClockConfig+0x1c0>)
 8003330:	5ccb      	ldrb	r3, [r1, r3]
 8003332:	fa22 f303 	lsr.w	r3, r2, r3
 8003336:	4a09      	ldr	r2, [pc, #36]	; (800335c <HAL_RCC_ClockConfig+0x1c4>)
 8003338:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800333a:	4b09      	ldr	r3, [pc, #36]	; (8003360 <HAL_RCC_ClockConfig+0x1c8>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4618      	mov	r0, r3
 8003340:	f7ff f9ae 	bl	80026a0 <HAL_InitTick>

  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	40023c00 	.word	0x40023c00
 8003354:	40023800 	.word	0x40023800
 8003358:	080068e4 	.word	0x080068e4
 800335c:	20000014 	.word	0x20000014
 8003360:	20000018 	.word	0x20000018

08003364 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003364:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003368:	b094      	sub	sp, #80	; 0x50
 800336a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800336c:	2300      	movs	r3, #0
 800336e:	647b      	str	r3, [r7, #68]	; 0x44
 8003370:	2300      	movs	r3, #0
 8003372:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003374:	2300      	movs	r3, #0
 8003376:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003378:	2300      	movs	r3, #0
 800337a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800337c:	4b79      	ldr	r3, [pc, #484]	; (8003564 <HAL_RCC_GetSysClockFreq+0x200>)
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f003 030c 	and.w	r3, r3, #12
 8003384:	2b08      	cmp	r3, #8
 8003386:	d00d      	beq.n	80033a4 <HAL_RCC_GetSysClockFreq+0x40>
 8003388:	2b08      	cmp	r3, #8
 800338a:	f200 80e1 	bhi.w	8003550 <HAL_RCC_GetSysClockFreq+0x1ec>
 800338e:	2b00      	cmp	r3, #0
 8003390:	d002      	beq.n	8003398 <HAL_RCC_GetSysClockFreq+0x34>
 8003392:	2b04      	cmp	r3, #4
 8003394:	d003      	beq.n	800339e <HAL_RCC_GetSysClockFreq+0x3a>
 8003396:	e0db      	b.n	8003550 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003398:	4b73      	ldr	r3, [pc, #460]	; (8003568 <HAL_RCC_GetSysClockFreq+0x204>)
 800339a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800339c:	e0db      	b.n	8003556 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800339e:	4b73      	ldr	r3, [pc, #460]	; (800356c <HAL_RCC_GetSysClockFreq+0x208>)
 80033a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033a2:	e0d8      	b.n	8003556 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033a4:	4b6f      	ldr	r3, [pc, #444]	; (8003564 <HAL_RCC_GetSysClockFreq+0x200>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033ac:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033ae:	4b6d      	ldr	r3, [pc, #436]	; (8003564 <HAL_RCC_GetSysClockFreq+0x200>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d063      	beq.n	8003482 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033ba:	4b6a      	ldr	r3, [pc, #424]	; (8003564 <HAL_RCC_GetSysClockFreq+0x200>)
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	099b      	lsrs	r3, r3, #6
 80033c0:	2200      	movs	r2, #0
 80033c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80033c4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80033c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033cc:	633b      	str	r3, [r7, #48]	; 0x30
 80033ce:	2300      	movs	r3, #0
 80033d0:	637b      	str	r3, [r7, #52]	; 0x34
 80033d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80033d6:	4622      	mov	r2, r4
 80033d8:	462b      	mov	r3, r5
 80033da:	f04f 0000 	mov.w	r0, #0
 80033de:	f04f 0100 	mov.w	r1, #0
 80033e2:	0159      	lsls	r1, r3, #5
 80033e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033e8:	0150      	lsls	r0, r2, #5
 80033ea:	4602      	mov	r2, r0
 80033ec:	460b      	mov	r3, r1
 80033ee:	4621      	mov	r1, r4
 80033f0:	1a51      	subs	r1, r2, r1
 80033f2:	6139      	str	r1, [r7, #16]
 80033f4:	4629      	mov	r1, r5
 80033f6:	eb63 0301 	sbc.w	r3, r3, r1
 80033fa:	617b      	str	r3, [r7, #20]
 80033fc:	f04f 0200 	mov.w	r2, #0
 8003400:	f04f 0300 	mov.w	r3, #0
 8003404:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003408:	4659      	mov	r1, fp
 800340a:	018b      	lsls	r3, r1, #6
 800340c:	4651      	mov	r1, sl
 800340e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003412:	4651      	mov	r1, sl
 8003414:	018a      	lsls	r2, r1, #6
 8003416:	4651      	mov	r1, sl
 8003418:	ebb2 0801 	subs.w	r8, r2, r1
 800341c:	4659      	mov	r1, fp
 800341e:	eb63 0901 	sbc.w	r9, r3, r1
 8003422:	f04f 0200 	mov.w	r2, #0
 8003426:	f04f 0300 	mov.w	r3, #0
 800342a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800342e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003432:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003436:	4690      	mov	r8, r2
 8003438:	4699      	mov	r9, r3
 800343a:	4623      	mov	r3, r4
 800343c:	eb18 0303 	adds.w	r3, r8, r3
 8003440:	60bb      	str	r3, [r7, #8]
 8003442:	462b      	mov	r3, r5
 8003444:	eb49 0303 	adc.w	r3, r9, r3
 8003448:	60fb      	str	r3, [r7, #12]
 800344a:	f04f 0200 	mov.w	r2, #0
 800344e:	f04f 0300 	mov.w	r3, #0
 8003452:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003456:	4629      	mov	r1, r5
 8003458:	024b      	lsls	r3, r1, #9
 800345a:	4621      	mov	r1, r4
 800345c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003460:	4621      	mov	r1, r4
 8003462:	024a      	lsls	r2, r1, #9
 8003464:	4610      	mov	r0, r2
 8003466:	4619      	mov	r1, r3
 8003468:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800346a:	2200      	movs	r2, #0
 800346c:	62bb      	str	r3, [r7, #40]	; 0x28
 800346e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003470:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003474:	f7fc fefc 	bl	8000270 <__aeabi_uldivmod>
 8003478:	4602      	mov	r2, r0
 800347a:	460b      	mov	r3, r1
 800347c:	4613      	mov	r3, r2
 800347e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003480:	e058      	b.n	8003534 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003482:	4b38      	ldr	r3, [pc, #224]	; (8003564 <HAL_RCC_GetSysClockFreq+0x200>)
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	099b      	lsrs	r3, r3, #6
 8003488:	2200      	movs	r2, #0
 800348a:	4618      	mov	r0, r3
 800348c:	4611      	mov	r1, r2
 800348e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003492:	623b      	str	r3, [r7, #32]
 8003494:	2300      	movs	r3, #0
 8003496:	627b      	str	r3, [r7, #36]	; 0x24
 8003498:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800349c:	4642      	mov	r2, r8
 800349e:	464b      	mov	r3, r9
 80034a0:	f04f 0000 	mov.w	r0, #0
 80034a4:	f04f 0100 	mov.w	r1, #0
 80034a8:	0159      	lsls	r1, r3, #5
 80034aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034ae:	0150      	lsls	r0, r2, #5
 80034b0:	4602      	mov	r2, r0
 80034b2:	460b      	mov	r3, r1
 80034b4:	4641      	mov	r1, r8
 80034b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80034ba:	4649      	mov	r1, r9
 80034bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80034c0:	f04f 0200 	mov.w	r2, #0
 80034c4:	f04f 0300 	mov.w	r3, #0
 80034c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80034cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80034d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80034d4:	ebb2 040a 	subs.w	r4, r2, sl
 80034d8:	eb63 050b 	sbc.w	r5, r3, fp
 80034dc:	f04f 0200 	mov.w	r2, #0
 80034e0:	f04f 0300 	mov.w	r3, #0
 80034e4:	00eb      	lsls	r3, r5, #3
 80034e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034ea:	00e2      	lsls	r2, r4, #3
 80034ec:	4614      	mov	r4, r2
 80034ee:	461d      	mov	r5, r3
 80034f0:	4643      	mov	r3, r8
 80034f2:	18e3      	adds	r3, r4, r3
 80034f4:	603b      	str	r3, [r7, #0]
 80034f6:	464b      	mov	r3, r9
 80034f8:	eb45 0303 	adc.w	r3, r5, r3
 80034fc:	607b      	str	r3, [r7, #4]
 80034fe:	f04f 0200 	mov.w	r2, #0
 8003502:	f04f 0300 	mov.w	r3, #0
 8003506:	e9d7 4500 	ldrd	r4, r5, [r7]
 800350a:	4629      	mov	r1, r5
 800350c:	028b      	lsls	r3, r1, #10
 800350e:	4621      	mov	r1, r4
 8003510:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003514:	4621      	mov	r1, r4
 8003516:	028a      	lsls	r2, r1, #10
 8003518:	4610      	mov	r0, r2
 800351a:	4619      	mov	r1, r3
 800351c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800351e:	2200      	movs	r2, #0
 8003520:	61bb      	str	r3, [r7, #24]
 8003522:	61fa      	str	r2, [r7, #28]
 8003524:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003528:	f7fc fea2 	bl	8000270 <__aeabi_uldivmod>
 800352c:	4602      	mov	r2, r0
 800352e:	460b      	mov	r3, r1
 8003530:	4613      	mov	r3, r2
 8003532:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003534:	4b0b      	ldr	r3, [pc, #44]	; (8003564 <HAL_RCC_GetSysClockFreq+0x200>)
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	0c1b      	lsrs	r3, r3, #16
 800353a:	f003 0303 	and.w	r3, r3, #3
 800353e:	3301      	adds	r3, #1
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003544:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003546:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003548:	fbb2 f3f3 	udiv	r3, r2, r3
 800354c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800354e:	e002      	b.n	8003556 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003550:	4b05      	ldr	r3, [pc, #20]	; (8003568 <HAL_RCC_GetSysClockFreq+0x204>)
 8003552:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003554:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003556:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003558:	4618      	mov	r0, r3
 800355a:	3750      	adds	r7, #80	; 0x50
 800355c:	46bd      	mov	sp, r7
 800355e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003562:	bf00      	nop
 8003564:	40023800 	.word	0x40023800
 8003568:	00f42400 	.word	0x00f42400
 800356c:	007a1200 	.word	0x007a1200

08003570 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e07b      	b.n	800367a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003586:	2b00      	cmp	r3, #0
 8003588:	d108      	bne.n	800359c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003592:	d009      	beq.n	80035a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	61da      	str	r2, [r3, #28]
 800359a:	e005      	b.n	80035a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d106      	bne.n	80035c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f7fe feb6 	bl	8002334 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2202      	movs	r2, #2
 80035cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80035f0:	431a      	orrs	r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035fa:	431a      	orrs	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	f003 0302 	and.w	r3, r3, #2
 8003604:	431a      	orrs	r2, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	431a      	orrs	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	699b      	ldr	r3, [r3, #24]
 8003614:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003618:	431a      	orrs	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	69db      	ldr	r3, [r3, #28]
 800361e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003622:	431a      	orrs	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a1b      	ldr	r3, [r3, #32]
 8003628:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800362c:	ea42 0103 	orr.w	r1, r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003634:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	430a      	orrs	r2, r1
 800363e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	699b      	ldr	r3, [r3, #24]
 8003644:	0c1b      	lsrs	r3, r3, #16
 8003646:	f003 0104 	and.w	r1, r3, #4
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364e:	f003 0210 	and.w	r2, r3, #16
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	430a      	orrs	r2, r1
 8003658:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	69da      	ldr	r2, [r3, #28]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003668:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3708      	adds	r7, #8
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b088      	sub	sp, #32
 8003686:	af00      	add	r7, sp, #0
 8003688:	60f8      	str	r0, [r7, #12]
 800368a:	60b9      	str	r1, [r7, #8]
 800368c:	603b      	str	r3, [r7, #0]
 800368e:	4613      	mov	r3, r2
 8003690:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003692:	2300      	movs	r3, #0
 8003694:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800369c:	2b01      	cmp	r3, #1
 800369e:	d101      	bne.n	80036a4 <HAL_SPI_Transmit+0x22>
 80036a0:	2302      	movs	r3, #2
 80036a2:	e126      	b.n	80038f2 <HAL_SPI_Transmit+0x270>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036ac:	f7ff f83c 	bl	8002728 <HAL_GetTick>
 80036b0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80036b2:	88fb      	ldrh	r3, [r7, #6]
 80036b4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d002      	beq.n	80036c8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80036c2:	2302      	movs	r3, #2
 80036c4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80036c6:	e10b      	b.n	80038e0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d002      	beq.n	80036d4 <HAL_SPI_Transmit+0x52>
 80036ce:	88fb      	ldrh	r3, [r7, #6]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d102      	bne.n	80036da <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80036d8:	e102      	b.n	80038e0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2203      	movs	r2, #3
 80036de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	68ba      	ldr	r2, [r7, #8]
 80036ec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	88fa      	ldrh	r2, [r7, #6]
 80036f2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	88fa      	ldrh	r2, [r7, #6]
 80036f8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2200      	movs	r2, #0
 8003704:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2200      	movs	r2, #0
 800370a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003720:	d10f      	bne.n	8003742 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003730:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003740:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800374c:	2b40      	cmp	r3, #64	; 0x40
 800374e:	d007      	beq.n	8003760 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800375e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003768:	d14b      	bne.n	8003802 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d002      	beq.n	8003778 <HAL_SPI_Transmit+0xf6>
 8003772:	8afb      	ldrh	r3, [r7, #22]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d13e      	bne.n	80037f6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377c:	881a      	ldrh	r2, [r3, #0]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003788:	1c9a      	adds	r2, r3, #2
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003792:	b29b      	uxth	r3, r3
 8003794:	3b01      	subs	r3, #1
 8003796:	b29a      	uxth	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800379c:	e02b      	b.n	80037f6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	f003 0302 	and.w	r3, r3, #2
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d112      	bne.n	80037d2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b0:	881a      	ldrh	r2, [r3, #0]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037bc:	1c9a      	adds	r2, r3, #2
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	3b01      	subs	r3, #1
 80037ca:	b29a      	uxth	r2, r3
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	86da      	strh	r2, [r3, #54]	; 0x36
 80037d0:	e011      	b.n	80037f6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037d2:	f7fe ffa9 	bl	8002728 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	683a      	ldr	r2, [r7, #0]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d803      	bhi.n	80037ea <HAL_SPI_Transmit+0x168>
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e8:	d102      	bne.n	80037f0 <HAL_SPI_Transmit+0x16e>
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d102      	bne.n	80037f6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80037f4:	e074      	b.n	80038e0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d1ce      	bne.n	800379e <HAL_SPI_Transmit+0x11c>
 8003800:	e04c      	b.n	800389c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d002      	beq.n	8003810 <HAL_SPI_Transmit+0x18e>
 800380a:	8afb      	ldrh	r3, [r7, #22]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d140      	bne.n	8003892 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	330c      	adds	r3, #12
 800381a:	7812      	ldrb	r2, [r2, #0]
 800381c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003822:	1c5a      	adds	r2, r3, #1
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800382c:	b29b      	uxth	r3, r3
 800382e:	3b01      	subs	r3, #1
 8003830:	b29a      	uxth	r2, r3
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003836:	e02c      	b.n	8003892 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	2b02      	cmp	r3, #2
 8003844:	d113      	bne.n	800386e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	330c      	adds	r3, #12
 8003850:	7812      	ldrb	r2, [r2, #0]
 8003852:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003858:	1c5a      	adds	r2, r3, #1
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003862:	b29b      	uxth	r3, r3
 8003864:	3b01      	subs	r3, #1
 8003866:	b29a      	uxth	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	86da      	strh	r2, [r3, #54]	; 0x36
 800386c:	e011      	b.n	8003892 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800386e:	f7fe ff5b 	bl	8002728 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	683a      	ldr	r2, [r7, #0]
 800387a:	429a      	cmp	r2, r3
 800387c:	d803      	bhi.n	8003886 <HAL_SPI_Transmit+0x204>
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003884:	d102      	bne.n	800388c <HAL_SPI_Transmit+0x20a>
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d102      	bne.n	8003892 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003890:	e026      	b.n	80038e0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003896:	b29b      	uxth	r3, r3
 8003898:	2b00      	cmp	r3, #0
 800389a:	d1cd      	bne.n	8003838 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800389c:	69ba      	ldr	r2, [r7, #24]
 800389e:	6839      	ldr	r1, [r7, #0]
 80038a0:	68f8      	ldr	r0, [r7, #12]
 80038a2:	f000 fbcb 	bl	800403c <SPI_EndRxTxTransaction>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d002      	beq.n	80038b2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2220      	movs	r2, #32
 80038b0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d10a      	bne.n	80038d0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80038ba:	2300      	movs	r3, #0
 80038bc:	613b      	str	r3, [r7, #16]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	613b      	str	r3, [r7, #16]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	613b      	str	r3, [r7, #16]
 80038ce:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d002      	beq.n	80038de <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	77fb      	strb	r3, [r7, #31]
 80038dc:	e000      	b.n	80038e0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80038de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80038f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3720      	adds	r7, #32
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b088      	sub	sp, #32
 80038fe:	af02      	add	r7, sp, #8
 8003900:	60f8      	str	r0, [r7, #12]
 8003902:	60b9      	str	r1, [r7, #8]
 8003904:	603b      	str	r3, [r7, #0]
 8003906:	4613      	mov	r3, r2
 8003908:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800390a:	2300      	movs	r3, #0
 800390c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003916:	d112      	bne.n	800393e <HAL_SPI_Receive+0x44>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d10e      	bne.n	800393e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2204      	movs	r2, #4
 8003924:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003928:	88fa      	ldrh	r2, [r7, #6]
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	9300      	str	r3, [sp, #0]
 800392e:	4613      	mov	r3, r2
 8003930:	68ba      	ldr	r2, [r7, #8]
 8003932:	68b9      	ldr	r1, [r7, #8]
 8003934:	68f8      	ldr	r0, [r7, #12]
 8003936:	f000 f8f1 	bl	8003b1c <HAL_SPI_TransmitReceive>
 800393a:	4603      	mov	r3, r0
 800393c:	e0ea      	b.n	8003b14 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003944:	2b01      	cmp	r3, #1
 8003946:	d101      	bne.n	800394c <HAL_SPI_Receive+0x52>
 8003948:	2302      	movs	r3, #2
 800394a:	e0e3      	b.n	8003b14 <HAL_SPI_Receive+0x21a>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003954:	f7fe fee8 	bl	8002728 <HAL_GetTick>
 8003958:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003960:	b2db      	uxtb	r3, r3
 8003962:	2b01      	cmp	r3, #1
 8003964:	d002      	beq.n	800396c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003966:	2302      	movs	r3, #2
 8003968:	75fb      	strb	r3, [r7, #23]
    goto error;
 800396a:	e0ca      	b.n	8003b02 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d002      	beq.n	8003978 <HAL_SPI_Receive+0x7e>
 8003972:	88fb      	ldrh	r3, [r7, #6]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d102      	bne.n	800397e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800397c:	e0c1      	b.n	8003b02 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2204      	movs	r2, #4
 8003982:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2200      	movs	r2, #0
 800398a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	68ba      	ldr	r2, [r7, #8]
 8003990:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	88fa      	ldrh	r2, [r7, #6]
 8003996:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	88fa      	ldrh	r2, [r7, #6]
 800399c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2200      	movs	r2, #0
 80039a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039c4:	d10f      	bne.n	80039e6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80039e4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f0:	2b40      	cmp	r3, #64	; 0x40
 80039f2:	d007      	beq.n	8003a04 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a02:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d162      	bne.n	8003ad2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003a0c:	e02e      	b.n	8003a6c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f003 0301 	and.w	r3, r3, #1
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d115      	bne.n	8003a48 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f103 020c 	add.w	r2, r3, #12
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a28:	7812      	ldrb	r2, [r2, #0]
 8003a2a:	b2d2      	uxtb	r2, r2
 8003a2c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a32:	1c5a      	adds	r2, r3, #1
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a46:	e011      	b.n	8003a6c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a48:	f7fe fe6e 	bl	8002728 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	683a      	ldr	r2, [r7, #0]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d803      	bhi.n	8003a60 <HAL_SPI_Receive+0x166>
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a5e:	d102      	bne.n	8003a66 <HAL_SPI_Receive+0x16c>
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d102      	bne.n	8003a6c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003a6a:	e04a      	b.n	8003b02 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1cb      	bne.n	8003a0e <HAL_SPI_Receive+0x114>
 8003a76:	e031      	b.n	8003adc <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d113      	bne.n	8003aae <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68da      	ldr	r2, [r3, #12]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a90:	b292      	uxth	r2, r2
 8003a92:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a98:	1c9a      	adds	r2, r3, #2
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003aac:	e011      	b.n	8003ad2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003aae:	f7fe fe3b 	bl	8002728 <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	683a      	ldr	r2, [r7, #0]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d803      	bhi.n	8003ac6 <HAL_SPI_Receive+0x1cc>
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac4:	d102      	bne.n	8003acc <HAL_SPI_Receive+0x1d2>
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d102      	bne.n	8003ad2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003ad0:	e017      	b.n	8003b02 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d1cd      	bne.n	8003a78 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	6839      	ldr	r1, [r7, #0]
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	f000 fa45 	bl	8003f70 <SPI_EndRxTransaction>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d002      	beq.n	8003af2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2220      	movs	r2, #32
 8003af0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d002      	beq.n	8003b00 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	75fb      	strb	r3, [r7, #23]
 8003afe:	e000      	b.n	8003b02 <HAL_SPI_Receive+0x208>
  }

error :
 8003b00:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2201      	movs	r2, #1
 8003b06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003b12:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3718      	adds	r7, #24
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b08c      	sub	sp, #48	; 0x30
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
 8003b28:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d101      	bne.n	8003b42 <HAL_SPI_TransmitReceive+0x26>
 8003b3e:	2302      	movs	r3, #2
 8003b40:	e18a      	b.n	8003e58 <HAL_SPI_TransmitReceive+0x33c>
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2201      	movs	r2, #1
 8003b46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b4a:	f7fe fded 	bl	8002728 <HAL_GetTick>
 8003b4e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003b60:	887b      	ldrh	r3, [r7, #2]
 8003b62:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003b64:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d00f      	beq.n	8003b8c <HAL_SPI_TransmitReceive+0x70>
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b72:	d107      	bne.n	8003b84 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d103      	bne.n	8003b84 <HAL_SPI_TransmitReceive+0x68>
 8003b7c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b80:	2b04      	cmp	r3, #4
 8003b82:	d003      	beq.n	8003b8c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003b84:	2302      	movs	r3, #2
 8003b86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003b8a:	e15b      	b.n	8003e44 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d005      	beq.n	8003b9e <HAL_SPI_TransmitReceive+0x82>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d002      	beq.n	8003b9e <HAL_SPI_TransmitReceive+0x82>
 8003b98:	887b      	ldrh	r3, [r7, #2]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d103      	bne.n	8003ba6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003ba4:	e14e      	b.n	8003e44 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b04      	cmp	r3, #4
 8003bb0:	d003      	beq.n	8003bba <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2205      	movs	r2, #5
 8003bb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	887a      	ldrh	r2, [r7, #2]
 8003bca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	887a      	ldrh	r2, [r7, #2]
 8003bd0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	68ba      	ldr	r2, [r7, #8]
 8003bd6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	887a      	ldrh	r2, [r7, #2]
 8003bdc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	887a      	ldrh	r2, [r7, #2]
 8003be2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2200      	movs	r2, #0
 8003be8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2200      	movs	r2, #0
 8003bee:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bfa:	2b40      	cmp	r3, #64	; 0x40
 8003bfc:	d007      	beq.n	8003c0e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c0c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c16:	d178      	bne.n	8003d0a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d002      	beq.n	8003c26 <HAL_SPI_TransmitReceive+0x10a>
 8003c20:	8b7b      	ldrh	r3, [r7, #26]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d166      	bne.n	8003cf4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2a:	881a      	ldrh	r2, [r3, #0]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c36:	1c9a      	adds	r2, r3, #2
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	3b01      	subs	r3, #1
 8003c44:	b29a      	uxth	r2, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c4a:	e053      	b.n	8003cf4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d11b      	bne.n	8003c92 <HAL_SPI_TransmitReceive+0x176>
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d016      	beq.n	8003c92 <HAL_SPI_TransmitReceive+0x176>
 8003c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d113      	bne.n	8003c92 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6e:	881a      	ldrh	r2, [r3, #0]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7a:	1c9a      	adds	r2, r3, #2
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	3b01      	subs	r3, #1
 8003c88:	b29a      	uxth	r2, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f003 0301 	and.w	r3, r3, #1
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d119      	bne.n	8003cd4 <HAL_SPI_TransmitReceive+0x1b8>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d014      	beq.n	8003cd4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68da      	ldr	r2, [r3, #12]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb4:	b292      	uxth	r2, r2
 8003cb6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cbc:	1c9a      	adds	r2, r3, #2
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	3b01      	subs	r3, #1
 8003cca:	b29a      	uxth	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003cd4:	f7fe fd28 	bl	8002728 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d807      	bhi.n	8003cf4 <HAL_SPI_TransmitReceive+0x1d8>
 8003ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cea:	d003      	beq.n	8003cf4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003cf2:	e0a7      	b.n	8003e44 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1a6      	bne.n	8003c4c <HAL_SPI_TransmitReceive+0x130>
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d1a1      	bne.n	8003c4c <HAL_SPI_TransmitReceive+0x130>
 8003d08:	e07c      	b.n	8003e04 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d002      	beq.n	8003d18 <HAL_SPI_TransmitReceive+0x1fc>
 8003d12:	8b7b      	ldrh	r3, [r7, #26]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d16b      	bne.n	8003df0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	330c      	adds	r3, #12
 8003d22:	7812      	ldrb	r2, [r2, #0]
 8003d24:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2a:	1c5a      	adds	r2, r3, #1
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	3b01      	subs	r3, #1
 8003d38:	b29a      	uxth	r2, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d3e:	e057      	b.n	8003df0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d11c      	bne.n	8003d88 <HAL_SPI_TransmitReceive+0x26c>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d017      	beq.n	8003d88 <HAL_SPI_TransmitReceive+0x26c>
 8003d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d114      	bne.n	8003d88 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	330c      	adds	r3, #12
 8003d68:	7812      	ldrb	r2, [r2, #0]
 8003d6a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d70:	1c5a      	adds	r2, r3, #1
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	b29a      	uxth	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d84:	2300      	movs	r3, #0
 8003d86:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d119      	bne.n	8003dca <HAL_SPI_TransmitReceive+0x2ae>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d014      	beq.n	8003dca <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68da      	ldr	r2, [r3, #12]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003daa:	b2d2      	uxtb	r2, r2
 8003dac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db2:	1c5a      	adds	r2, r3, #1
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	b29a      	uxth	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003dca:	f7fe fcad 	bl	8002728 <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d803      	bhi.n	8003de2 <HAL_SPI_TransmitReceive+0x2c6>
 8003dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de0:	d102      	bne.n	8003de8 <HAL_SPI_TransmitReceive+0x2cc>
 8003de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d103      	bne.n	8003df0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003dee:	e029      	b.n	8003e44 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1a2      	bne.n	8003d40 <HAL_SPI_TransmitReceive+0x224>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d19d      	bne.n	8003d40 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e06:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e08:	68f8      	ldr	r0, [r7, #12]
 8003e0a:	f000 f917 	bl	800403c <SPI_EndRxTxTransaction>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d006      	beq.n	8003e22 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2220      	movs	r2, #32
 8003e1e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003e20:	e010      	b.n	8003e44 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d10b      	bne.n	8003e42 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	617b      	str	r3, [r7, #20]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	617b      	str	r3, [r7, #20]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	617b      	str	r3, [r7, #20]
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	e000      	b.n	8003e44 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003e42:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003e54:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3730      	adds	r7, #48	; 0x30
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b088      	sub	sp, #32
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	603b      	str	r3, [r7, #0]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003e70:	f7fe fc5a 	bl	8002728 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e78:	1a9b      	subs	r3, r3, r2
 8003e7a:	683a      	ldr	r2, [r7, #0]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003e80:	f7fe fc52 	bl	8002728 <HAL_GetTick>
 8003e84:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003e86:	4b39      	ldr	r3, [pc, #228]	; (8003f6c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	015b      	lsls	r3, r3, #5
 8003e8c:	0d1b      	lsrs	r3, r3, #20
 8003e8e:	69fa      	ldr	r2, [r7, #28]
 8003e90:	fb02 f303 	mul.w	r3, r2, r3
 8003e94:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e96:	e054      	b.n	8003f42 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e9e:	d050      	beq.n	8003f42 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ea0:	f7fe fc42 	bl	8002728 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	69fa      	ldr	r2, [r7, #28]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d902      	bls.n	8003eb6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d13d      	bne.n	8003f32 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	685a      	ldr	r2, [r3, #4]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ec4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ece:	d111      	bne.n	8003ef4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ed8:	d004      	beq.n	8003ee4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ee2:	d107      	bne.n	8003ef4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ef2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003efc:	d10f      	bne.n	8003f1e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f0c:	601a      	str	r2, [r3, #0]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2201      	movs	r2, #1
 8003f22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e017      	b.n	8003f62 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d101      	bne.n	8003f3c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	689a      	ldr	r2, [r3, #8]
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	68ba      	ldr	r2, [r7, #8]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	bf0c      	ite	eq
 8003f52:	2301      	moveq	r3, #1
 8003f54:	2300      	movne	r3, #0
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	461a      	mov	r2, r3
 8003f5a:	79fb      	ldrb	r3, [r7, #7]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d19b      	bne.n	8003e98 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3720      	adds	r7, #32
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	20000014 	.word	0x20000014

08003f70 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b086      	sub	sp, #24
 8003f74:	af02      	add	r7, sp, #8
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f84:	d111      	bne.n	8003faa <SPI_EndRxTransaction+0x3a>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f8e:	d004      	beq.n	8003f9a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f98:	d107      	bne.n	8003faa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fa8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fb2:	d12a      	bne.n	800400a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fbc:	d012      	beq.n	8003fe4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	9300      	str	r3, [sp, #0]
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	2180      	movs	r1, #128	; 0x80
 8003fc8:	68f8      	ldr	r0, [r7, #12]
 8003fca:	f7ff ff49 	bl	8003e60 <SPI_WaitFlagStateUntilTimeout>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d02d      	beq.n	8004030 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fd8:	f043 0220 	orr.w	r2, r3, #32
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e026      	b.n	8004032 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	9300      	str	r3, [sp, #0]
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	2200      	movs	r2, #0
 8003fec:	2101      	movs	r1, #1
 8003fee:	68f8      	ldr	r0, [r7, #12]
 8003ff0:	f7ff ff36 	bl	8003e60 <SPI_WaitFlagStateUntilTimeout>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d01a      	beq.n	8004030 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ffe:	f043 0220 	orr.w	r2, r3, #32
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e013      	b.n	8004032 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	9300      	str	r3, [sp, #0]
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	2200      	movs	r2, #0
 8004012:	2101      	movs	r1, #1
 8004014:	68f8      	ldr	r0, [r7, #12]
 8004016:	f7ff ff23 	bl	8003e60 <SPI_WaitFlagStateUntilTimeout>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d007      	beq.n	8004030 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004024:	f043 0220 	orr.w	r2, r3, #32
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e000      	b.n	8004032 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3710      	adds	r7, #16
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
	...

0800403c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b088      	sub	sp, #32
 8004040:	af02      	add	r7, sp, #8
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004048:	4b1b      	ldr	r3, [pc, #108]	; (80040b8 <SPI_EndRxTxTransaction+0x7c>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a1b      	ldr	r2, [pc, #108]	; (80040bc <SPI_EndRxTxTransaction+0x80>)
 800404e:	fba2 2303 	umull	r2, r3, r2, r3
 8004052:	0d5b      	lsrs	r3, r3, #21
 8004054:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004058:	fb02 f303 	mul.w	r3, r2, r3
 800405c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004066:	d112      	bne.n	800408e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	9300      	str	r3, [sp, #0]
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	2200      	movs	r2, #0
 8004070:	2180      	movs	r1, #128	; 0x80
 8004072:	68f8      	ldr	r0, [r7, #12]
 8004074:	f7ff fef4 	bl	8003e60 <SPI_WaitFlagStateUntilTimeout>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d016      	beq.n	80040ac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004082:	f043 0220 	orr.w	r2, r3, #32
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e00f      	b.n	80040ae <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00a      	beq.n	80040aa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	3b01      	subs	r3, #1
 8004098:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040a4:	2b80      	cmp	r3, #128	; 0x80
 80040a6:	d0f2      	beq.n	800408e <SPI_EndRxTxTransaction+0x52>
 80040a8:	e000      	b.n	80040ac <SPI_EndRxTxTransaction+0x70>
        break;
 80040aa:	bf00      	nop
  }

  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3718      	adds	r7, #24
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	20000014 	.word	0x20000014
 80040bc:	165e9f81 	.word	0x165e9f81

080040c0 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 80040c0:	b590      	push	{r4, r7, lr}
 80040c2:	b085      	sub	sp, #20
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	4604      	mov	r4, r0
 80040c8:	4608      	mov	r0, r1
 80040ca:	4611      	mov	r1, r2
 80040cc:	461a      	mov	r2, r3
 80040ce:	4623      	mov	r3, r4
 80040d0:	71fb      	strb	r3, [r7, #7]
 80040d2:	4603      	mov	r3, r0
 80040d4:	71bb      	strb	r3, [r7, #6]
 80040d6:	460b      	mov	r3, r1
 80040d8:	80bb      	strh	r3, [r7, #4]
 80040da:	4613      	mov	r3, r2
 80040dc:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 80040de:	79fb      	ldrb	r3, [r7, #7]
 80040e0:	2b08      	cmp	r3, #8
 80040e2:	d902      	bls.n	80040ea <socket+0x2a>
 80040e4:	f04f 33ff 	mov.w	r3, #4294967295
 80040e8:	e0f2      	b.n	80042d0 <socket+0x210>
	switch(protocol)
 80040ea:	79bb      	ldrb	r3, [r7, #6]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d005      	beq.n	80040fc <socket+0x3c>
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	dd11      	ble.n	8004118 <socket+0x58>
 80040f4:	3b02      	subs	r3, #2
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d80e      	bhi.n	8004118 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 80040fa:	e011      	b.n	8004120 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 80040fc:	f107 030c 	add.w	r3, r7, #12
 8004100:	2204      	movs	r2, #4
 8004102:	4619      	mov	r1, r3
 8004104:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8004108:	f000 fc02 	bl	8004910 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d105      	bne.n	800411e <socket+0x5e>
 8004112:	f06f 0302 	mvn.w	r3, #2
 8004116:	e0db      	b.n	80042d0 <socket+0x210>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8004118:	f06f 0304 	mvn.w	r3, #4
 800411c:	e0d8      	b.n	80042d0 <socket+0x210>
	    break;
 800411e:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8004120:	78fb      	ldrb	r3, [r7, #3]
 8004122:	f003 0304 	and.w	r3, r3, #4
 8004126:	2b00      	cmp	r3, #0
 8004128:	d002      	beq.n	8004130 <socket+0x70>
 800412a:	f06f 0305 	mvn.w	r3, #5
 800412e:	e0cf      	b.n	80042d0 <socket+0x210>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8004130:	78fb      	ldrb	r3, [r7, #3]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d025      	beq.n	8004182 <socket+0xc2>
	{
   	switch(protocol)
 8004136:	79bb      	ldrb	r3, [r7, #6]
 8004138:	2b01      	cmp	r3, #1
 800413a:	d002      	beq.n	8004142 <socket+0x82>
 800413c:	2b02      	cmp	r3, #2
 800413e:	d008      	beq.n	8004152 <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8004140:	e024      	b.n	800418c <socket+0xcc>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8004142:	78fb      	ldrb	r3, [r7, #3]
 8004144:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004148:	2b00      	cmp	r3, #0
 800414a:	d11c      	bne.n	8004186 <socket+0xc6>
 800414c:	f06f 0305 	mvn.w	r3, #5
 8004150:	e0be      	b.n	80042d0 <socket+0x210>
   	      if(flag & SF_IGMP_VER2)
 8004152:	78fb      	ldrb	r3, [r7, #3]
 8004154:	f003 0320 	and.w	r3, r3, #32
 8004158:	2b00      	cmp	r3, #0
 800415a:	d006      	beq.n	800416a <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 800415c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004160:	2b00      	cmp	r3, #0
 8004162:	db02      	blt.n	800416a <socket+0xaa>
 8004164:	f06f 0305 	mvn.w	r3, #5
 8004168:	e0b2      	b.n	80042d0 <socket+0x210>
      	      if(flag & SF_UNI_BLOCK)
 800416a:	78fb      	ldrb	r3, [r7, #3]
 800416c:	f003 0310 	and.w	r3, r3, #16
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00a      	beq.n	800418a <socket+0xca>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8004174:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004178:	2b00      	cmp	r3, #0
 800417a:	db06      	blt.n	800418a <socket+0xca>
 800417c:	f06f 0305 	mvn.w	r3, #5
 8004180:	e0a6      	b.n	80042d0 <socket+0x210>
   	}
   }
 8004182:	bf00      	nop
 8004184:	e002      	b.n	800418c <socket+0xcc>
   	      break;
 8004186:	bf00      	nop
 8004188:	e000      	b.n	800418c <socket+0xcc>
   	      break;
 800418a:	bf00      	nop
	close(sn);
 800418c:	79fb      	ldrb	r3, [r7, #7]
 800418e:	4618      	mov	r0, r3
 8004190:	f000 f8ac 	bl	80042ec <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8004194:	79fb      	ldrb	r3, [r7, #7]
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	3301      	adds	r3, #1
 800419a:	00db      	lsls	r3, r3, #3
 800419c:	4618      	mov	r0, r3
 800419e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041a2:	f023 030f 	bic.w	r3, r3, #15
 80041a6:	b25a      	sxtb	r2, r3
 80041a8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	b25b      	sxtb	r3, r3
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	4619      	mov	r1, r3
 80041b4:	f000 fb5e 	bl	8004874 <WIZCHIP_WRITE>
    #endif
	if(!port)
 80041b8:	88bb      	ldrh	r3, [r7, #4]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d110      	bne.n	80041e0 <socket+0x120>
	{
	   port = sock_any_port++;
 80041be:	4b46      	ldr	r3, [pc, #280]	; (80042d8 <socket+0x218>)
 80041c0:	881b      	ldrh	r3, [r3, #0]
 80041c2:	1c5a      	adds	r2, r3, #1
 80041c4:	b291      	uxth	r1, r2
 80041c6:	4a44      	ldr	r2, [pc, #272]	; (80042d8 <socket+0x218>)
 80041c8:	8011      	strh	r1, [r2, #0]
 80041ca:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 80041cc:	4b42      	ldr	r3, [pc, #264]	; (80042d8 <socket+0x218>)
 80041ce:	881b      	ldrh	r3, [r3, #0]
 80041d0:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d103      	bne.n	80041e0 <socket+0x120>
 80041d8:	4b3f      	ldr	r3, [pc, #252]	; (80042d8 <socket+0x218>)
 80041da:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80041de:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 80041e0:	79fb      	ldrb	r3, [r7, #7]
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	3301      	adds	r3, #1
 80041e6:	00db      	lsls	r3, r3, #3
 80041e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80041ec:	461a      	mov	r2, r3
 80041ee:	88bb      	ldrh	r3, [r7, #4]
 80041f0:	0a1b      	lsrs	r3, r3, #8
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	4619      	mov	r1, r3
 80041f8:	4610      	mov	r0, r2
 80041fa:	f000 fb3b 	bl	8004874 <WIZCHIP_WRITE>
 80041fe:	79fb      	ldrb	r3, [r7, #7]
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	3301      	adds	r3, #1
 8004204:	00db      	lsls	r3, r3, #3
 8004206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800420a:	461a      	mov	r2, r3
 800420c:	88bb      	ldrh	r3, [r7, #4]
 800420e:	b2db      	uxtb	r3, r3
 8004210:	4619      	mov	r1, r3
 8004212:	4610      	mov	r0, r2
 8004214:	f000 fb2e 	bl	8004874 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8004218:	79fb      	ldrb	r3, [r7, #7]
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	3301      	adds	r3, #1
 800421e:	00db      	lsls	r3, r3, #3
 8004220:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004224:	2101      	movs	r1, #1
 8004226:	4618      	mov	r0, r3
 8004228:	f000 fb24 	bl	8004874 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800422c:	bf00      	nop
 800422e:	79fb      	ldrb	r3, [r7, #7]
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	3301      	adds	r3, #1
 8004234:	00db      	lsls	r3, r3, #3
 8004236:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800423a:	4618      	mov	r0, r3
 800423c:	f000 face 	bl	80047dc <WIZCHIP_READ>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1f3      	bne.n	800422e <socket+0x16e>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8004246:	79fb      	ldrb	r3, [r7, #7]
 8004248:	2201      	movs	r2, #1
 800424a:	fa02 f303 	lsl.w	r3, r2, r3
 800424e:	b21b      	sxth	r3, r3
 8004250:	43db      	mvns	r3, r3
 8004252:	b21a      	sxth	r2, r3
 8004254:	4b21      	ldr	r3, [pc, #132]	; (80042dc <socket+0x21c>)
 8004256:	881b      	ldrh	r3, [r3, #0]
 8004258:	b21b      	sxth	r3, r3
 800425a:	4013      	ands	r3, r2
 800425c:	b21b      	sxth	r3, r3
 800425e:	b29a      	uxth	r2, r3
 8004260:	4b1e      	ldr	r3, [pc, #120]	; (80042dc <socket+0x21c>)
 8004262:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8004264:	78fb      	ldrb	r3, [r7, #3]
 8004266:	f003 0201 	and.w	r2, r3, #1
 800426a:	79fb      	ldrb	r3, [r7, #7]
 800426c:	fa02 f303 	lsl.w	r3, r2, r3
 8004270:	b21a      	sxth	r2, r3
 8004272:	4b1a      	ldr	r3, [pc, #104]	; (80042dc <socket+0x21c>)
 8004274:	881b      	ldrh	r3, [r3, #0]
 8004276:	b21b      	sxth	r3, r3
 8004278:	4313      	orrs	r3, r2
 800427a:	b21b      	sxth	r3, r3
 800427c:	b29a      	uxth	r2, r3
 800427e:	4b17      	ldr	r3, [pc, #92]	; (80042dc <socket+0x21c>)
 8004280:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8004282:	79fb      	ldrb	r3, [r7, #7]
 8004284:	2201      	movs	r2, #1
 8004286:	fa02 f303 	lsl.w	r3, r2, r3
 800428a:	b21b      	sxth	r3, r3
 800428c:	43db      	mvns	r3, r3
 800428e:	b21a      	sxth	r2, r3
 8004290:	4b13      	ldr	r3, [pc, #76]	; (80042e0 <socket+0x220>)
 8004292:	881b      	ldrh	r3, [r3, #0]
 8004294:	b21b      	sxth	r3, r3
 8004296:	4013      	ands	r3, r2
 8004298:	b21b      	sxth	r3, r3
 800429a:	b29a      	uxth	r2, r3
 800429c:	4b10      	ldr	r3, [pc, #64]	; (80042e0 <socket+0x220>)
 800429e:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 80042a0:	79fb      	ldrb	r3, [r7, #7]
 80042a2:	4a10      	ldr	r2, [pc, #64]	; (80042e4 <socket+0x224>)
 80042a4:	2100      	movs	r1, #0
 80042a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 80042aa:	79fb      	ldrb	r3, [r7, #7]
 80042ac:	4a0e      	ldr	r2, [pc, #56]	; (80042e8 <socket+0x228>)
 80042ae:	2100      	movs	r1, #0
 80042b0:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 80042b2:	bf00      	nop
 80042b4:	79fb      	ldrb	r3, [r7, #7]
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	3301      	adds	r3, #1
 80042ba:	00db      	lsls	r3, r3, #3
 80042bc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80042c0:	4618      	mov	r0, r3
 80042c2:	f000 fa8b 	bl	80047dc <WIZCHIP_READ>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d0f3      	beq.n	80042b4 <socket+0x1f4>
   return (int8_t)sn;
 80042cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 80042d0:	4618      	mov	r0, r3
 80042d2:	3714      	adds	r7, #20
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd90      	pop	{r4, r7, pc}
 80042d8:	2000001e 	.word	0x2000001e
 80042dc:	20000234 	.word	0x20000234
 80042e0:	20000236 	.word	0x20000236
 80042e4:	20000238 	.word	0x20000238
 80042e8:	20000248 	.word	0x20000248

080042ec <close>:

int8_t close(uint8_t sn)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	4603      	mov	r3, r0
 80042f4:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 80042f6:	79fb      	ldrb	r3, [r7, #7]
 80042f8:	2b08      	cmp	r3, #8
 80042fa:	d902      	bls.n	8004302 <close+0x16>
 80042fc:	f04f 33ff 	mov.w	r3, #4294967295
 8004300:	e055      	b.n	80043ae <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8004302:	79fb      	ldrb	r3, [r7, #7]
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	3301      	adds	r3, #1
 8004308:	00db      	lsls	r3, r3, #3
 800430a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800430e:	2110      	movs	r1, #16
 8004310:	4618      	mov	r0, r3
 8004312:	f000 faaf 	bl	8004874 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8004316:	bf00      	nop
 8004318:	79fb      	ldrb	r3, [r7, #7]
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	3301      	adds	r3, #1
 800431e:	00db      	lsls	r3, r3, #3
 8004320:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004324:	4618      	mov	r0, r3
 8004326:	f000 fa59 	bl	80047dc <WIZCHIP_READ>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d1f3      	bne.n	8004318 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8004330:	79fb      	ldrb	r3, [r7, #7]
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	3301      	adds	r3, #1
 8004336:	00db      	lsls	r3, r3, #3
 8004338:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800433c:	211f      	movs	r1, #31
 800433e:	4618      	mov	r0, r3
 8004340:	f000 fa98 	bl	8004874 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8004344:	79fb      	ldrb	r3, [r7, #7]
 8004346:	2201      	movs	r2, #1
 8004348:	fa02 f303 	lsl.w	r3, r2, r3
 800434c:	b21b      	sxth	r3, r3
 800434e:	43db      	mvns	r3, r3
 8004350:	b21a      	sxth	r2, r3
 8004352:	4b19      	ldr	r3, [pc, #100]	; (80043b8 <close+0xcc>)
 8004354:	881b      	ldrh	r3, [r3, #0]
 8004356:	b21b      	sxth	r3, r3
 8004358:	4013      	ands	r3, r2
 800435a:	b21b      	sxth	r3, r3
 800435c:	b29a      	uxth	r2, r3
 800435e:	4b16      	ldr	r3, [pc, #88]	; (80043b8 <close+0xcc>)
 8004360:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8004362:	79fb      	ldrb	r3, [r7, #7]
 8004364:	2201      	movs	r2, #1
 8004366:	fa02 f303 	lsl.w	r3, r2, r3
 800436a:	b21b      	sxth	r3, r3
 800436c:	43db      	mvns	r3, r3
 800436e:	b21a      	sxth	r2, r3
 8004370:	4b12      	ldr	r3, [pc, #72]	; (80043bc <close+0xd0>)
 8004372:	881b      	ldrh	r3, [r3, #0]
 8004374:	b21b      	sxth	r3, r3
 8004376:	4013      	ands	r3, r2
 8004378:	b21b      	sxth	r3, r3
 800437a:	b29a      	uxth	r2, r3
 800437c:	4b0f      	ldr	r3, [pc, #60]	; (80043bc <close+0xd0>)
 800437e:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8004380:	79fb      	ldrb	r3, [r7, #7]
 8004382:	4a0f      	ldr	r2, [pc, #60]	; (80043c0 <close+0xd4>)
 8004384:	2100      	movs	r1, #0
 8004386:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 800438a:	79fb      	ldrb	r3, [r7, #7]
 800438c:	4a0d      	ldr	r2, [pc, #52]	; (80043c4 <close+0xd8>)
 800438e:	2100      	movs	r1, #0
 8004390:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8004392:	bf00      	nop
 8004394:	79fb      	ldrb	r3, [r7, #7]
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	3301      	adds	r3, #1
 800439a:	00db      	lsls	r3, r3, #3
 800439c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80043a0:	4618      	mov	r0, r3
 80043a2:	f000 fa1b 	bl	80047dc <WIZCHIP_READ>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d1f3      	bne.n	8004394 <close+0xa8>
	return SOCK_OK;
 80043ac:	2301      	movs	r3, #1
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3708      	adds	r7, #8
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	20000234 	.word	0x20000234
 80043bc:	20000236 	.word	0x20000236
 80043c0:	20000238 	.word	0x20000238
 80043c4:	20000248 	.word	0x20000248

080043c8 <listen>:

int8_t listen(uint8_t sn)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	4603      	mov	r3, r0
 80043d0:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 80043d2:	79fb      	ldrb	r3, [r7, #7]
 80043d4:	2b08      	cmp	r3, #8
 80043d6:	d902      	bls.n	80043de <listen+0x16>
 80043d8:	f04f 33ff 	mov.w	r3, #4294967295
 80043dc:	e049      	b.n	8004472 <listen+0xaa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80043de:	79fb      	ldrb	r3, [r7, #7]
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	3301      	adds	r3, #1
 80043e4:	00db      	lsls	r3, r3, #3
 80043e6:	4618      	mov	r0, r3
 80043e8:	f000 f9f8 	bl	80047dc <WIZCHIP_READ>
 80043ec:	4603      	mov	r3, r0
 80043ee:	f003 030f 	and.w	r3, r3, #15
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d002      	beq.n	80043fc <listen+0x34>
 80043f6:	f06f 0304 	mvn.w	r3, #4
 80043fa:	e03a      	b.n	8004472 <listen+0xaa>
	CHECK_SOCKINIT();
 80043fc:	79fb      	ldrb	r3, [r7, #7]
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	3301      	adds	r3, #1
 8004402:	00db      	lsls	r3, r3, #3
 8004404:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004408:	4618      	mov	r0, r3
 800440a:	f000 f9e7 	bl	80047dc <WIZCHIP_READ>
 800440e:	4603      	mov	r3, r0
 8004410:	2b13      	cmp	r3, #19
 8004412:	d002      	beq.n	800441a <listen+0x52>
 8004414:	f06f 0302 	mvn.w	r3, #2
 8004418:	e02b      	b.n	8004472 <listen+0xaa>
	setSn_CR(sn,Sn_CR_LISTEN);
 800441a:	79fb      	ldrb	r3, [r7, #7]
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	3301      	adds	r3, #1
 8004420:	00db      	lsls	r3, r3, #3
 8004422:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004426:	2102      	movs	r1, #2
 8004428:	4618      	mov	r0, r3
 800442a:	f000 fa23 	bl	8004874 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 800442e:	bf00      	nop
 8004430:	79fb      	ldrb	r3, [r7, #7]
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	3301      	adds	r3, #1
 8004436:	00db      	lsls	r3, r3, #3
 8004438:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800443c:	4618      	mov	r0, r3
 800443e:	f000 f9cd 	bl	80047dc <WIZCHIP_READ>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d1f3      	bne.n	8004430 <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8004448:	e006      	b.n	8004458 <listen+0x90>
   {
         close(sn);
 800444a:	79fb      	ldrb	r3, [r7, #7]
 800444c:	4618      	mov	r0, r3
 800444e:	f7ff ff4d 	bl	80042ec <close>
         return SOCKERR_SOCKCLOSED;
 8004452:	f06f 0303 	mvn.w	r3, #3
 8004456:	e00c      	b.n	8004472 <listen+0xaa>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8004458:	79fb      	ldrb	r3, [r7, #7]
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	3301      	adds	r3, #1
 800445e:	00db      	lsls	r3, r3, #3
 8004460:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004464:	4618      	mov	r0, r3
 8004466:	f000 f9b9 	bl	80047dc <WIZCHIP_READ>
 800446a:	4603      	mov	r3, r0
 800446c:	2b14      	cmp	r3, #20
 800446e:	d1ec      	bne.n	800444a <listen+0x82>
   }
   return SOCK_OK;
 8004470:	2301      	movs	r3, #1
}
 8004472:	4618      	mov	r0, r3
 8004474:	3708      	adds	r7, #8
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
	...

0800447c <send>:
	}
	return SOCK_OK;
}

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	4603      	mov	r3, r0
 8004484:	6039      	str	r1, [r7, #0]
 8004486:	71fb      	strb	r3, [r7, #7]
 8004488:	4613      	mov	r3, r2
 800448a:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 800448c:	2300      	movs	r3, #0
 800448e:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8004490:	2300      	movs	r3, #0
 8004492:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8004494:	79fb      	ldrb	r3, [r7, #7]
 8004496:	2b08      	cmp	r3, #8
 8004498:	d902      	bls.n	80044a0 <send+0x24>
 800449a:	f04f 33ff 	mov.w	r3, #4294967295
 800449e:	e0de      	b.n	800465e <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80044a0:	79fb      	ldrb	r3, [r7, #7]
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	3301      	adds	r3, #1
 80044a6:	00db      	lsls	r3, r3, #3
 80044a8:	4618      	mov	r0, r3
 80044aa:	f000 f997 	bl	80047dc <WIZCHIP_READ>
 80044ae:	4603      	mov	r3, r0
 80044b0:	f003 030f 	and.w	r3, r3, #15
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d002      	beq.n	80044be <send+0x42>
 80044b8:	f06f 0304 	mvn.w	r3, #4
 80044bc:	e0cf      	b.n	800465e <send+0x1e2>
   CHECK_SOCKDATA();
 80044be:	88bb      	ldrh	r3, [r7, #4]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d102      	bne.n	80044ca <send+0x4e>
 80044c4:	f06f 030d 	mvn.w	r3, #13
 80044c8:	e0c9      	b.n	800465e <send+0x1e2>
   tmp = getSn_SR(sn);
 80044ca:	79fb      	ldrb	r3, [r7, #7]
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	3301      	adds	r3, #1
 80044d0:	00db      	lsls	r3, r3, #3
 80044d2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80044d6:	4618      	mov	r0, r3
 80044d8:	f000 f980 	bl	80047dc <WIZCHIP_READ>
 80044dc:	4603      	mov	r3, r0
 80044de:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 80044e0:	7bfb      	ldrb	r3, [r7, #15]
 80044e2:	2b17      	cmp	r3, #23
 80044e4:	d005      	beq.n	80044f2 <send+0x76>
 80044e6:	7bfb      	ldrb	r3, [r7, #15]
 80044e8:	2b1c      	cmp	r3, #28
 80044ea:	d002      	beq.n	80044f2 <send+0x76>
 80044ec:	f06f 0306 	mvn.w	r3, #6
 80044f0:	e0b5      	b.n	800465e <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 80044f2:	4b5d      	ldr	r3, [pc, #372]	; (8004668 <send+0x1ec>)
 80044f4:	881b      	ldrh	r3, [r3, #0]
 80044f6:	461a      	mov	r2, r3
 80044f8:	79fb      	ldrb	r3, [r7, #7]
 80044fa:	fa42 f303 	asr.w	r3, r2, r3
 80044fe:	f003 0301 	and.w	r3, r3, #1
 8004502:	2b00      	cmp	r3, #0
 8004504:	d039      	beq.n	800457a <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8004506:	79fb      	ldrb	r3, [r7, #7]
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	3301      	adds	r3, #1
 800450c:	00db      	lsls	r3, r3, #3
 800450e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004512:	4618      	mov	r0, r3
 8004514:	f000 f962 	bl	80047dc <WIZCHIP_READ>
 8004518:	4603      	mov	r3, r0
 800451a:	f003 031f 	and.w	r3, r3, #31
 800451e:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8004520:	7bfb      	ldrb	r3, [r7, #15]
 8004522:	f003 0310 	and.w	r3, r3, #16
 8004526:	2b00      	cmp	r3, #0
 8004528:	d019      	beq.n	800455e <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 800452a:	79fb      	ldrb	r3, [r7, #7]
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	3301      	adds	r3, #1
 8004530:	00db      	lsls	r3, r3, #3
 8004532:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004536:	2110      	movs	r1, #16
 8004538:	4618      	mov	r0, r3
 800453a:	f000 f99b 	bl	8004874 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 800453e:	79fb      	ldrb	r3, [r7, #7]
 8004540:	2201      	movs	r2, #1
 8004542:	fa02 f303 	lsl.w	r3, r2, r3
 8004546:	b21b      	sxth	r3, r3
 8004548:	43db      	mvns	r3, r3
 800454a:	b21a      	sxth	r2, r3
 800454c:	4b46      	ldr	r3, [pc, #280]	; (8004668 <send+0x1ec>)
 800454e:	881b      	ldrh	r3, [r3, #0]
 8004550:	b21b      	sxth	r3, r3
 8004552:	4013      	ands	r3, r2
 8004554:	b21b      	sxth	r3, r3
 8004556:	b29a      	uxth	r2, r3
 8004558:	4b43      	ldr	r3, [pc, #268]	; (8004668 <send+0x1ec>)
 800455a:	801a      	strh	r2, [r3, #0]
 800455c:	e00d      	b.n	800457a <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 800455e:	7bfb      	ldrb	r3, [r7, #15]
 8004560:	f003 0308 	and.w	r3, r3, #8
 8004564:	2b00      	cmp	r3, #0
 8004566:	d006      	beq.n	8004576 <send+0xfa>
      {
         close(sn);
 8004568:	79fb      	ldrb	r3, [r7, #7]
 800456a:	4618      	mov	r0, r3
 800456c:	f7ff febe 	bl	80042ec <close>
         return SOCKERR_TIMEOUT;
 8004570:	f06f 030c 	mvn.w	r3, #12
 8004574:	e073      	b.n	800465e <send+0x1e2>
      }
      else return SOCK_BUSY;
 8004576:	2300      	movs	r3, #0
 8004578:	e071      	b.n	800465e <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 800457a:	79fb      	ldrb	r3, [r7, #7]
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	3301      	adds	r3, #1
 8004580:	00db      	lsls	r3, r3, #3
 8004582:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8004586:	4618      	mov	r0, r3
 8004588:	f000 f928 	bl	80047dc <WIZCHIP_READ>
 800458c:	4603      	mov	r3, r0
 800458e:	b29b      	uxth	r3, r3
 8004590:	029b      	lsls	r3, r3, #10
 8004592:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8004594:	88ba      	ldrh	r2, [r7, #4]
 8004596:	89bb      	ldrh	r3, [r7, #12]
 8004598:	429a      	cmp	r2, r3
 800459a:	d901      	bls.n	80045a0 <send+0x124>
 800459c:	89bb      	ldrh	r3, [r7, #12]
 800459e:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 80045a0:	79fb      	ldrb	r3, [r7, #7]
 80045a2:	4618      	mov	r0, r3
 80045a4:	f000 fa74 	bl	8004a90 <getSn_TX_FSR>
 80045a8:	4603      	mov	r3, r0
 80045aa:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 80045ac:	79fb      	ldrb	r3, [r7, #7]
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	3301      	adds	r3, #1
 80045b2:	00db      	lsls	r3, r3, #3
 80045b4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80045b8:	4618      	mov	r0, r3
 80045ba:	f000 f90f 	bl	80047dc <WIZCHIP_READ>
 80045be:	4603      	mov	r3, r0
 80045c0:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 80045c2:	7bfb      	ldrb	r3, [r7, #15]
 80045c4:	2b17      	cmp	r3, #23
 80045c6:	d009      	beq.n	80045dc <send+0x160>
 80045c8:	7bfb      	ldrb	r3, [r7, #15]
 80045ca:	2b1c      	cmp	r3, #28
 80045cc:	d006      	beq.n	80045dc <send+0x160>
      {
         close(sn);
 80045ce:	79fb      	ldrb	r3, [r7, #7]
 80045d0:	4618      	mov	r0, r3
 80045d2:	f7ff fe8b 	bl	80042ec <close>
         return SOCKERR_SOCKSTATUS;
 80045d6:	f06f 0306 	mvn.w	r3, #6
 80045da:	e040      	b.n	800465e <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 80045dc:	4b23      	ldr	r3, [pc, #140]	; (800466c <send+0x1f0>)
 80045de:	881b      	ldrh	r3, [r3, #0]
 80045e0:	461a      	mov	r2, r3
 80045e2:	79fb      	ldrb	r3, [r7, #7]
 80045e4:	fa42 f303 	asr.w	r3, r2, r3
 80045e8:	f003 0301 	and.w	r3, r3, #1
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d005      	beq.n	80045fc <send+0x180>
 80045f0:	88ba      	ldrh	r2, [r7, #4]
 80045f2:	89bb      	ldrh	r3, [r7, #12]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d901      	bls.n	80045fc <send+0x180>
 80045f8:	2300      	movs	r3, #0
 80045fa:	e030      	b.n	800465e <send+0x1e2>
      if(len <= freesize) break;
 80045fc:	88ba      	ldrh	r2, [r7, #4]
 80045fe:	89bb      	ldrh	r3, [r7, #12]
 8004600:	429a      	cmp	r2, r3
 8004602:	d900      	bls.n	8004606 <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 8004604:	e7cc      	b.n	80045a0 <send+0x124>
      if(len <= freesize) break;
 8004606:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8004608:	88ba      	ldrh	r2, [r7, #4]
 800460a:	79fb      	ldrb	r3, [r7, #7]
 800460c:	6839      	ldr	r1, [r7, #0]
 800460e:	4618      	mov	r0, r3
 8004610:	f000 fad4 	bl	8004bbc <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8004614:	79fb      	ldrb	r3, [r7, #7]
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	3301      	adds	r3, #1
 800461a:	00db      	lsls	r3, r3, #3
 800461c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004620:	2120      	movs	r1, #32
 8004622:	4618      	mov	r0, r3
 8004624:	f000 f926 	bl	8004874 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8004628:	bf00      	nop
 800462a:	79fb      	ldrb	r3, [r7, #7]
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	3301      	adds	r3, #1
 8004630:	00db      	lsls	r3, r3, #3
 8004632:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004636:	4618      	mov	r0, r3
 8004638:	f000 f8d0 	bl	80047dc <WIZCHIP_READ>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1f3      	bne.n	800462a <send+0x1ae>
   sock_is_sending |= (1 << sn);
 8004642:	79fb      	ldrb	r3, [r7, #7]
 8004644:	2201      	movs	r2, #1
 8004646:	fa02 f303 	lsl.w	r3, r2, r3
 800464a:	b21a      	sxth	r2, r3
 800464c:	4b06      	ldr	r3, [pc, #24]	; (8004668 <send+0x1ec>)
 800464e:	881b      	ldrh	r3, [r3, #0]
 8004650:	b21b      	sxth	r3, r3
 8004652:	4313      	orrs	r3, r2
 8004654:	b21b      	sxth	r3, r3
 8004656:	b29a      	uxth	r2, r3
 8004658:	4b03      	ldr	r3, [pc, #12]	; (8004668 <send+0x1ec>)
 800465a:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800465c:	88bb      	ldrh	r3, [r7, #4]
}
 800465e:	4618      	mov	r0, r3
 8004660:	3710      	adds	r7, #16
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	20000236 	.word	0x20000236
 800466c:	20000234 	.word	0x20000234

08004670 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8004670:	b590      	push	{r4, r7, lr}
 8004672:	b085      	sub	sp, #20
 8004674:	af00      	add	r7, sp, #0
 8004676:	4603      	mov	r3, r0
 8004678:	6039      	str	r1, [r7, #0]
 800467a:	71fb      	strb	r3, [r7, #7]
 800467c:	4613      	mov	r3, r2
 800467e:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8004680:	2300      	movs	r3, #0
 8004682:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8004684:	2300      	movs	r3, #0
 8004686:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8004688:	79fb      	ldrb	r3, [r7, #7]
 800468a:	2b08      	cmp	r3, #8
 800468c:	d902      	bls.n	8004694 <recv+0x24>
 800468e:	f04f 33ff 	mov.w	r3, #4294967295
 8004692:	e09c      	b.n	80047ce <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8004694:	79fb      	ldrb	r3, [r7, #7]
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	3301      	adds	r3, #1
 800469a:	00db      	lsls	r3, r3, #3
 800469c:	4618      	mov	r0, r3
 800469e:	f000 f89d 	bl	80047dc <WIZCHIP_READ>
 80046a2:	4603      	mov	r3, r0
 80046a4:	f003 030f 	and.w	r3, r3, #15
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d002      	beq.n	80046b2 <recv+0x42>
 80046ac:	f06f 0304 	mvn.w	r3, #4
 80046b0:	e08d      	b.n	80047ce <recv+0x15e>
   CHECK_SOCKDATA();
 80046b2:	88bb      	ldrh	r3, [r7, #4]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d102      	bne.n	80046be <recv+0x4e>
 80046b8:	f06f 030d 	mvn.w	r3, #13
 80046bc:	e087      	b.n	80047ce <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 80046be:	79fb      	ldrb	r3, [r7, #7]
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	3301      	adds	r3, #1
 80046c4:	00db      	lsls	r3, r3, #3
 80046c6:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80046ca:	4618      	mov	r0, r3
 80046cc:	f000 f886 	bl	80047dc <WIZCHIP_READ>
 80046d0:	4603      	mov	r3, r0
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	029b      	lsls	r3, r3, #10
 80046d6:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 80046d8:	89ba      	ldrh	r2, [r7, #12]
 80046da:	88bb      	ldrh	r3, [r7, #4]
 80046dc:	429a      	cmp	r2, r3
 80046de:	d201      	bcs.n	80046e4 <recv+0x74>
 80046e0:	89bb      	ldrh	r3, [r7, #12]
 80046e2:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 80046e4:	79fb      	ldrb	r3, [r7, #7]
 80046e6:	4618      	mov	r0, r3
 80046e8:	f000 fa1d 	bl	8004b26 <getSn_RX_RSR>
 80046ec:	4603      	mov	r3, r0
 80046ee:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 80046f0:	79fb      	ldrb	r3, [r7, #7]
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	3301      	adds	r3, #1
 80046f6:	00db      	lsls	r3, r3, #3
 80046f8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80046fc:	4618      	mov	r0, r3
 80046fe:	f000 f86d 	bl	80047dc <WIZCHIP_READ>
 8004702:	4603      	mov	r3, r0
 8004704:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 8004706:	7bfb      	ldrb	r3, [r7, #15]
 8004708:	2b17      	cmp	r3, #23
 800470a:	d026      	beq.n	800475a <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 800470c:	7bfb      	ldrb	r3, [r7, #15]
 800470e:	2b1c      	cmp	r3, #28
 8004710:	d11c      	bne.n	800474c <recv+0xdc>
            {
               if(recvsize != 0) break;
 8004712:	89bb      	ldrh	r3, [r7, #12]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d133      	bne.n	8004780 <recv+0x110>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8004718:	79fb      	ldrb	r3, [r7, #7]
 800471a:	4618      	mov	r0, r3
 800471c:	f000 f9b8 	bl	8004a90 <getSn_TX_FSR>
 8004720:	4603      	mov	r3, r0
 8004722:	461c      	mov	r4, r3
 8004724:	79fb      	ldrb	r3, [r7, #7]
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	3301      	adds	r3, #1
 800472a:	00db      	lsls	r3, r3, #3
 800472c:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8004730:	4618      	mov	r0, r3
 8004732:	f000 f853 	bl	80047dc <WIZCHIP_READ>
 8004736:	4603      	mov	r3, r0
 8004738:	029b      	lsls	r3, r3, #10
 800473a:	429c      	cmp	r4, r3
 800473c:	d10d      	bne.n	800475a <recv+0xea>
               {
                  close(sn);
 800473e:	79fb      	ldrb	r3, [r7, #7]
 8004740:	4618      	mov	r0, r3
 8004742:	f7ff fdd3 	bl	80042ec <close>
                  return SOCKERR_SOCKSTATUS;
 8004746:	f06f 0306 	mvn.w	r3, #6
 800474a:	e040      	b.n	80047ce <recv+0x15e>
               }
            }
            else
            {
               close(sn);
 800474c:	79fb      	ldrb	r3, [r7, #7]
 800474e:	4618      	mov	r0, r3
 8004750:	f7ff fdcc 	bl	80042ec <close>
               return SOCKERR_SOCKSTATUS;
 8004754:	f06f 0306 	mvn.w	r3, #6
 8004758:	e039      	b.n	80047ce <recv+0x15e>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 800475a:	4b1f      	ldr	r3, [pc, #124]	; (80047d8 <recv+0x168>)
 800475c:	881b      	ldrh	r3, [r3, #0]
 800475e:	461a      	mov	r2, r3
 8004760:	79fb      	ldrb	r3, [r7, #7]
 8004762:	fa42 f303 	asr.w	r3, r2, r3
 8004766:	f003 0301 	and.w	r3, r3, #1
 800476a:	2b00      	cmp	r3, #0
 800476c:	d004      	beq.n	8004778 <recv+0x108>
 800476e:	89bb      	ldrh	r3, [r7, #12]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d101      	bne.n	8004778 <recv+0x108>
 8004774:	2300      	movs	r3, #0
 8004776:	e02a      	b.n	80047ce <recv+0x15e>
         if(recvsize != 0) break;
 8004778:	89bb      	ldrh	r3, [r7, #12]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d102      	bne.n	8004784 <recv+0x114>
         recvsize = getSn_RX_RSR(sn);
 800477e:	e7b1      	b.n	80046e4 <recv+0x74>
               if(recvsize != 0) break;
 8004780:	bf00      	nop
 8004782:	e000      	b.n	8004786 <recv+0x116>
         if(recvsize != 0) break;
 8004784:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8004786:	89ba      	ldrh	r2, [r7, #12]
 8004788:	88bb      	ldrh	r3, [r7, #4]
 800478a:	429a      	cmp	r2, r3
 800478c:	d201      	bcs.n	8004792 <recv+0x122>
 800478e:	89bb      	ldrh	r3, [r7, #12]
 8004790:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8004792:	88ba      	ldrh	r2, [r7, #4]
 8004794:	79fb      	ldrb	r3, [r7, #7]
 8004796:	6839      	ldr	r1, [r7, #0]
 8004798:	4618      	mov	r0, r3
 800479a:	f000 fa6b 	bl	8004c74 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 800479e:	79fb      	ldrb	r3, [r7, #7]
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	3301      	adds	r3, #1
 80047a4:	00db      	lsls	r3, r3, #3
 80047a6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80047aa:	2140      	movs	r1, #64	; 0x40
 80047ac:	4618      	mov	r0, r3
 80047ae:	f000 f861 	bl	8004874 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80047b2:	bf00      	nop
 80047b4:	79fb      	ldrb	r3, [r7, #7]
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	3301      	adds	r3, #1
 80047ba:	00db      	lsls	r3, r3, #3
 80047bc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80047c0:	4618      	mov	r0, r3
 80047c2:	f000 f80b 	bl	80047dc <WIZCHIP_READ>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d1f3      	bne.n	80047b4 <recv+0x144>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80047cc:	88bb      	ldrh	r3, [r7, #4]
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3714      	adds	r7, #20
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd90      	pop	{r4, r7, pc}
 80047d6:	bf00      	nop
 80047d8:	20000234 	.word	0x20000234

080047dc <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 80047e4:	4b22      	ldr	r3, [pc, #136]	; (8004870 <WIZCHIP_READ+0x94>)
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	4798      	blx	r3
   WIZCHIP.CS._select();
 80047ea:	4b21      	ldr	r3, [pc, #132]	; (8004870 <WIZCHIP_READ+0x94>)
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80047f0:	4b1f      	ldr	r3, [pc, #124]	; (8004870 <WIZCHIP_READ+0x94>)
 80047f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d003      	beq.n	8004800 <WIZCHIP_READ+0x24>
 80047f8:	4b1d      	ldr	r3, [pc, #116]	; (8004870 <WIZCHIP_READ+0x94>)
 80047fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d114      	bne.n	800482a <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8004800:	4b1b      	ldr	r3, [pc, #108]	; (8004870 <WIZCHIP_READ+0x94>)
 8004802:	6a1b      	ldr	r3, [r3, #32]
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	0c12      	lsrs	r2, r2, #16
 8004808:	b2d2      	uxtb	r2, r2
 800480a:	4610      	mov	r0, r2
 800480c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800480e:	4b18      	ldr	r3, [pc, #96]	; (8004870 <WIZCHIP_READ+0x94>)
 8004810:	6a1b      	ldr	r3, [r3, #32]
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	0a12      	lsrs	r2, r2, #8
 8004816:	b2d2      	uxtb	r2, r2
 8004818:	4610      	mov	r0, r2
 800481a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800481c:	4b14      	ldr	r3, [pc, #80]	; (8004870 <WIZCHIP_READ+0x94>)
 800481e:	6a1b      	ldr	r3, [r3, #32]
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	b2d2      	uxtb	r2, r2
 8004824:	4610      	mov	r0, r2
 8004826:	4798      	blx	r3
 8004828:	e011      	b.n	800484e <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	0c1b      	lsrs	r3, r3, #16
 800482e:	b2db      	uxtb	r3, r3
 8004830:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	0a1b      	lsrs	r3, r3, #8
 8004836:	b2db      	uxtb	r3, r3
 8004838:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	b2db      	uxtb	r3, r3
 800483e:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8004840:	4b0b      	ldr	r3, [pc, #44]	; (8004870 <WIZCHIP_READ+0x94>)
 8004842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004844:	f107 020c 	add.w	r2, r7, #12
 8004848:	2103      	movs	r1, #3
 800484a:	4610      	mov	r0, r2
 800484c:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 800484e:	4b08      	ldr	r3, [pc, #32]	; (8004870 <WIZCHIP_READ+0x94>)
 8004850:	69db      	ldr	r3, [r3, #28]
 8004852:	4798      	blx	r3
 8004854:	4603      	mov	r3, r0
 8004856:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8004858:	4b05      	ldr	r3, [pc, #20]	; (8004870 <WIZCHIP_READ+0x94>)
 800485a:	699b      	ldr	r3, [r3, #24]
 800485c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800485e:	4b04      	ldr	r3, [pc, #16]	; (8004870 <WIZCHIP_READ+0x94>)
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	4798      	blx	r3
   return ret;
 8004864:	7bfb      	ldrb	r3, [r7, #15]
}
 8004866:	4618      	mov	r0, r3
 8004868:	3710      	adds	r7, #16
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	20000020 	.word	0x20000020

08004874 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	460b      	mov	r3, r1
 800487e:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8004880:	4b22      	ldr	r3, [pc, #136]	; (800490c <WIZCHIP_WRITE+0x98>)
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	4798      	blx	r3
   WIZCHIP.CS._select();
 8004886:	4b21      	ldr	r3, [pc, #132]	; (800490c <WIZCHIP_WRITE+0x98>)
 8004888:	695b      	ldr	r3, [r3, #20]
 800488a:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f043 0304 	orr.w	r3, r3, #4
 8004892:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8004894:	4b1d      	ldr	r3, [pc, #116]	; (800490c <WIZCHIP_WRITE+0x98>)
 8004896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004898:	2b00      	cmp	r3, #0
 800489a:	d119      	bne.n	80048d0 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800489c:	4b1b      	ldr	r3, [pc, #108]	; (800490c <WIZCHIP_WRITE+0x98>)
 800489e:	6a1b      	ldr	r3, [r3, #32]
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	0c12      	lsrs	r2, r2, #16
 80048a4:	b2d2      	uxtb	r2, r2
 80048a6:	4610      	mov	r0, r2
 80048a8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80048aa:	4b18      	ldr	r3, [pc, #96]	; (800490c <WIZCHIP_WRITE+0x98>)
 80048ac:	6a1b      	ldr	r3, [r3, #32]
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	0a12      	lsrs	r2, r2, #8
 80048b2:	b2d2      	uxtb	r2, r2
 80048b4:	4610      	mov	r0, r2
 80048b6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80048b8:	4b14      	ldr	r3, [pc, #80]	; (800490c <WIZCHIP_WRITE+0x98>)
 80048ba:	6a1b      	ldr	r3, [r3, #32]
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	b2d2      	uxtb	r2, r2
 80048c0:	4610      	mov	r0, r2
 80048c2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 80048c4:	4b11      	ldr	r3, [pc, #68]	; (800490c <WIZCHIP_WRITE+0x98>)
 80048c6:	6a1b      	ldr	r3, [r3, #32]
 80048c8:	78fa      	ldrb	r2, [r7, #3]
 80048ca:	4610      	mov	r0, r2
 80048cc:	4798      	blx	r3
 80048ce:	e013      	b.n	80048f8 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	0c1b      	lsrs	r3, r3, #16
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	0a1b      	lsrs	r3, r3, #8
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 80048e6:	78fb      	ldrb	r3, [r7, #3]
 80048e8:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 80048ea:	4b08      	ldr	r3, [pc, #32]	; (800490c <WIZCHIP_WRITE+0x98>)
 80048ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ee:	f107 020c 	add.w	r2, r7, #12
 80048f2:	2104      	movs	r1, #4
 80048f4:	4610      	mov	r0, r2
 80048f6:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80048f8:	4b04      	ldr	r3, [pc, #16]	; (800490c <WIZCHIP_WRITE+0x98>)
 80048fa:	699b      	ldr	r3, [r3, #24]
 80048fc:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80048fe:	4b03      	ldr	r3, [pc, #12]	; (800490c <WIZCHIP_WRITE+0x98>)
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	4798      	blx	r3
}
 8004904:	bf00      	nop
 8004906:	3710      	adds	r7, #16
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}
 800490c:	20000020 	.word	0x20000020

08004910 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8004910:	b590      	push	{r4, r7, lr}
 8004912:	b087      	sub	sp, #28
 8004914:	af00      	add	r7, sp, #0
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	60b9      	str	r1, [r7, #8]
 800491a:	4613      	mov	r3, r2
 800491c:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800491e:	4b2b      	ldr	r3, [pc, #172]	; (80049cc <WIZCHIP_READ_BUF+0xbc>)
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	4798      	blx	r3
   WIZCHIP.CS._select();
 8004924:	4b29      	ldr	r3, [pc, #164]	; (80049cc <WIZCHIP_READ_BUF+0xbc>)
 8004926:	695b      	ldr	r3, [r3, #20]
 8004928:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800492a:	4b28      	ldr	r3, [pc, #160]	; (80049cc <WIZCHIP_READ_BUF+0xbc>)
 800492c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492e:	2b00      	cmp	r3, #0
 8004930:	d003      	beq.n	800493a <WIZCHIP_READ_BUF+0x2a>
 8004932:	4b26      	ldr	r3, [pc, #152]	; (80049cc <WIZCHIP_READ_BUF+0xbc>)
 8004934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004936:	2b00      	cmp	r3, #0
 8004938:	d126      	bne.n	8004988 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800493a:	4b24      	ldr	r3, [pc, #144]	; (80049cc <WIZCHIP_READ_BUF+0xbc>)
 800493c:	6a1b      	ldr	r3, [r3, #32]
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	0c12      	lsrs	r2, r2, #16
 8004942:	b2d2      	uxtb	r2, r2
 8004944:	4610      	mov	r0, r2
 8004946:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8004948:	4b20      	ldr	r3, [pc, #128]	; (80049cc <WIZCHIP_READ_BUF+0xbc>)
 800494a:	6a1b      	ldr	r3, [r3, #32]
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	0a12      	lsrs	r2, r2, #8
 8004950:	b2d2      	uxtb	r2, r2
 8004952:	4610      	mov	r0, r2
 8004954:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8004956:	4b1d      	ldr	r3, [pc, #116]	; (80049cc <WIZCHIP_READ_BUF+0xbc>)
 8004958:	6a1b      	ldr	r3, [r3, #32]
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	b2d2      	uxtb	r2, r2
 800495e:	4610      	mov	r0, r2
 8004960:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8004962:	2300      	movs	r3, #0
 8004964:	82fb      	strh	r3, [r7, #22]
 8004966:	e00a      	b.n	800497e <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8004968:	4b18      	ldr	r3, [pc, #96]	; (80049cc <WIZCHIP_READ_BUF+0xbc>)
 800496a:	69db      	ldr	r3, [r3, #28]
 800496c:	8afa      	ldrh	r2, [r7, #22]
 800496e:	68b9      	ldr	r1, [r7, #8]
 8004970:	188c      	adds	r4, r1, r2
 8004972:	4798      	blx	r3
 8004974:	4603      	mov	r3, r0
 8004976:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8004978:	8afb      	ldrh	r3, [r7, #22]
 800497a:	3301      	adds	r3, #1
 800497c:	82fb      	strh	r3, [r7, #22]
 800497e:	8afa      	ldrh	r2, [r7, #22]
 8004980:	88fb      	ldrh	r3, [r7, #6]
 8004982:	429a      	cmp	r2, r3
 8004984:	d3f0      	bcc.n	8004968 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8004986:	e017      	b.n	80049b8 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	0c1b      	lsrs	r3, r3, #16
 800498c:	b2db      	uxtb	r3, r3
 800498e:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	0a1b      	lsrs	r3, r3, #8
 8004994:	b2db      	uxtb	r3, r3
 8004996:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	b2db      	uxtb	r3, r3
 800499c:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800499e:	4b0b      	ldr	r3, [pc, #44]	; (80049cc <WIZCHIP_READ_BUF+0xbc>)
 80049a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a2:	f107 0210 	add.w	r2, r7, #16
 80049a6:	2103      	movs	r1, #3
 80049a8:	4610      	mov	r0, r2
 80049aa:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 80049ac:	4b07      	ldr	r3, [pc, #28]	; (80049cc <WIZCHIP_READ_BUF+0xbc>)
 80049ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b0:	88fa      	ldrh	r2, [r7, #6]
 80049b2:	4611      	mov	r1, r2
 80049b4:	68b8      	ldr	r0, [r7, #8]
 80049b6:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80049b8:	4b04      	ldr	r3, [pc, #16]	; (80049cc <WIZCHIP_READ_BUF+0xbc>)
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80049be:	4b03      	ldr	r3, [pc, #12]	; (80049cc <WIZCHIP_READ_BUF+0xbc>)
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	4798      	blx	r3
}
 80049c4:	bf00      	nop
 80049c6:	371c      	adds	r7, #28
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd90      	pop	{r4, r7, pc}
 80049cc:	20000020 	.word	0x20000020

080049d0 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b086      	sub	sp, #24
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	4613      	mov	r3, r2
 80049dc:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80049de:	4b2b      	ldr	r3, [pc, #172]	; (8004a8c <WIZCHIP_WRITE_BUF+0xbc>)
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	4798      	blx	r3
   WIZCHIP.CS._select();
 80049e4:	4b29      	ldr	r3, [pc, #164]	; (8004a8c <WIZCHIP_WRITE_BUF+0xbc>)
 80049e6:	695b      	ldr	r3, [r3, #20]
 80049e8:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f043 0304 	orr.w	r3, r3, #4
 80049f0:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80049f2:	4b26      	ldr	r3, [pc, #152]	; (8004a8c <WIZCHIP_WRITE_BUF+0xbc>)
 80049f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d126      	bne.n	8004a48 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80049fa:	4b24      	ldr	r3, [pc, #144]	; (8004a8c <WIZCHIP_WRITE_BUF+0xbc>)
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	68fa      	ldr	r2, [r7, #12]
 8004a00:	0c12      	lsrs	r2, r2, #16
 8004a02:	b2d2      	uxtb	r2, r2
 8004a04:	4610      	mov	r0, r2
 8004a06:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8004a08:	4b20      	ldr	r3, [pc, #128]	; (8004a8c <WIZCHIP_WRITE_BUF+0xbc>)
 8004a0a:	6a1b      	ldr	r3, [r3, #32]
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	0a12      	lsrs	r2, r2, #8
 8004a10:	b2d2      	uxtb	r2, r2
 8004a12:	4610      	mov	r0, r2
 8004a14:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8004a16:	4b1d      	ldr	r3, [pc, #116]	; (8004a8c <WIZCHIP_WRITE_BUF+0xbc>)
 8004a18:	6a1b      	ldr	r3, [r3, #32]
 8004a1a:	68fa      	ldr	r2, [r7, #12]
 8004a1c:	b2d2      	uxtb	r2, r2
 8004a1e:	4610      	mov	r0, r2
 8004a20:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8004a22:	2300      	movs	r3, #0
 8004a24:	82fb      	strh	r3, [r7, #22]
 8004a26:	e00a      	b.n	8004a3e <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8004a28:	4b18      	ldr	r3, [pc, #96]	; (8004a8c <WIZCHIP_WRITE_BUF+0xbc>)
 8004a2a:	6a1b      	ldr	r3, [r3, #32]
 8004a2c:	8afa      	ldrh	r2, [r7, #22]
 8004a2e:	68b9      	ldr	r1, [r7, #8]
 8004a30:	440a      	add	r2, r1
 8004a32:	7812      	ldrb	r2, [r2, #0]
 8004a34:	4610      	mov	r0, r2
 8004a36:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8004a38:	8afb      	ldrh	r3, [r7, #22]
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	82fb      	strh	r3, [r7, #22]
 8004a3e:	8afa      	ldrh	r2, [r7, #22]
 8004a40:	88fb      	ldrh	r3, [r7, #6]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d3f0      	bcc.n	8004a28 <WIZCHIP_WRITE_BUF+0x58>
 8004a46:	e017      	b.n	8004a78 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	0c1b      	lsrs	r3, r3, #16
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	0a1b      	lsrs	r3, r3, #8
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8004a5e:	4b0b      	ldr	r3, [pc, #44]	; (8004a8c <WIZCHIP_WRITE_BUF+0xbc>)
 8004a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a62:	f107 0210 	add.w	r2, r7, #16
 8004a66:	2103      	movs	r1, #3
 8004a68:	4610      	mov	r0, r2
 8004a6a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8004a6c:	4b07      	ldr	r3, [pc, #28]	; (8004a8c <WIZCHIP_WRITE_BUF+0xbc>)
 8004a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a70:	88fa      	ldrh	r2, [r7, #6]
 8004a72:	4611      	mov	r1, r2
 8004a74:	68b8      	ldr	r0, [r7, #8]
 8004a76:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8004a78:	4b04      	ldr	r3, [pc, #16]	; (8004a8c <WIZCHIP_WRITE_BUF+0xbc>)
 8004a7a:	699b      	ldr	r3, [r3, #24]
 8004a7c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8004a7e:	4b03      	ldr	r3, [pc, #12]	; (8004a8c <WIZCHIP_WRITE_BUF+0xbc>)
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	4798      	blx	r3
}
 8004a84:	bf00      	nop
 8004a86:	3718      	adds	r7, #24
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	20000020 	.word	0x20000020

08004a90 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8004a90:	b590      	push	{r4, r7, lr}
 8004a92:	b085      	sub	sp, #20
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	4603      	mov	r3, r0
 8004a98:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	81fb      	strh	r3, [r7, #14]
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8004aa2:	79fb      	ldrb	r3, [r7, #7]
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	00db      	lsls	r3, r3, #3
 8004aaa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7ff fe94 	bl	80047dc <WIZCHIP_READ>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8004ab8:	89bb      	ldrh	r3, [r7, #12]
 8004aba:	021b      	lsls	r3, r3, #8
 8004abc:	b29c      	uxth	r4, r3
 8004abe:	79fb      	ldrb	r3, [r7, #7]
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	00db      	lsls	r3, r3, #3
 8004ac6:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8004aca:	4618      	mov	r0, r3
 8004acc:	f7ff fe86 	bl	80047dc <WIZCHIP_READ>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	4423      	add	r3, r4
 8004ad6:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8004ad8:	89bb      	ldrh	r3, [r7, #12]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d01a      	beq.n	8004b14 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8004ade:	79fb      	ldrb	r3, [r7, #7]
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	00db      	lsls	r3, r3, #3
 8004ae6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004aea:	4618      	mov	r0, r3
 8004aec:	f7ff fe76 	bl	80047dc <WIZCHIP_READ>
 8004af0:	4603      	mov	r3, r0
 8004af2:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8004af4:	89fb      	ldrh	r3, [r7, #14]
 8004af6:	021b      	lsls	r3, r3, #8
 8004af8:	b29c      	uxth	r4, r3
 8004afa:	79fb      	ldrb	r3, [r7, #7]
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	3301      	adds	r3, #1
 8004b00:	00db      	lsls	r3, r3, #3
 8004b02:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8004b06:	4618      	mov	r0, r3
 8004b08:	f7ff fe68 	bl	80047dc <WIZCHIP_READ>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	4423      	add	r3, r4
 8004b12:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8004b14:	89fa      	ldrh	r2, [r7, #14]
 8004b16:	89bb      	ldrh	r3, [r7, #12]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d1c2      	bne.n	8004aa2 <getSn_TX_FSR+0x12>
   return val;
 8004b1c:	89fb      	ldrh	r3, [r7, #14]
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3714      	adds	r7, #20
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd90      	pop	{r4, r7, pc}

08004b26 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8004b26:	b590      	push	{r4, r7, lr}
 8004b28:	b085      	sub	sp, #20
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8004b30:	2300      	movs	r3, #0
 8004b32:	81fb      	strh	r3, [r7, #14]
 8004b34:	2300      	movs	r3, #0
 8004b36:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8004b38:	79fb      	ldrb	r3, [r7, #7]
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	00db      	lsls	r3, r3, #3
 8004b40:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8004b44:	4618      	mov	r0, r3
 8004b46:	f7ff fe49 	bl	80047dc <WIZCHIP_READ>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8004b4e:	89bb      	ldrh	r3, [r7, #12]
 8004b50:	021b      	lsls	r3, r3, #8
 8004b52:	b29c      	uxth	r4, r3
 8004b54:	79fb      	ldrb	r3, [r7, #7]
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	3301      	adds	r3, #1
 8004b5a:	00db      	lsls	r3, r3, #3
 8004b5c:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8004b60:	4618      	mov	r0, r3
 8004b62:	f7ff fe3b 	bl	80047dc <WIZCHIP_READ>
 8004b66:	4603      	mov	r3, r0
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	4423      	add	r3, r4
 8004b6c:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8004b6e:	89bb      	ldrh	r3, [r7, #12]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d01a      	beq.n	8004baa <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8004b74:	79fb      	ldrb	r3, [r7, #7]
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	3301      	adds	r3, #1
 8004b7a:	00db      	lsls	r3, r3, #3
 8004b7c:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8004b80:	4618      	mov	r0, r3
 8004b82:	f7ff fe2b 	bl	80047dc <WIZCHIP_READ>
 8004b86:	4603      	mov	r3, r0
 8004b88:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8004b8a:	89fb      	ldrh	r3, [r7, #14]
 8004b8c:	021b      	lsls	r3, r3, #8
 8004b8e:	b29c      	uxth	r4, r3
 8004b90:	79fb      	ldrb	r3, [r7, #7]
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	3301      	adds	r3, #1
 8004b96:	00db      	lsls	r3, r3, #3
 8004b98:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f7ff fe1d 	bl	80047dc <WIZCHIP_READ>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	4423      	add	r3, r4
 8004ba8:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8004baa:	89fa      	ldrh	r2, [r7, #14]
 8004bac:	89bb      	ldrh	r3, [r7, #12]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d1c2      	bne.n	8004b38 <getSn_RX_RSR+0x12>
   return val;
 8004bb2:	89fb      	ldrh	r3, [r7, #14]
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3714      	adds	r7, #20
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd90      	pop	{r4, r7, pc}

08004bbc <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8004bbc:	b590      	push	{r4, r7, lr}
 8004bbe:	b085      	sub	sp, #20
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	6039      	str	r1, [r7, #0]
 8004bc6:	71fb      	strb	r3, [r7, #7]
 8004bc8:	4613      	mov	r3, r2
 8004bca:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8004bd4:	88bb      	ldrh	r3, [r7, #4]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d048      	beq.n	8004c6c <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8004bda:	79fb      	ldrb	r3, [r7, #7]
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	3301      	adds	r3, #1
 8004be0:	00db      	lsls	r3, r3, #3
 8004be2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7ff fdf8 	bl	80047dc <WIZCHIP_READ>
 8004bec:	4603      	mov	r3, r0
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	021b      	lsls	r3, r3, #8
 8004bf2:	b29c      	uxth	r4, r3
 8004bf4:	79fb      	ldrb	r3, [r7, #7]
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	00db      	lsls	r3, r3, #3
 8004bfc:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8004c00:	4618      	mov	r0, r3
 8004c02:	f7ff fdeb 	bl	80047dc <WIZCHIP_READ>
 8004c06:	4603      	mov	r3, r0
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	4423      	add	r3, r4
 8004c0c:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8004c0e:	89fb      	ldrh	r3, [r7, #14]
 8004c10:	021b      	lsls	r3, r3, #8
 8004c12:	79fa      	ldrb	r2, [r7, #7]
 8004c14:	0092      	lsls	r2, r2, #2
 8004c16:	3202      	adds	r2, #2
 8004c18:	00d2      	lsls	r2, r2, #3
 8004c1a:	4413      	add	r3, r2
 8004c1c:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8004c1e:	88bb      	ldrh	r3, [r7, #4]
 8004c20:	461a      	mov	r2, r3
 8004c22:	6839      	ldr	r1, [r7, #0]
 8004c24:	68b8      	ldr	r0, [r7, #8]
 8004c26:	f7ff fed3 	bl	80049d0 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8004c2a:	89fa      	ldrh	r2, [r7, #14]
 8004c2c:	88bb      	ldrh	r3, [r7, #4]
 8004c2e:	4413      	add	r3, r2
 8004c30:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8004c32:	79fb      	ldrb	r3, [r7, #7]
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	3301      	adds	r3, #1
 8004c38:	00db      	lsls	r3, r3, #3
 8004c3a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004c3e:	461a      	mov	r2, r3
 8004c40:	89fb      	ldrh	r3, [r7, #14]
 8004c42:	0a1b      	lsrs	r3, r3, #8
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	4619      	mov	r1, r3
 8004c4a:	4610      	mov	r0, r2
 8004c4c:	f7ff fe12 	bl	8004874 <WIZCHIP_WRITE>
 8004c50:	79fb      	ldrb	r3, [r7, #7]
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	3301      	adds	r3, #1
 8004c56:	00db      	lsls	r3, r3, #3
 8004c58:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	89fb      	ldrh	r3, [r7, #14]
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	4619      	mov	r1, r3
 8004c64:	4610      	mov	r0, r2
 8004c66:	f7ff fe05 	bl	8004874 <WIZCHIP_WRITE>
 8004c6a:	e000      	b.n	8004c6e <wiz_send_data+0xb2>
   if(len == 0)  return;
 8004c6c:	bf00      	nop
}
 8004c6e:	3714      	adds	r7, #20
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd90      	pop	{r4, r7, pc}

08004c74 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8004c74:	b590      	push	{r4, r7, lr}
 8004c76:	b085      	sub	sp, #20
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	6039      	str	r1, [r7, #0]
 8004c7e:	71fb      	strb	r3, [r7, #7]
 8004c80:	4613      	mov	r3, r2
 8004c82:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8004c84:	2300      	movs	r3, #0
 8004c86:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8004c8c:	88bb      	ldrh	r3, [r7, #4]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d048      	beq.n	8004d24 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 8004c92:	79fb      	ldrb	r3, [r7, #7]
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	3301      	adds	r3, #1
 8004c98:	00db      	lsls	r3, r3, #3
 8004c9a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7ff fd9c 	bl	80047dc <WIZCHIP_READ>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	021b      	lsls	r3, r3, #8
 8004caa:	b29c      	uxth	r4, r3
 8004cac:	79fb      	ldrb	r3, [r7, #7]
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	00db      	lsls	r3, r3, #3
 8004cb4:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f7ff fd8f 	bl	80047dc <WIZCHIP_READ>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	4423      	add	r3, r4
 8004cc4:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8004cc6:	89fb      	ldrh	r3, [r7, #14]
 8004cc8:	021b      	lsls	r3, r3, #8
 8004cca:	79fa      	ldrb	r2, [r7, #7]
 8004ccc:	0092      	lsls	r2, r2, #2
 8004cce:	3203      	adds	r2, #3
 8004cd0:	00d2      	lsls	r2, r2, #3
 8004cd2:	4413      	add	r3, r2
 8004cd4:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8004cd6:	88bb      	ldrh	r3, [r7, #4]
 8004cd8:	461a      	mov	r2, r3
 8004cda:	6839      	ldr	r1, [r7, #0]
 8004cdc:	68b8      	ldr	r0, [r7, #8]
 8004cde:	f7ff fe17 	bl	8004910 <WIZCHIP_READ_BUF>
   ptr += len;
 8004ce2:	89fa      	ldrh	r2, [r7, #14]
 8004ce4:	88bb      	ldrh	r3, [r7, #4]
 8004ce6:	4413      	add	r3, r2
 8004ce8:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8004cea:	79fb      	ldrb	r3, [r7, #7]
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	3301      	adds	r3, #1
 8004cf0:	00db      	lsls	r3, r3, #3
 8004cf2:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	89fb      	ldrh	r3, [r7, #14]
 8004cfa:	0a1b      	lsrs	r3, r3, #8
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	4619      	mov	r1, r3
 8004d02:	4610      	mov	r0, r2
 8004d04:	f7ff fdb6 	bl	8004874 <WIZCHIP_WRITE>
 8004d08:	79fb      	ldrb	r3, [r7, #7]
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	00db      	lsls	r3, r3, #3
 8004d10:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8004d14:	461a      	mov	r2, r3
 8004d16:	89fb      	ldrh	r3, [r7, #14]
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	4610      	mov	r0, r2
 8004d1e:	f7ff fda9 	bl	8004874 <WIZCHIP_WRITE>
 8004d22:	e000      	b.n	8004d26 <wiz_recv_data+0xb2>
   if(len == 0) return;
 8004d24:	bf00      	nop
}
 8004d26:	3714      	adds	r7, #20
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd90      	pop	{r4, r7, pc}

08004d2c <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8004d2c:	b480      	push	{r7}
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	bf00      	nop
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr

08004d3a <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8004d3a:	b480      	push	{r7}
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	bf00      	nop
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8004d48:	b480      	push	{r7}
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	bf00      	nop
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr

08004d56 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8004d56:	b480      	push	{r7}
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	bf00      	nop
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	4618      	mov	r0, r3
 8004d74:	370c      	adds	r7, #12
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr

08004d7e <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8004d7e:	b480      	push	{r7}
 8004d80:	b083      	sub	sp, #12
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
 8004d86:	460b      	mov	r3, r1
 8004d88:	70fb      	strb	r3, [r7, #3]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	78fa      	ldrb	r2, [r7, #3]
 8004d8e:	701a      	strb	r2, [r3, #0]
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8004d9c:	b480      	push	{r7}
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	2300      	movs	r3, #0
 8004da2:	4618      	mov	r0, r3
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	4603      	mov	r3, r0
 8004db4:	71fb      	strb	r3, [r7, #7]
 8004db6:	bf00      	nop
 8004db8:	370c      	adds	r7, #12
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr
	...

08004dc4 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d002      	beq.n	8004dda <reg_wizchip_cs_cbfunc+0x16>
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d106      	bne.n	8004de8 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8004dda:	4b0a      	ldr	r3, [pc, #40]	; (8004e04 <reg_wizchip_cs_cbfunc+0x40>)
 8004ddc:	4a0a      	ldr	r2, [pc, #40]	; (8004e08 <reg_wizchip_cs_cbfunc+0x44>)
 8004dde:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8004de0:	4b08      	ldr	r3, [pc, #32]	; (8004e04 <reg_wizchip_cs_cbfunc+0x40>)
 8004de2:	4a0a      	ldr	r2, [pc, #40]	; (8004e0c <reg_wizchip_cs_cbfunc+0x48>)
 8004de4:	619a      	str	r2, [r3, #24]
 8004de6:	e006      	b.n	8004df6 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8004de8:	4a06      	ldr	r2, [pc, #24]	; (8004e04 <reg_wizchip_cs_cbfunc+0x40>)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8004dee:	4a05      	ldr	r2, [pc, #20]	; (8004e04 <reg_wizchip_cs_cbfunc+0x40>)
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	6193      	str	r3, [r2, #24]
   }
}
 8004df4:	bf00      	nop
 8004df6:	bf00      	nop
 8004df8:	370c      	adds	r7, #12
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	20000020 	.word	0x20000020
 8004e08:	08004d49 	.word	0x08004d49
 8004e0c:	08004d57 	.word	0x08004d57

08004e10 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8004e1a:	bf00      	nop
 8004e1c:	4b0f      	ldr	r3, [pc, #60]	; (8004e5c <reg_wizchip_spi_cbfunc+0x4c>)
 8004e1e:	881b      	ldrh	r3, [r3, #0]
 8004e20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d0f9      	beq.n	8004e1c <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d002      	beq.n	8004e34 <reg_wizchip_spi_cbfunc+0x24>
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d106      	bne.n	8004e42 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8004e34:	4b09      	ldr	r3, [pc, #36]	; (8004e5c <reg_wizchip_spi_cbfunc+0x4c>)
 8004e36:	4a0a      	ldr	r2, [pc, #40]	; (8004e60 <reg_wizchip_spi_cbfunc+0x50>)
 8004e38:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8004e3a:	4b08      	ldr	r3, [pc, #32]	; (8004e5c <reg_wizchip_spi_cbfunc+0x4c>)
 8004e3c:	4a09      	ldr	r2, [pc, #36]	; (8004e64 <reg_wizchip_spi_cbfunc+0x54>)
 8004e3e:	621a      	str	r2, [r3, #32]
 8004e40:	e006      	b.n	8004e50 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8004e42:	4a06      	ldr	r2, [pc, #24]	; (8004e5c <reg_wizchip_spi_cbfunc+0x4c>)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8004e48:	4a04      	ldr	r2, [pc, #16]	; (8004e5c <reg_wizchip_spi_cbfunc+0x4c>)
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	6213      	str	r3, [r2, #32]
   }
}
 8004e4e:	bf00      	nop
 8004e50:	bf00      	nop
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr
 8004e5c:	20000020 	.word	0x20000020
 8004e60:	08004d9d 	.word	0x08004d9d
 8004e64:	08004dad 	.word	0x08004dad

08004e68 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b086      	sub	sp, #24
 8004e6c:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8004e6e:	1d3b      	adds	r3, r7, #4
 8004e70:	2206      	movs	r2, #6
 8004e72:	4619      	mov	r1, r3
 8004e74:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8004e78:	f7ff fd4a 	bl	8004910 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8004e7c:	f107 0314 	add.w	r3, r7, #20
 8004e80:	2204      	movs	r2, #4
 8004e82:	4619      	mov	r1, r3
 8004e84:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004e88:	f7ff fd42 	bl	8004910 <WIZCHIP_READ_BUF>
 8004e8c:	f107 0310 	add.w	r3, r7, #16
 8004e90:	2204      	movs	r2, #4
 8004e92:	4619      	mov	r1, r3
 8004e94:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8004e98:	f7ff fd3a 	bl	8004910 <WIZCHIP_READ_BUF>
 8004e9c:	f107 030c 	add.w	r3, r7, #12
 8004ea0:	2204      	movs	r2, #4
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8004ea8:	f7ff fd32 	bl	8004910 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8004eac:	2180      	movs	r1, #128	; 0x80
 8004eae:	2000      	movs	r0, #0
 8004eb0:	f7ff fce0 	bl	8004874 <WIZCHIP_WRITE>
   getMR(); // for delay
 8004eb4:	2000      	movs	r0, #0
 8004eb6:	f7ff fc91 	bl	80047dc <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8004eba:	1d3b      	adds	r3, r7, #4
 8004ebc:	2206      	movs	r2, #6
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8004ec4:	f7ff fd84 	bl	80049d0 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8004ec8:	f107 0314 	add.w	r3, r7, #20
 8004ecc:	2204      	movs	r2, #4
 8004ece:	4619      	mov	r1, r3
 8004ed0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004ed4:	f7ff fd7c 	bl	80049d0 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8004ed8:	f107 0310 	add.w	r3, r7, #16
 8004edc:	2204      	movs	r2, #4
 8004ede:	4619      	mov	r1, r3
 8004ee0:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8004ee4:	f7ff fd74 	bl	80049d0 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8004ee8:	f107 030c 	add.w	r3, r7, #12
 8004eec:	2204      	movs	r2, #4
 8004eee:	4619      	mov	r1, r3
 8004ef0:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8004ef4:	f7ff fd6c 	bl	80049d0 <WIZCHIP_WRITE_BUF>
}
 8004ef8:	bf00      	nop
 8004efa:	3718      	adds	r7, #24
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8004f0e:	f7ff ffab 	bl	8004e68 <wizchip_sw_reset>
   if(txsize)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d03b      	beq.n	8004f90 <wizchip_init+0x90>
   {
      tmp = 0;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	73fb      	strb	r3, [r7, #15]
 8004f20:	e015      	b.n	8004f4e <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8004f22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	4413      	add	r3, r2
 8004f2a:	781a      	ldrb	r2, [r3, #0]
 8004f2c:	7bbb      	ldrb	r3, [r7, #14]
 8004f2e:	4413      	add	r3, r2
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8004f34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f38:	2b10      	cmp	r3, #16
 8004f3a:	dd02      	ble.n	8004f42 <wizchip_init+0x42>
 8004f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8004f40:	e066      	b.n	8005010 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004f42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	3301      	adds	r3, #1
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	73fb      	strb	r3, [r7, #15]
 8004f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f52:	2b07      	cmp	r3, #7
 8004f54:	dde5      	ble.n	8004f22 <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004f56:	2300      	movs	r3, #0
 8004f58:	73fb      	strb	r3, [r7, #15]
 8004f5a:	e015      	b.n	8004f88 <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8004f5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	3301      	adds	r3, #1
 8004f64:	00db      	lsls	r3, r3, #3
 8004f66:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	4413      	add	r3, r2
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	4619      	mov	r1, r3
 8004f78:	f7ff fc7c 	bl	8004874 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004f7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	3301      	adds	r3, #1
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	73fb      	strb	r3, [r7, #15]
 8004f88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f8c:	2b07      	cmp	r3, #7
 8004f8e:	dde5      	ble.n	8004f5c <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d03b      	beq.n	800500e <wizchip_init+0x10e>
   {
      tmp = 0;
 8004f96:	2300      	movs	r3, #0
 8004f98:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	73fb      	strb	r3, [r7, #15]
 8004f9e:	e015      	b.n	8004fcc <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8004fa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fa4:	683a      	ldr	r2, [r7, #0]
 8004fa6:	4413      	add	r3, r2
 8004fa8:	781a      	ldrb	r2, [r3, #0]
 8004faa:	7bbb      	ldrb	r3, [r7, #14]
 8004fac:	4413      	add	r3, r2
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8004fb2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004fb6:	2b10      	cmp	r3, #16
 8004fb8:	dd02      	ble.n	8004fc0 <wizchip_init+0xc0>
 8004fba:	f04f 33ff 	mov.w	r3, #4294967295
 8004fbe:	e027      	b.n	8005010 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004fc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	73fb      	strb	r3, [r7, #15]
 8004fcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fd0:	2b07      	cmp	r3, #7
 8004fd2:	dde5      	ble.n	8004fa0 <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	73fb      	strb	r3, [r7, #15]
 8004fd8:	e015      	b.n	8005006 <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8004fda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	00db      	lsls	r3, r3, #3
 8004fe4:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fee:	683a      	ldr	r2, [r7, #0]
 8004ff0:	4413      	add	r3, r2
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	f7ff fc3d 	bl	8004874 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	3301      	adds	r3, #1
 8005002:	b2db      	uxtb	r3, r3
 8005004:	73fb      	strb	r3, [r7, #15]
 8005006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800500a:	2b07      	cmp	r3, #7
 800500c:	dde5      	ble.n	8004fda <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	3710      	adds	r7, #16
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2206      	movs	r2, #6
 8005024:	4619      	mov	r1, r3
 8005026:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800502a:	f7ff fcd1 	bl	80049d0 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	330e      	adds	r3, #14
 8005032:	2204      	movs	r2, #4
 8005034:	4619      	mov	r1, r3
 8005036:	f44f 7080 	mov.w	r0, #256	; 0x100
 800503a:	f7ff fcc9 	bl	80049d0 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	330a      	adds	r3, #10
 8005042:	2204      	movs	r2, #4
 8005044:	4619      	mov	r1, r3
 8005046:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800504a:	f7ff fcc1 	bl	80049d0 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	3306      	adds	r3, #6
 8005052:	2204      	movs	r2, #4
 8005054:	4619      	mov	r1, r3
 8005056:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800505a:	f7ff fcb9 	bl	80049d0 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	7c9a      	ldrb	r2, [r3, #18]
 8005062:	4b0b      	ldr	r3, [pc, #44]	; (8005090 <wizchip_setnetinfo+0x78>)
 8005064:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	7cda      	ldrb	r2, [r3, #19]
 800506a:	4b09      	ldr	r3, [pc, #36]	; (8005090 <wizchip_setnetinfo+0x78>)
 800506c:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	7d1a      	ldrb	r2, [r3, #20]
 8005072:	4b07      	ldr	r3, [pc, #28]	; (8005090 <wizchip_setnetinfo+0x78>)
 8005074:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	7d5a      	ldrb	r2, [r3, #21]
 800507a:	4b05      	ldr	r3, [pc, #20]	; (8005090 <wizchip_setnetinfo+0x78>)
 800507c:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	7d9a      	ldrb	r2, [r3, #22]
 8005082:	4b04      	ldr	r3, [pc, #16]	; (8005094 <wizchip_setnetinfo+0x7c>)
 8005084:	701a      	strb	r2, [r3, #0]
}
 8005086:	bf00      	nop
 8005088:	3708      	adds	r7, #8
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	20000250 	.word	0x20000250
 8005094:	20000254 	.word	0x20000254

08005098 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2206      	movs	r2, #6
 80050a4:	4619      	mov	r1, r3
 80050a6:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80050aa:	f7ff fc31 	bl	8004910 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	330e      	adds	r3, #14
 80050b2:	2204      	movs	r2, #4
 80050b4:	4619      	mov	r1, r3
 80050b6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80050ba:	f7ff fc29 	bl	8004910 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	330a      	adds	r3, #10
 80050c2:	2204      	movs	r2, #4
 80050c4:	4619      	mov	r1, r3
 80050c6:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80050ca:	f7ff fc21 	bl	8004910 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	3306      	adds	r3, #6
 80050d2:	2204      	movs	r2, #4
 80050d4:	4619      	mov	r1, r3
 80050d6:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80050da:	f7ff fc19 	bl	8004910 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 80050de:	4b0c      	ldr	r3, [pc, #48]	; (8005110 <wizchip_getnetinfo+0x78>)
 80050e0:	781a      	ldrb	r2, [r3, #0]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 80050e6:	4b0a      	ldr	r3, [pc, #40]	; (8005110 <wizchip_getnetinfo+0x78>)
 80050e8:	785a      	ldrb	r2, [r3, #1]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 80050ee:	4b08      	ldr	r3, [pc, #32]	; (8005110 <wizchip_getnetinfo+0x78>)
 80050f0:	789a      	ldrb	r2, [r3, #2]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 80050f6:	4b06      	ldr	r3, [pc, #24]	; (8005110 <wizchip_getnetinfo+0x78>)
 80050f8:	78da      	ldrb	r2, [r3, #3]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 80050fe:	4b05      	ldr	r3, [pc, #20]	; (8005114 <wizchip_getnetinfo+0x7c>)
 8005100:	781a      	ldrb	r2, [r3, #0]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	759a      	strb	r2, [r3, #22]
}
 8005106:	bf00      	nop
 8005108:	3708      	adds	r7, #8
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	20000250 	.word	0x20000250
 8005114:	20000254 	.word	0x20000254

08005118 <atoi>:
 8005118:	220a      	movs	r2, #10
 800511a:	2100      	movs	r1, #0
 800511c:	f000 ba8c 	b.w	8005638 <strtol>

08005120 <__errno>:
 8005120:	4b01      	ldr	r3, [pc, #4]	; (8005128 <__errno+0x8>)
 8005122:	6818      	ldr	r0, [r3, #0]
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	2000004c 	.word	0x2000004c

0800512c <exit>:
 800512c:	b508      	push	{r3, lr}
 800512e:	4b07      	ldr	r3, [pc, #28]	; (800514c <exit+0x20>)
 8005130:	4604      	mov	r4, r0
 8005132:	b113      	cbz	r3, 800513a <exit+0xe>
 8005134:	2100      	movs	r1, #0
 8005136:	f3af 8000 	nop.w
 800513a:	4b05      	ldr	r3, [pc, #20]	; (8005150 <exit+0x24>)
 800513c:	6818      	ldr	r0, [r3, #0]
 800513e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005140:	b103      	cbz	r3, 8005144 <exit+0x18>
 8005142:	4798      	blx	r3
 8005144:	4620      	mov	r0, r4
 8005146:	f7fd f99f 	bl	8002488 <_exit>
 800514a:	bf00      	nop
 800514c:	00000000 	.word	0x00000000
 8005150:	080068f4 	.word	0x080068f4

08005154 <__libc_init_array>:
 8005154:	b570      	push	{r4, r5, r6, lr}
 8005156:	4d0d      	ldr	r5, [pc, #52]	; (800518c <__libc_init_array+0x38>)
 8005158:	4c0d      	ldr	r4, [pc, #52]	; (8005190 <__libc_init_array+0x3c>)
 800515a:	1b64      	subs	r4, r4, r5
 800515c:	10a4      	asrs	r4, r4, #2
 800515e:	2600      	movs	r6, #0
 8005160:	42a6      	cmp	r6, r4
 8005162:	d109      	bne.n	8005178 <__libc_init_array+0x24>
 8005164:	4d0b      	ldr	r5, [pc, #44]	; (8005194 <__libc_init_array+0x40>)
 8005166:	4c0c      	ldr	r4, [pc, #48]	; (8005198 <__libc_init_array+0x44>)
 8005168:	f001 fafa 	bl	8006760 <_init>
 800516c:	1b64      	subs	r4, r4, r5
 800516e:	10a4      	asrs	r4, r4, #2
 8005170:	2600      	movs	r6, #0
 8005172:	42a6      	cmp	r6, r4
 8005174:	d105      	bne.n	8005182 <__libc_init_array+0x2e>
 8005176:	bd70      	pop	{r4, r5, r6, pc}
 8005178:	f855 3b04 	ldr.w	r3, [r5], #4
 800517c:	4798      	blx	r3
 800517e:	3601      	adds	r6, #1
 8005180:	e7ee      	b.n	8005160 <__libc_init_array+0xc>
 8005182:	f855 3b04 	ldr.w	r3, [r5], #4
 8005186:	4798      	blx	r3
 8005188:	3601      	adds	r6, #1
 800518a:	e7f2      	b.n	8005172 <__libc_init_array+0x1e>
 800518c:	08006a98 	.word	0x08006a98
 8005190:	08006a98 	.word	0x08006a98
 8005194:	08006a98 	.word	0x08006a98
 8005198:	08006a9c 	.word	0x08006a9c

0800519c <malloc>:
 800519c:	4b02      	ldr	r3, [pc, #8]	; (80051a8 <malloc+0xc>)
 800519e:	4601      	mov	r1, r0
 80051a0:	6818      	ldr	r0, [r3, #0]
 80051a2:	f000 b87f 	b.w	80052a4 <_malloc_r>
 80051a6:	bf00      	nop
 80051a8:	2000004c 	.word	0x2000004c

080051ac <free>:
 80051ac:	4b02      	ldr	r3, [pc, #8]	; (80051b8 <free+0xc>)
 80051ae:	4601      	mov	r1, r0
 80051b0:	6818      	ldr	r0, [r3, #0]
 80051b2:	f000 b80b 	b.w	80051cc <_free_r>
 80051b6:	bf00      	nop
 80051b8:	2000004c 	.word	0x2000004c

080051bc <memset>:
 80051bc:	4402      	add	r2, r0
 80051be:	4603      	mov	r3, r0
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d100      	bne.n	80051c6 <memset+0xa>
 80051c4:	4770      	bx	lr
 80051c6:	f803 1b01 	strb.w	r1, [r3], #1
 80051ca:	e7f9      	b.n	80051c0 <memset+0x4>

080051cc <_free_r>:
 80051cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80051ce:	2900      	cmp	r1, #0
 80051d0:	d044      	beq.n	800525c <_free_r+0x90>
 80051d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051d6:	9001      	str	r0, [sp, #4]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	f1a1 0404 	sub.w	r4, r1, #4
 80051de:	bfb8      	it	lt
 80051e0:	18e4      	addlt	r4, r4, r3
 80051e2:	f000 fd13 	bl	8005c0c <__malloc_lock>
 80051e6:	4a1e      	ldr	r2, [pc, #120]	; (8005260 <_free_r+0x94>)
 80051e8:	9801      	ldr	r0, [sp, #4]
 80051ea:	6813      	ldr	r3, [r2, #0]
 80051ec:	b933      	cbnz	r3, 80051fc <_free_r+0x30>
 80051ee:	6063      	str	r3, [r4, #4]
 80051f0:	6014      	str	r4, [r2, #0]
 80051f2:	b003      	add	sp, #12
 80051f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80051f8:	f000 bd0e 	b.w	8005c18 <__malloc_unlock>
 80051fc:	42a3      	cmp	r3, r4
 80051fe:	d908      	bls.n	8005212 <_free_r+0x46>
 8005200:	6825      	ldr	r5, [r4, #0]
 8005202:	1961      	adds	r1, r4, r5
 8005204:	428b      	cmp	r3, r1
 8005206:	bf01      	itttt	eq
 8005208:	6819      	ldreq	r1, [r3, #0]
 800520a:	685b      	ldreq	r3, [r3, #4]
 800520c:	1949      	addeq	r1, r1, r5
 800520e:	6021      	streq	r1, [r4, #0]
 8005210:	e7ed      	b.n	80051ee <_free_r+0x22>
 8005212:	461a      	mov	r2, r3
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	b10b      	cbz	r3, 800521c <_free_r+0x50>
 8005218:	42a3      	cmp	r3, r4
 800521a:	d9fa      	bls.n	8005212 <_free_r+0x46>
 800521c:	6811      	ldr	r1, [r2, #0]
 800521e:	1855      	adds	r5, r2, r1
 8005220:	42a5      	cmp	r5, r4
 8005222:	d10b      	bne.n	800523c <_free_r+0x70>
 8005224:	6824      	ldr	r4, [r4, #0]
 8005226:	4421      	add	r1, r4
 8005228:	1854      	adds	r4, r2, r1
 800522a:	42a3      	cmp	r3, r4
 800522c:	6011      	str	r1, [r2, #0]
 800522e:	d1e0      	bne.n	80051f2 <_free_r+0x26>
 8005230:	681c      	ldr	r4, [r3, #0]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	6053      	str	r3, [r2, #4]
 8005236:	4421      	add	r1, r4
 8005238:	6011      	str	r1, [r2, #0]
 800523a:	e7da      	b.n	80051f2 <_free_r+0x26>
 800523c:	d902      	bls.n	8005244 <_free_r+0x78>
 800523e:	230c      	movs	r3, #12
 8005240:	6003      	str	r3, [r0, #0]
 8005242:	e7d6      	b.n	80051f2 <_free_r+0x26>
 8005244:	6825      	ldr	r5, [r4, #0]
 8005246:	1961      	adds	r1, r4, r5
 8005248:	428b      	cmp	r3, r1
 800524a:	bf04      	itt	eq
 800524c:	6819      	ldreq	r1, [r3, #0]
 800524e:	685b      	ldreq	r3, [r3, #4]
 8005250:	6063      	str	r3, [r4, #4]
 8005252:	bf04      	itt	eq
 8005254:	1949      	addeq	r1, r1, r5
 8005256:	6021      	streq	r1, [r4, #0]
 8005258:	6054      	str	r4, [r2, #4]
 800525a:	e7ca      	b.n	80051f2 <_free_r+0x26>
 800525c:	b003      	add	sp, #12
 800525e:	bd30      	pop	{r4, r5, pc}
 8005260:	20000258 	.word	0x20000258

08005264 <sbrk_aligned>:
 8005264:	b570      	push	{r4, r5, r6, lr}
 8005266:	4e0e      	ldr	r6, [pc, #56]	; (80052a0 <sbrk_aligned+0x3c>)
 8005268:	460c      	mov	r4, r1
 800526a:	6831      	ldr	r1, [r6, #0]
 800526c:	4605      	mov	r5, r0
 800526e:	b911      	cbnz	r1, 8005276 <sbrk_aligned+0x12>
 8005270:	f000 f930 	bl	80054d4 <_sbrk_r>
 8005274:	6030      	str	r0, [r6, #0]
 8005276:	4621      	mov	r1, r4
 8005278:	4628      	mov	r0, r5
 800527a:	f000 f92b 	bl	80054d4 <_sbrk_r>
 800527e:	1c43      	adds	r3, r0, #1
 8005280:	d00a      	beq.n	8005298 <sbrk_aligned+0x34>
 8005282:	1cc4      	adds	r4, r0, #3
 8005284:	f024 0403 	bic.w	r4, r4, #3
 8005288:	42a0      	cmp	r0, r4
 800528a:	d007      	beq.n	800529c <sbrk_aligned+0x38>
 800528c:	1a21      	subs	r1, r4, r0
 800528e:	4628      	mov	r0, r5
 8005290:	f000 f920 	bl	80054d4 <_sbrk_r>
 8005294:	3001      	adds	r0, #1
 8005296:	d101      	bne.n	800529c <sbrk_aligned+0x38>
 8005298:	f04f 34ff 	mov.w	r4, #4294967295
 800529c:	4620      	mov	r0, r4
 800529e:	bd70      	pop	{r4, r5, r6, pc}
 80052a0:	2000025c 	.word	0x2000025c

080052a4 <_malloc_r>:
 80052a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052a8:	1ccd      	adds	r5, r1, #3
 80052aa:	f025 0503 	bic.w	r5, r5, #3
 80052ae:	3508      	adds	r5, #8
 80052b0:	2d0c      	cmp	r5, #12
 80052b2:	bf38      	it	cc
 80052b4:	250c      	movcc	r5, #12
 80052b6:	2d00      	cmp	r5, #0
 80052b8:	4607      	mov	r7, r0
 80052ba:	db01      	blt.n	80052c0 <_malloc_r+0x1c>
 80052bc:	42a9      	cmp	r1, r5
 80052be:	d905      	bls.n	80052cc <_malloc_r+0x28>
 80052c0:	230c      	movs	r3, #12
 80052c2:	603b      	str	r3, [r7, #0]
 80052c4:	2600      	movs	r6, #0
 80052c6:	4630      	mov	r0, r6
 80052c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052cc:	4e2e      	ldr	r6, [pc, #184]	; (8005388 <_malloc_r+0xe4>)
 80052ce:	f000 fc9d 	bl	8005c0c <__malloc_lock>
 80052d2:	6833      	ldr	r3, [r6, #0]
 80052d4:	461c      	mov	r4, r3
 80052d6:	bb34      	cbnz	r4, 8005326 <_malloc_r+0x82>
 80052d8:	4629      	mov	r1, r5
 80052da:	4638      	mov	r0, r7
 80052dc:	f7ff ffc2 	bl	8005264 <sbrk_aligned>
 80052e0:	1c43      	adds	r3, r0, #1
 80052e2:	4604      	mov	r4, r0
 80052e4:	d14d      	bne.n	8005382 <_malloc_r+0xde>
 80052e6:	6834      	ldr	r4, [r6, #0]
 80052e8:	4626      	mov	r6, r4
 80052ea:	2e00      	cmp	r6, #0
 80052ec:	d140      	bne.n	8005370 <_malloc_r+0xcc>
 80052ee:	6823      	ldr	r3, [r4, #0]
 80052f0:	4631      	mov	r1, r6
 80052f2:	4638      	mov	r0, r7
 80052f4:	eb04 0803 	add.w	r8, r4, r3
 80052f8:	f000 f8ec 	bl	80054d4 <_sbrk_r>
 80052fc:	4580      	cmp	r8, r0
 80052fe:	d13a      	bne.n	8005376 <_malloc_r+0xd2>
 8005300:	6821      	ldr	r1, [r4, #0]
 8005302:	3503      	adds	r5, #3
 8005304:	1a6d      	subs	r5, r5, r1
 8005306:	f025 0503 	bic.w	r5, r5, #3
 800530a:	3508      	adds	r5, #8
 800530c:	2d0c      	cmp	r5, #12
 800530e:	bf38      	it	cc
 8005310:	250c      	movcc	r5, #12
 8005312:	4629      	mov	r1, r5
 8005314:	4638      	mov	r0, r7
 8005316:	f7ff ffa5 	bl	8005264 <sbrk_aligned>
 800531a:	3001      	adds	r0, #1
 800531c:	d02b      	beq.n	8005376 <_malloc_r+0xd2>
 800531e:	6823      	ldr	r3, [r4, #0]
 8005320:	442b      	add	r3, r5
 8005322:	6023      	str	r3, [r4, #0]
 8005324:	e00e      	b.n	8005344 <_malloc_r+0xa0>
 8005326:	6822      	ldr	r2, [r4, #0]
 8005328:	1b52      	subs	r2, r2, r5
 800532a:	d41e      	bmi.n	800536a <_malloc_r+0xc6>
 800532c:	2a0b      	cmp	r2, #11
 800532e:	d916      	bls.n	800535e <_malloc_r+0xba>
 8005330:	1961      	adds	r1, r4, r5
 8005332:	42a3      	cmp	r3, r4
 8005334:	6025      	str	r5, [r4, #0]
 8005336:	bf18      	it	ne
 8005338:	6059      	strne	r1, [r3, #4]
 800533a:	6863      	ldr	r3, [r4, #4]
 800533c:	bf08      	it	eq
 800533e:	6031      	streq	r1, [r6, #0]
 8005340:	5162      	str	r2, [r4, r5]
 8005342:	604b      	str	r3, [r1, #4]
 8005344:	4638      	mov	r0, r7
 8005346:	f104 060b 	add.w	r6, r4, #11
 800534a:	f000 fc65 	bl	8005c18 <__malloc_unlock>
 800534e:	f026 0607 	bic.w	r6, r6, #7
 8005352:	1d23      	adds	r3, r4, #4
 8005354:	1af2      	subs	r2, r6, r3
 8005356:	d0b6      	beq.n	80052c6 <_malloc_r+0x22>
 8005358:	1b9b      	subs	r3, r3, r6
 800535a:	50a3      	str	r3, [r4, r2]
 800535c:	e7b3      	b.n	80052c6 <_malloc_r+0x22>
 800535e:	6862      	ldr	r2, [r4, #4]
 8005360:	42a3      	cmp	r3, r4
 8005362:	bf0c      	ite	eq
 8005364:	6032      	streq	r2, [r6, #0]
 8005366:	605a      	strne	r2, [r3, #4]
 8005368:	e7ec      	b.n	8005344 <_malloc_r+0xa0>
 800536a:	4623      	mov	r3, r4
 800536c:	6864      	ldr	r4, [r4, #4]
 800536e:	e7b2      	b.n	80052d6 <_malloc_r+0x32>
 8005370:	4634      	mov	r4, r6
 8005372:	6876      	ldr	r6, [r6, #4]
 8005374:	e7b9      	b.n	80052ea <_malloc_r+0x46>
 8005376:	230c      	movs	r3, #12
 8005378:	603b      	str	r3, [r7, #0]
 800537a:	4638      	mov	r0, r7
 800537c:	f000 fc4c 	bl	8005c18 <__malloc_unlock>
 8005380:	e7a1      	b.n	80052c6 <_malloc_r+0x22>
 8005382:	6025      	str	r5, [r4, #0]
 8005384:	e7de      	b.n	8005344 <_malloc_r+0xa0>
 8005386:	bf00      	nop
 8005388:	20000258 	.word	0x20000258

0800538c <iprintf>:
 800538c:	b40f      	push	{r0, r1, r2, r3}
 800538e:	4b0a      	ldr	r3, [pc, #40]	; (80053b8 <iprintf+0x2c>)
 8005390:	b513      	push	{r0, r1, r4, lr}
 8005392:	681c      	ldr	r4, [r3, #0]
 8005394:	b124      	cbz	r4, 80053a0 <iprintf+0x14>
 8005396:	69a3      	ldr	r3, [r4, #24]
 8005398:	b913      	cbnz	r3, 80053a0 <iprintf+0x14>
 800539a:	4620      	mov	r0, r4
 800539c:	f000 fb30 	bl	8005a00 <__sinit>
 80053a0:	ab05      	add	r3, sp, #20
 80053a2:	9a04      	ldr	r2, [sp, #16]
 80053a4:	68a1      	ldr	r1, [r4, #8]
 80053a6:	9301      	str	r3, [sp, #4]
 80053a8:	4620      	mov	r0, r4
 80053aa:	f000 fdc1 	bl	8005f30 <_vfiprintf_r>
 80053ae:	b002      	add	sp, #8
 80053b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053b4:	b004      	add	sp, #16
 80053b6:	4770      	bx	lr
 80053b8:	2000004c 	.word	0x2000004c

080053bc <putchar>:
 80053bc:	4b09      	ldr	r3, [pc, #36]	; (80053e4 <putchar+0x28>)
 80053be:	b513      	push	{r0, r1, r4, lr}
 80053c0:	681c      	ldr	r4, [r3, #0]
 80053c2:	4601      	mov	r1, r0
 80053c4:	b134      	cbz	r4, 80053d4 <putchar+0x18>
 80053c6:	69a3      	ldr	r3, [r4, #24]
 80053c8:	b923      	cbnz	r3, 80053d4 <putchar+0x18>
 80053ca:	9001      	str	r0, [sp, #4]
 80053cc:	4620      	mov	r0, r4
 80053ce:	f000 fb17 	bl	8005a00 <__sinit>
 80053d2:	9901      	ldr	r1, [sp, #4]
 80053d4:	68a2      	ldr	r2, [r4, #8]
 80053d6:	4620      	mov	r0, r4
 80053d8:	b002      	add	sp, #8
 80053da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053de:	f001 b86b 	b.w	80064b8 <_putc_r>
 80053e2:	bf00      	nop
 80053e4:	2000004c 	.word	0x2000004c

080053e8 <_puts_r>:
 80053e8:	b570      	push	{r4, r5, r6, lr}
 80053ea:	460e      	mov	r6, r1
 80053ec:	4605      	mov	r5, r0
 80053ee:	b118      	cbz	r0, 80053f8 <_puts_r+0x10>
 80053f0:	6983      	ldr	r3, [r0, #24]
 80053f2:	b90b      	cbnz	r3, 80053f8 <_puts_r+0x10>
 80053f4:	f000 fb04 	bl	8005a00 <__sinit>
 80053f8:	69ab      	ldr	r3, [r5, #24]
 80053fa:	68ac      	ldr	r4, [r5, #8]
 80053fc:	b913      	cbnz	r3, 8005404 <_puts_r+0x1c>
 80053fe:	4628      	mov	r0, r5
 8005400:	f000 fafe 	bl	8005a00 <__sinit>
 8005404:	4b2c      	ldr	r3, [pc, #176]	; (80054b8 <_puts_r+0xd0>)
 8005406:	429c      	cmp	r4, r3
 8005408:	d120      	bne.n	800544c <_puts_r+0x64>
 800540a:	686c      	ldr	r4, [r5, #4]
 800540c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800540e:	07db      	lsls	r3, r3, #31
 8005410:	d405      	bmi.n	800541e <_puts_r+0x36>
 8005412:	89a3      	ldrh	r3, [r4, #12]
 8005414:	0598      	lsls	r0, r3, #22
 8005416:	d402      	bmi.n	800541e <_puts_r+0x36>
 8005418:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800541a:	f000 fb8f 	bl	8005b3c <__retarget_lock_acquire_recursive>
 800541e:	89a3      	ldrh	r3, [r4, #12]
 8005420:	0719      	lsls	r1, r3, #28
 8005422:	d51d      	bpl.n	8005460 <_puts_r+0x78>
 8005424:	6923      	ldr	r3, [r4, #16]
 8005426:	b1db      	cbz	r3, 8005460 <_puts_r+0x78>
 8005428:	3e01      	subs	r6, #1
 800542a:	68a3      	ldr	r3, [r4, #8]
 800542c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005430:	3b01      	subs	r3, #1
 8005432:	60a3      	str	r3, [r4, #8]
 8005434:	bb39      	cbnz	r1, 8005486 <_puts_r+0x9e>
 8005436:	2b00      	cmp	r3, #0
 8005438:	da38      	bge.n	80054ac <_puts_r+0xc4>
 800543a:	4622      	mov	r2, r4
 800543c:	210a      	movs	r1, #10
 800543e:	4628      	mov	r0, r5
 8005440:	f000 f904 	bl	800564c <__swbuf_r>
 8005444:	3001      	adds	r0, #1
 8005446:	d011      	beq.n	800546c <_puts_r+0x84>
 8005448:	250a      	movs	r5, #10
 800544a:	e011      	b.n	8005470 <_puts_r+0x88>
 800544c:	4b1b      	ldr	r3, [pc, #108]	; (80054bc <_puts_r+0xd4>)
 800544e:	429c      	cmp	r4, r3
 8005450:	d101      	bne.n	8005456 <_puts_r+0x6e>
 8005452:	68ac      	ldr	r4, [r5, #8]
 8005454:	e7da      	b.n	800540c <_puts_r+0x24>
 8005456:	4b1a      	ldr	r3, [pc, #104]	; (80054c0 <_puts_r+0xd8>)
 8005458:	429c      	cmp	r4, r3
 800545a:	bf08      	it	eq
 800545c:	68ec      	ldreq	r4, [r5, #12]
 800545e:	e7d5      	b.n	800540c <_puts_r+0x24>
 8005460:	4621      	mov	r1, r4
 8005462:	4628      	mov	r0, r5
 8005464:	f000 f944 	bl	80056f0 <__swsetup_r>
 8005468:	2800      	cmp	r0, #0
 800546a:	d0dd      	beq.n	8005428 <_puts_r+0x40>
 800546c:	f04f 35ff 	mov.w	r5, #4294967295
 8005470:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005472:	07da      	lsls	r2, r3, #31
 8005474:	d405      	bmi.n	8005482 <_puts_r+0x9a>
 8005476:	89a3      	ldrh	r3, [r4, #12]
 8005478:	059b      	lsls	r3, r3, #22
 800547a:	d402      	bmi.n	8005482 <_puts_r+0x9a>
 800547c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800547e:	f000 fb5e 	bl	8005b3e <__retarget_lock_release_recursive>
 8005482:	4628      	mov	r0, r5
 8005484:	bd70      	pop	{r4, r5, r6, pc}
 8005486:	2b00      	cmp	r3, #0
 8005488:	da04      	bge.n	8005494 <_puts_r+0xac>
 800548a:	69a2      	ldr	r2, [r4, #24]
 800548c:	429a      	cmp	r2, r3
 800548e:	dc06      	bgt.n	800549e <_puts_r+0xb6>
 8005490:	290a      	cmp	r1, #10
 8005492:	d004      	beq.n	800549e <_puts_r+0xb6>
 8005494:	6823      	ldr	r3, [r4, #0]
 8005496:	1c5a      	adds	r2, r3, #1
 8005498:	6022      	str	r2, [r4, #0]
 800549a:	7019      	strb	r1, [r3, #0]
 800549c:	e7c5      	b.n	800542a <_puts_r+0x42>
 800549e:	4622      	mov	r2, r4
 80054a0:	4628      	mov	r0, r5
 80054a2:	f000 f8d3 	bl	800564c <__swbuf_r>
 80054a6:	3001      	adds	r0, #1
 80054a8:	d1bf      	bne.n	800542a <_puts_r+0x42>
 80054aa:	e7df      	b.n	800546c <_puts_r+0x84>
 80054ac:	6823      	ldr	r3, [r4, #0]
 80054ae:	250a      	movs	r5, #10
 80054b0:	1c5a      	adds	r2, r3, #1
 80054b2:	6022      	str	r2, [r4, #0]
 80054b4:	701d      	strb	r5, [r3, #0]
 80054b6:	e7db      	b.n	8005470 <_puts_r+0x88>
 80054b8:	08006a1c 	.word	0x08006a1c
 80054bc:	08006a3c 	.word	0x08006a3c
 80054c0:	080069fc 	.word	0x080069fc

080054c4 <puts>:
 80054c4:	4b02      	ldr	r3, [pc, #8]	; (80054d0 <puts+0xc>)
 80054c6:	4601      	mov	r1, r0
 80054c8:	6818      	ldr	r0, [r3, #0]
 80054ca:	f7ff bf8d 	b.w	80053e8 <_puts_r>
 80054ce:	bf00      	nop
 80054d0:	2000004c 	.word	0x2000004c

080054d4 <_sbrk_r>:
 80054d4:	b538      	push	{r3, r4, r5, lr}
 80054d6:	4d06      	ldr	r5, [pc, #24]	; (80054f0 <_sbrk_r+0x1c>)
 80054d8:	2300      	movs	r3, #0
 80054da:	4604      	mov	r4, r0
 80054dc:	4608      	mov	r0, r1
 80054de:	602b      	str	r3, [r5, #0]
 80054e0:	f7fd f84a 	bl	8002578 <_sbrk>
 80054e4:	1c43      	adds	r3, r0, #1
 80054e6:	d102      	bne.n	80054ee <_sbrk_r+0x1a>
 80054e8:	682b      	ldr	r3, [r5, #0]
 80054ea:	b103      	cbz	r3, 80054ee <_sbrk_r+0x1a>
 80054ec:	6023      	str	r3, [r4, #0]
 80054ee:	bd38      	pop	{r3, r4, r5, pc}
 80054f0:	20000264 	.word	0x20000264

080054f4 <siprintf>:
 80054f4:	b40e      	push	{r1, r2, r3}
 80054f6:	b500      	push	{lr}
 80054f8:	b09c      	sub	sp, #112	; 0x70
 80054fa:	ab1d      	add	r3, sp, #116	; 0x74
 80054fc:	9002      	str	r0, [sp, #8]
 80054fe:	9006      	str	r0, [sp, #24]
 8005500:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005504:	4809      	ldr	r0, [pc, #36]	; (800552c <siprintf+0x38>)
 8005506:	9107      	str	r1, [sp, #28]
 8005508:	9104      	str	r1, [sp, #16]
 800550a:	4909      	ldr	r1, [pc, #36]	; (8005530 <siprintf+0x3c>)
 800550c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005510:	9105      	str	r1, [sp, #20]
 8005512:	6800      	ldr	r0, [r0, #0]
 8005514:	9301      	str	r3, [sp, #4]
 8005516:	a902      	add	r1, sp, #8
 8005518:	f000 fbe0 	bl	8005cdc <_svfiprintf_r>
 800551c:	9b02      	ldr	r3, [sp, #8]
 800551e:	2200      	movs	r2, #0
 8005520:	701a      	strb	r2, [r3, #0]
 8005522:	b01c      	add	sp, #112	; 0x70
 8005524:	f85d eb04 	ldr.w	lr, [sp], #4
 8005528:	b003      	add	sp, #12
 800552a:	4770      	bx	lr
 800552c:	2000004c 	.word	0x2000004c
 8005530:	ffff0208 	.word	0xffff0208

08005534 <_strtol_l.constprop.0>:
 8005534:	2b01      	cmp	r3, #1
 8005536:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800553a:	d001      	beq.n	8005540 <_strtol_l.constprop.0+0xc>
 800553c:	2b24      	cmp	r3, #36	; 0x24
 800553e:	d906      	bls.n	800554e <_strtol_l.constprop.0+0x1a>
 8005540:	f7ff fdee 	bl	8005120 <__errno>
 8005544:	2316      	movs	r3, #22
 8005546:	6003      	str	r3, [r0, #0]
 8005548:	2000      	movs	r0, #0
 800554a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800554e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005634 <_strtol_l.constprop.0+0x100>
 8005552:	460d      	mov	r5, r1
 8005554:	462e      	mov	r6, r5
 8005556:	f815 4b01 	ldrb.w	r4, [r5], #1
 800555a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800555e:	f017 0708 	ands.w	r7, r7, #8
 8005562:	d1f7      	bne.n	8005554 <_strtol_l.constprop.0+0x20>
 8005564:	2c2d      	cmp	r4, #45	; 0x2d
 8005566:	d132      	bne.n	80055ce <_strtol_l.constprop.0+0x9a>
 8005568:	782c      	ldrb	r4, [r5, #0]
 800556a:	2701      	movs	r7, #1
 800556c:	1cb5      	adds	r5, r6, #2
 800556e:	2b00      	cmp	r3, #0
 8005570:	d05b      	beq.n	800562a <_strtol_l.constprop.0+0xf6>
 8005572:	2b10      	cmp	r3, #16
 8005574:	d109      	bne.n	800558a <_strtol_l.constprop.0+0x56>
 8005576:	2c30      	cmp	r4, #48	; 0x30
 8005578:	d107      	bne.n	800558a <_strtol_l.constprop.0+0x56>
 800557a:	782c      	ldrb	r4, [r5, #0]
 800557c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005580:	2c58      	cmp	r4, #88	; 0x58
 8005582:	d14d      	bne.n	8005620 <_strtol_l.constprop.0+0xec>
 8005584:	786c      	ldrb	r4, [r5, #1]
 8005586:	2310      	movs	r3, #16
 8005588:	3502      	adds	r5, #2
 800558a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800558e:	f108 38ff 	add.w	r8, r8, #4294967295
 8005592:	f04f 0c00 	mov.w	ip, #0
 8005596:	fbb8 f9f3 	udiv	r9, r8, r3
 800559a:	4666      	mov	r6, ip
 800559c:	fb03 8a19 	mls	sl, r3, r9, r8
 80055a0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80055a4:	f1be 0f09 	cmp.w	lr, #9
 80055a8:	d816      	bhi.n	80055d8 <_strtol_l.constprop.0+0xa4>
 80055aa:	4674      	mov	r4, lr
 80055ac:	42a3      	cmp	r3, r4
 80055ae:	dd24      	ble.n	80055fa <_strtol_l.constprop.0+0xc6>
 80055b0:	f1bc 0f00 	cmp.w	ip, #0
 80055b4:	db1e      	blt.n	80055f4 <_strtol_l.constprop.0+0xc0>
 80055b6:	45b1      	cmp	r9, r6
 80055b8:	d31c      	bcc.n	80055f4 <_strtol_l.constprop.0+0xc0>
 80055ba:	d101      	bne.n	80055c0 <_strtol_l.constprop.0+0x8c>
 80055bc:	45a2      	cmp	sl, r4
 80055be:	db19      	blt.n	80055f4 <_strtol_l.constprop.0+0xc0>
 80055c0:	fb06 4603 	mla	r6, r6, r3, r4
 80055c4:	f04f 0c01 	mov.w	ip, #1
 80055c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80055cc:	e7e8      	b.n	80055a0 <_strtol_l.constprop.0+0x6c>
 80055ce:	2c2b      	cmp	r4, #43	; 0x2b
 80055d0:	bf04      	itt	eq
 80055d2:	782c      	ldrbeq	r4, [r5, #0]
 80055d4:	1cb5      	addeq	r5, r6, #2
 80055d6:	e7ca      	b.n	800556e <_strtol_l.constprop.0+0x3a>
 80055d8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80055dc:	f1be 0f19 	cmp.w	lr, #25
 80055e0:	d801      	bhi.n	80055e6 <_strtol_l.constprop.0+0xb2>
 80055e2:	3c37      	subs	r4, #55	; 0x37
 80055e4:	e7e2      	b.n	80055ac <_strtol_l.constprop.0+0x78>
 80055e6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80055ea:	f1be 0f19 	cmp.w	lr, #25
 80055ee:	d804      	bhi.n	80055fa <_strtol_l.constprop.0+0xc6>
 80055f0:	3c57      	subs	r4, #87	; 0x57
 80055f2:	e7db      	b.n	80055ac <_strtol_l.constprop.0+0x78>
 80055f4:	f04f 3cff 	mov.w	ip, #4294967295
 80055f8:	e7e6      	b.n	80055c8 <_strtol_l.constprop.0+0x94>
 80055fa:	f1bc 0f00 	cmp.w	ip, #0
 80055fe:	da05      	bge.n	800560c <_strtol_l.constprop.0+0xd8>
 8005600:	2322      	movs	r3, #34	; 0x22
 8005602:	6003      	str	r3, [r0, #0]
 8005604:	4646      	mov	r6, r8
 8005606:	b942      	cbnz	r2, 800561a <_strtol_l.constprop.0+0xe6>
 8005608:	4630      	mov	r0, r6
 800560a:	e79e      	b.n	800554a <_strtol_l.constprop.0+0x16>
 800560c:	b107      	cbz	r7, 8005610 <_strtol_l.constprop.0+0xdc>
 800560e:	4276      	negs	r6, r6
 8005610:	2a00      	cmp	r2, #0
 8005612:	d0f9      	beq.n	8005608 <_strtol_l.constprop.0+0xd4>
 8005614:	f1bc 0f00 	cmp.w	ip, #0
 8005618:	d000      	beq.n	800561c <_strtol_l.constprop.0+0xe8>
 800561a:	1e69      	subs	r1, r5, #1
 800561c:	6011      	str	r1, [r2, #0]
 800561e:	e7f3      	b.n	8005608 <_strtol_l.constprop.0+0xd4>
 8005620:	2430      	movs	r4, #48	; 0x30
 8005622:	2b00      	cmp	r3, #0
 8005624:	d1b1      	bne.n	800558a <_strtol_l.constprop.0+0x56>
 8005626:	2308      	movs	r3, #8
 8005628:	e7af      	b.n	800558a <_strtol_l.constprop.0+0x56>
 800562a:	2c30      	cmp	r4, #48	; 0x30
 800562c:	d0a5      	beq.n	800557a <_strtol_l.constprop.0+0x46>
 800562e:	230a      	movs	r3, #10
 8005630:	e7ab      	b.n	800558a <_strtol_l.constprop.0+0x56>
 8005632:	bf00      	nop
 8005634:	080068f9 	.word	0x080068f9

08005638 <strtol>:
 8005638:	4613      	mov	r3, r2
 800563a:	460a      	mov	r2, r1
 800563c:	4601      	mov	r1, r0
 800563e:	4802      	ldr	r0, [pc, #8]	; (8005648 <strtol+0x10>)
 8005640:	6800      	ldr	r0, [r0, #0]
 8005642:	f7ff bf77 	b.w	8005534 <_strtol_l.constprop.0>
 8005646:	bf00      	nop
 8005648:	2000004c 	.word	0x2000004c

0800564c <__swbuf_r>:
 800564c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800564e:	460e      	mov	r6, r1
 8005650:	4614      	mov	r4, r2
 8005652:	4605      	mov	r5, r0
 8005654:	b118      	cbz	r0, 800565e <__swbuf_r+0x12>
 8005656:	6983      	ldr	r3, [r0, #24]
 8005658:	b90b      	cbnz	r3, 800565e <__swbuf_r+0x12>
 800565a:	f000 f9d1 	bl	8005a00 <__sinit>
 800565e:	4b21      	ldr	r3, [pc, #132]	; (80056e4 <__swbuf_r+0x98>)
 8005660:	429c      	cmp	r4, r3
 8005662:	d12b      	bne.n	80056bc <__swbuf_r+0x70>
 8005664:	686c      	ldr	r4, [r5, #4]
 8005666:	69a3      	ldr	r3, [r4, #24]
 8005668:	60a3      	str	r3, [r4, #8]
 800566a:	89a3      	ldrh	r3, [r4, #12]
 800566c:	071a      	lsls	r2, r3, #28
 800566e:	d52f      	bpl.n	80056d0 <__swbuf_r+0x84>
 8005670:	6923      	ldr	r3, [r4, #16]
 8005672:	b36b      	cbz	r3, 80056d0 <__swbuf_r+0x84>
 8005674:	6923      	ldr	r3, [r4, #16]
 8005676:	6820      	ldr	r0, [r4, #0]
 8005678:	1ac0      	subs	r0, r0, r3
 800567a:	6963      	ldr	r3, [r4, #20]
 800567c:	b2f6      	uxtb	r6, r6
 800567e:	4283      	cmp	r3, r0
 8005680:	4637      	mov	r7, r6
 8005682:	dc04      	bgt.n	800568e <__swbuf_r+0x42>
 8005684:	4621      	mov	r1, r4
 8005686:	4628      	mov	r0, r5
 8005688:	f000 f926 	bl	80058d8 <_fflush_r>
 800568c:	bb30      	cbnz	r0, 80056dc <__swbuf_r+0x90>
 800568e:	68a3      	ldr	r3, [r4, #8]
 8005690:	3b01      	subs	r3, #1
 8005692:	60a3      	str	r3, [r4, #8]
 8005694:	6823      	ldr	r3, [r4, #0]
 8005696:	1c5a      	adds	r2, r3, #1
 8005698:	6022      	str	r2, [r4, #0]
 800569a:	701e      	strb	r6, [r3, #0]
 800569c:	6963      	ldr	r3, [r4, #20]
 800569e:	3001      	adds	r0, #1
 80056a0:	4283      	cmp	r3, r0
 80056a2:	d004      	beq.n	80056ae <__swbuf_r+0x62>
 80056a4:	89a3      	ldrh	r3, [r4, #12]
 80056a6:	07db      	lsls	r3, r3, #31
 80056a8:	d506      	bpl.n	80056b8 <__swbuf_r+0x6c>
 80056aa:	2e0a      	cmp	r6, #10
 80056ac:	d104      	bne.n	80056b8 <__swbuf_r+0x6c>
 80056ae:	4621      	mov	r1, r4
 80056b0:	4628      	mov	r0, r5
 80056b2:	f000 f911 	bl	80058d8 <_fflush_r>
 80056b6:	b988      	cbnz	r0, 80056dc <__swbuf_r+0x90>
 80056b8:	4638      	mov	r0, r7
 80056ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056bc:	4b0a      	ldr	r3, [pc, #40]	; (80056e8 <__swbuf_r+0x9c>)
 80056be:	429c      	cmp	r4, r3
 80056c0:	d101      	bne.n	80056c6 <__swbuf_r+0x7a>
 80056c2:	68ac      	ldr	r4, [r5, #8]
 80056c4:	e7cf      	b.n	8005666 <__swbuf_r+0x1a>
 80056c6:	4b09      	ldr	r3, [pc, #36]	; (80056ec <__swbuf_r+0xa0>)
 80056c8:	429c      	cmp	r4, r3
 80056ca:	bf08      	it	eq
 80056cc:	68ec      	ldreq	r4, [r5, #12]
 80056ce:	e7ca      	b.n	8005666 <__swbuf_r+0x1a>
 80056d0:	4621      	mov	r1, r4
 80056d2:	4628      	mov	r0, r5
 80056d4:	f000 f80c 	bl	80056f0 <__swsetup_r>
 80056d8:	2800      	cmp	r0, #0
 80056da:	d0cb      	beq.n	8005674 <__swbuf_r+0x28>
 80056dc:	f04f 37ff 	mov.w	r7, #4294967295
 80056e0:	e7ea      	b.n	80056b8 <__swbuf_r+0x6c>
 80056e2:	bf00      	nop
 80056e4:	08006a1c 	.word	0x08006a1c
 80056e8:	08006a3c 	.word	0x08006a3c
 80056ec:	080069fc 	.word	0x080069fc

080056f0 <__swsetup_r>:
 80056f0:	4b32      	ldr	r3, [pc, #200]	; (80057bc <__swsetup_r+0xcc>)
 80056f2:	b570      	push	{r4, r5, r6, lr}
 80056f4:	681d      	ldr	r5, [r3, #0]
 80056f6:	4606      	mov	r6, r0
 80056f8:	460c      	mov	r4, r1
 80056fa:	b125      	cbz	r5, 8005706 <__swsetup_r+0x16>
 80056fc:	69ab      	ldr	r3, [r5, #24]
 80056fe:	b913      	cbnz	r3, 8005706 <__swsetup_r+0x16>
 8005700:	4628      	mov	r0, r5
 8005702:	f000 f97d 	bl	8005a00 <__sinit>
 8005706:	4b2e      	ldr	r3, [pc, #184]	; (80057c0 <__swsetup_r+0xd0>)
 8005708:	429c      	cmp	r4, r3
 800570a:	d10f      	bne.n	800572c <__swsetup_r+0x3c>
 800570c:	686c      	ldr	r4, [r5, #4]
 800570e:	89a3      	ldrh	r3, [r4, #12]
 8005710:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005714:	0719      	lsls	r1, r3, #28
 8005716:	d42c      	bmi.n	8005772 <__swsetup_r+0x82>
 8005718:	06dd      	lsls	r5, r3, #27
 800571a:	d411      	bmi.n	8005740 <__swsetup_r+0x50>
 800571c:	2309      	movs	r3, #9
 800571e:	6033      	str	r3, [r6, #0]
 8005720:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005724:	81a3      	strh	r3, [r4, #12]
 8005726:	f04f 30ff 	mov.w	r0, #4294967295
 800572a:	e03e      	b.n	80057aa <__swsetup_r+0xba>
 800572c:	4b25      	ldr	r3, [pc, #148]	; (80057c4 <__swsetup_r+0xd4>)
 800572e:	429c      	cmp	r4, r3
 8005730:	d101      	bne.n	8005736 <__swsetup_r+0x46>
 8005732:	68ac      	ldr	r4, [r5, #8]
 8005734:	e7eb      	b.n	800570e <__swsetup_r+0x1e>
 8005736:	4b24      	ldr	r3, [pc, #144]	; (80057c8 <__swsetup_r+0xd8>)
 8005738:	429c      	cmp	r4, r3
 800573a:	bf08      	it	eq
 800573c:	68ec      	ldreq	r4, [r5, #12]
 800573e:	e7e6      	b.n	800570e <__swsetup_r+0x1e>
 8005740:	0758      	lsls	r0, r3, #29
 8005742:	d512      	bpl.n	800576a <__swsetup_r+0x7a>
 8005744:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005746:	b141      	cbz	r1, 800575a <__swsetup_r+0x6a>
 8005748:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800574c:	4299      	cmp	r1, r3
 800574e:	d002      	beq.n	8005756 <__swsetup_r+0x66>
 8005750:	4630      	mov	r0, r6
 8005752:	f7ff fd3b 	bl	80051cc <_free_r>
 8005756:	2300      	movs	r3, #0
 8005758:	6363      	str	r3, [r4, #52]	; 0x34
 800575a:	89a3      	ldrh	r3, [r4, #12]
 800575c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005760:	81a3      	strh	r3, [r4, #12]
 8005762:	2300      	movs	r3, #0
 8005764:	6063      	str	r3, [r4, #4]
 8005766:	6923      	ldr	r3, [r4, #16]
 8005768:	6023      	str	r3, [r4, #0]
 800576a:	89a3      	ldrh	r3, [r4, #12]
 800576c:	f043 0308 	orr.w	r3, r3, #8
 8005770:	81a3      	strh	r3, [r4, #12]
 8005772:	6923      	ldr	r3, [r4, #16]
 8005774:	b94b      	cbnz	r3, 800578a <__swsetup_r+0x9a>
 8005776:	89a3      	ldrh	r3, [r4, #12]
 8005778:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800577c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005780:	d003      	beq.n	800578a <__swsetup_r+0x9a>
 8005782:	4621      	mov	r1, r4
 8005784:	4630      	mov	r0, r6
 8005786:	f000 fa01 	bl	8005b8c <__smakebuf_r>
 800578a:	89a0      	ldrh	r0, [r4, #12]
 800578c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005790:	f010 0301 	ands.w	r3, r0, #1
 8005794:	d00a      	beq.n	80057ac <__swsetup_r+0xbc>
 8005796:	2300      	movs	r3, #0
 8005798:	60a3      	str	r3, [r4, #8]
 800579a:	6963      	ldr	r3, [r4, #20]
 800579c:	425b      	negs	r3, r3
 800579e:	61a3      	str	r3, [r4, #24]
 80057a0:	6923      	ldr	r3, [r4, #16]
 80057a2:	b943      	cbnz	r3, 80057b6 <__swsetup_r+0xc6>
 80057a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80057a8:	d1ba      	bne.n	8005720 <__swsetup_r+0x30>
 80057aa:	bd70      	pop	{r4, r5, r6, pc}
 80057ac:	0781      	lsls	r1, r0, #30
 80057ae:	bf58      	it	pl
 80057b0:	6963      	ldrpl	r3, [r4, #20]
 80057b2:	60a3      	str	r3, [r4, #8]
 80057b4:	e7f4      	b.n	80057a0 <__swsetup_r+0xb0>
 80057b6:	2000      	movs	r0, #0
 80057b8:	e7f7      	b.n	80057aa <__swsetup_r+0xba>
 80057ba:	bf00      	nop
 80057bc:	2000004c 	.word	0x2000004c
 80057c0:	08006a1c 	.word	0x08006a1c
 80057c4:	08006a3c 	.word	0x08006a3c
 80057c8:	080069fc 	.word	0x080069fc

080057cc <__sflush_r>:
 80057cc:	898a      	ldrh	r2, [r1, #12]
 80057ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057d2:	4605      	mov	r5, r0
 80057d4:	0710      	lsls	r0, r2, #28
 80057d6:	460c      	mov	r4, r1
 80057d8:	d458      	bmi.n	800588c <__sflush_r+0xc0>
 80057da:	684b      	ldr	r3, [r1, #4]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	dc05      	bgt.n	80057ec <__sflush_r+0x20>
 80057e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	dc02      	bgt.n	80057ec <__sflush_r+0x20>
 80057e6:	2000      	movs	r0, #0
 80057e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80057ee:	2e00      	cmp	r6, #0
 80057f0:	d0f9      	beq.n	80057e6 <__sflush_r+0x1a>
 80057f2:	2300      	movs	r3, #0
 80057f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80057f8:	682f      	ldr	r7, [r5, #0]
 80057fa:	602b      	str	r3, [r5, #0]
 80057fc:	d032      	beq.n	8005864 <__sflush_r+0x98>
 80057fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005800:	89a3      	ldrh	r3, [r4, #12]
 8005802:	075a      	lsls	r2, r3, #29
 8005804:	d505      	bpl.n	8005812 <__sflush_r+0x46>
 8005806:	6863      	ldr	r3, [r4, #4]
 8005808:	1ac0      	subs	r0, r0, r3
 800580a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800580c:	b10b      	cbz	r3, 8005812 <__sflush_r+0x46>
 800580e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005810:	1ac0      	subs	r0, r0, r3
 8005812:	2300      	movs	r3, #0
 8005814:	4602      	mov	r2, r0
 8005816:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005818:	6a21      	ldr	r1, [r4, #32]
 800581a:	4628      	mov	r0, r5
 800581c:	47b0      	blx	r6
 800581e:	1c43      	adds	r3, r0, #1
 8005820:	89a3      	ldrh	r3, [r4, #12]
 8005822:	d106      	bne.n	8005832 <__sflush_r+0x66>
 8005824:	6829      	ldr	r1, [r5, #0]
 8005826:	291d      	cmp	r1, #29
 8005828:	d82c      	bhi.n	8005884 <__sflush_r+0xb8>
 800582a:	4a2a      	ldr	r2, [pc, #168]	; (80058d4 <__sflush_r+0x108>)
 800582c:	40ca      	lsrs	r2, r1
 800582e:	07d6      	lsls	r6, r2, #31
 8005830:	d528      	bpl.n	8005884 <__sflush_r+0xb8>
 8005832:	2200      	movs	r2, #0
 8005834:	6062      	str	r2, [r4, #4]
 8005836:	04d9      	lsls	r1, r3, #19
 8005838:	6922      	ldr	r2, [r4, #16]
 800583a:	6022      	str	r2, [r4, #0]
 800583c:	d504      	bpl.n	8005848 <__sflush_r+0x7c>
 800583e:	1c42      	adds	r2, r0, #1
 8005840:	d101      	bne.n	8005846 <__sflush_r+0x7a>
 8005842:	682b      	ldr	r3, [r5, #0]
 8005844:	b903      	cbnz	r3, 8005848 <__sflush_r+0x7c>
 8005846:	6560      	str	r0, [r4, #84]	; 0x54
 8005848:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800584a:	602f      	str	r7, [r5, #0]
 800584c:	2900      	cmp	r1, #0
 800584e:	d0ca      	beq.n	80057e6 <__sflush_r+0x1a>
 8005850:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005854:	4299      	cmp	r1, r3
 8005856:	d002      	beq.n	800585e <__sflush_r+0x92>
 8005858:	4628      	mov	r0, r5
 800585a:	f7ff fcb7 	bl	80051cc <_free_r>
 800585e:	2000      	movs	r0, #0
 8005860:	6360      	str	r0, [r4, #52]	; 0x34
 8005862:	e7c1      	b.n	80057e8 <__sflush_r+0x1c>
 8005864:	6a21      	ldr	r1, [r4, #32]
 8005866:	2301      	movs	r3, #1
 8005868:	4628      	mov	r0, r5
 800586a:	47b0      	blx	r6
 800586c:	1c41      	adds	r1, r0, #1
 800586e:	d1c7      	bne.n	8005800 <__sflush_r+0x34>
 8005870:	682b      	ldr	r3, [r5, #0]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d0c4      	beq.n	8005800 <__sflush_r+0x34>
 8005876:	2b1d      	cmp	r3, #29
 8005878:	d001      	beq.n	800587e <__sflush_r+0xb2>
 800587a:	2b16      	cmp	r3, #22
 800587c:	d101      	bne.n	8005882 <__sflush_r+0xb6>
 800587e:	602f      	str	r7, [r5, #0]
 8005880:	e7b1      	b.n	80057e6 <__sflush_r+0x1a>
 8005882:	89a3      	ldrh	r3, [r4, #12]
 8005884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005888:	81a3      	strh	r3, [r4, #12]
 800588a:	e7ad      	b.n	80057e8 <__sflush_r+0x1c>
 800588c:	690f      	ldr	r7, [r1, #16]
 800588e:	2f00      	cmp	r7, #0
 8005890:	d0a9      	beq.n	80057e6 <__sflush_r+0x1a>
 8005892:	0793      	lsls	r3, r2, #30
 8005894:	680e      	ldr	r6, [r1, #0]
 8005896:	bf08      	it	eq
 8005898:	694b      	ldreq	r3, [r1, #20]
 800589a:	600f      	str	r7, [r1, #0]
 800589c:	bf18      	it	ne
 800589e:	2300      	movne	r3, #0
 80058a0:	eba6 0807 	sub.w	r8, r6, r7
 80058a4:	608b      	str	r3, [r1, #8]
 80058a6:	f1b8 0f00 	cmp.w	r8, #0
 80058aa:	dd9c      	ble.n	80057e6 <__sflush_r+0x1a>
 80058ac:	6a21      	ldr	r1, [r4, #32]
 80058ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80058b0:	4643      	mov	r3, r8
 80058b2:	463a      	mov	r2, r7
 80058b4:	4628      	mov	r0, r5
 80058b6:	47b0      	blx	r6
 80058b8:	2800      	cmp	r0, #0
 80058ba:	dc06      	bgt.n	80058ca <__sflush_r+0xfe>
 80058bc:	89a3      	ldrh	r3, [r4, #12]
 80058be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058c2:	81a3      	strh	r3, [r4, #12]
 80058c4:	f04f 30ff 	mov.w	r0, #4294967295
 80058c8:	e78e      	b.n	80057e8 <__sflush_r+0x1c>
 80058ca:	4407      	add	r7, r0
 80058cc:	eba8 0800 	sub.w	r8, r8, r0
 80058d0:	e7e9      	b.n	80058a6 <__sflush_r+0xda>
 80058d2:	bf00      	nop
 80058d4:	20400001 	.word	0x20400001

080058d8 <_fflush_r>:
 80058d8:	b538      	push	{r3, r4, r5, lr}
 80058da:	690b      	ldr	r3, [r1, #16]
 80058dc:	4605      	mov	r5, r0
 80058de:	460c      	mov	r4, r1
 80058e0:	b913      	cbnz	r3, 80058e8 <_fflush_r+0x10>
 80058e2:	2500      	movs	r5, #0
 80058e4:	4628      	mov	r0, r5
 80058e6:	bd38      	pop	{r3, r4, r5, pc}
 80058e8:	b118      	cbz	r0, 80058f2 <_fflush_r+0x1a>
 80058ea:	6983      	ldr	r3, [r0, #24]
 80058ec:	b90b      	cbnz	r3, 80058f2 <_fflush_r+0x1a>
 80058ee:	f000 f887 	bl	8005a00 <__sinit>
 80058f2:	4b14      	ldr	r3, [pc, #80]	; (8005944 <_fflush_r+0x6c>)
 80058f4:	429c      	cmp	r4, r3
 80058f6:	d11b      	bne.n	8005930 <_fflush_r+0x58>
 80058f8:	686c      	ldr	r4, [r5, #4]
 80058fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d0ef      	beq.n	80058e2 <_fflush_r+0xa>
 8005902:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005904:	07d0      	lsls	r0, r2, #31
 8005906:	d404      	bmi.n	8005912 <_fflush_r+0x3a>
 8005908:	0599      	lsls	r1, r3, #22
 800590a:	d402      	bmi.n	8005912 <_fflush_r+0x3a>
 800590c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800590e:	f000 f915 	bl	8005b3c <__retarget_lock_acquire_recursive>
 8005912:	4628      	mov	r0, r5
 8005914:	4621      	mov	r1, r4
 8005916:	f7ff ff59 	bl	80057cc <__sflush_r>
 800591a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800591c:	07da      	lsls	r2, r3, #31
 800591e:	4605      	mov	r5, r0
 8005920:	d4e0      	bmi.n	80058e4 <_fflush_r+0xc>
 8005922:	89a3      	ldrh	r3, [r4, #12]
 8005924:	059b      	lsls	r3, r3, #22
 8005926:	d4dd      	bmi.n	80058e4 <_fflush_r+0xc>
 8005928:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800592a:	f000 f908 	bl	8005b3e <__retarget_lock_release_recursive>
 800592e:	e7d9      	b.n	80058e4 <_fflush_r+0xc>
 8005930:	4b05      	ldr	r3, [pc, #20]	; (8005948 <_fflush_r+0x70>)
 8005932:	429c      	cmp	r4, r3
 8005934:	d101      	bne.n	800593a <_fflush_r+0x62>
 8005936:	68ac      	ldr	r4, [r5, #8]
 8005938:	e7df      	b.n	80058fa <_fflush_r+0x22>
 800593a:	4b04      	ldr	r3, [pc, #16]	; (800594c <_fflush_r+0x74>)
 800593c:	429c      	cmp	r4, r3
 800593e:	bf08      	it	eq
 8005940:	68ec      	ldreq	r4, [r5, #12]
 8005942:	e7da      	b.n	80058fa <_fflush_r+0x22>
 8005944:	08006a1c 	.word	0x08006a1c
 8005948:	08006a3c 	.word	0x08006a3c
 800594c:	080069fc 	.word	0x080069fc

08005950 <std>:
 8005950:	2300      	movs	r3, #0
 8005952:	b510      	push	{r4, lr}
 8005954:	4604      	mov	r4, r0
 8005956:	e9c0 3300 	strd	r3, r3, [r0]
 800595a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800595e:	6083      	str	r3, [r0, #8]
 8005960:	8181      	strh	r1, [r0, #12]
 8005962:	6643      	str	r3, [r0, #100]	; 0x64
 8005964:	81c2      	strh	r2, [r0, #14]
 8005966:	6183      	str	r3, [r0, #24]
 8005968:	4619      	mov	r1, r3
 800596a:	2208      	movs	r2, #8
 800596c:	305c      	adds	r0, #92	; 0x5c
 800596e:	f7ff fc25 	bl	80051bc <memset>
 8005972:	4b05      	ldr	r3, [pc, #20]	; (8005988 <std+0x38>)
 8005974:	6263      	str	r3, [r4, #36]	; 0x24
 8005976:	4b05      	ldr	r3, [pc, #20]	; (800598c <std+0x3c>)
 8005978:	62a3      	str	r3, [r4, #40]	; 0x28
 800597a:	4b05      	ldr	r3, [pc, #20]	; (8005990 <std+0x40>)
 800597c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800597e:	4b05      	ldr	r3, [pc, #20]	; (8005994 <std+0x44>)
 8005980:	6224      	str	r4, [r4, #32]
 8005982:	6323      	str	r3, [r4, #48]	; 0x30
 8005984:	bd10      	pop	{r4, pc}
 8005986:	bf00      	nop
 8005988:	08006549 	.word	0x08006549
 800598c:	0800656b 	.word	0x0800656b
 8005990:	080065a3 	.word	0x080065a3
 8005994:	080065c7 	.word	0x080065c7

08005998 <_cleanup_r>:
 8005998:	4901      	ldr	r1, [pc, #4]	; (80059a0 <_cleanup_r+0x8>)
 800599a:	f000 b8af 	b.w	8005afc <_fwalk_reent>
 800599e:	bf00      	nop
 80059a0:	080058d9 	.word	0x080058d9

080059a4 <__sfmoreglue>:
 80059a4:	b570      	push	{r4, r5, r6, lr}
 80059a6:	2268      	movs	r2, #104	; 0x68
 80059a8:	1e4d      	subs	r5, r1, #1
 80059aa:	4355      	muls	r5, r2
 80059ac:	460e      	mov	r6, r1
 80059ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80059b2:	f7ff fc77 	bl	80052a4 <_malloc_r>
 80059b6:	4604      	mov	r4, r0
 80059b8:	b140      	cbz	r0, 80059cc <__sfmoreglue+0x28>
 80059ba:	2100      	movs	r1, #0
 80059bc:	e9c0 1600 	strd	r1, r6, [r0]
 80059c0:	300c      	adds	r0, #12
 80059c2:	60a0      	str	r0, [r4, #8]
 80059c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80059c8:	f7ff fbf8 	bl	80051bc <memset>
 80059cc:	4620      	mov	r0, r4
 80059ce:	bd70      	pop	{r4, r5, r6, pc}

080059d0 <__sfp_lock_acquire>:
 80059d0:	4801      	ldr	r0, [pc, #4]	; (80059d8 <__sfp_lock_acquire+0x8>)
 80059d2:	f000 b8b3 	b.w	8005b3c <__retarget_lock_acquire_recursive>
 80059d6:	bf00      	nop
 80059d8:	20000261 	.word	0x20000261

080059dc <__sfp_lock_release>:
 80059dc:	4801      	ldr	r0, [pc, #4]	; (80059e4 <__sfp_lock_release+0x8>)
 80059de:	f000 b8ae 	b.w	8005b3e <__retarget_lock_release_recursive>
 80059e2:	bf00      	nop
 80059e4:	20000261 	.word	0x20000261

080059e8 <__sinit_lock_acquire>:
 80059e8:	4801      	ldr	r0, [pc, #4]	; (80059f0 <__sinit_lock_acquire+0x8>)
 80059ea:	f000 b8a7 	b.w	8005b3c <__retarget_lock_acquire_recursive>
 80059ee:	bf00      	nop
 80059f0:	20000262 	.word	0x20000262

080059f4 <__sinit_lock_release>:
 80059f4:	4801      	ldr	r0, [pc, #4]	; (80059fc <__sinit_lock_release+0x8>)
 80059f6:	f000 b8a2 	b.w	8005b3e <__retarget_lock_release_recursive>
 80059fa:	bf00      	nop
 80059fc:	20000262 	.word	0x20000262

08005a00 <__sinit>:
 8005a00:	b510      	push	{r4, lr}
 8005a02:	4604      	mov	r4, r0
 8005a04:	f7ff fff0 	bl	80059e8 <__sinit_lock_acquire>
 8005a08:	69a3      	ldr	r3, [r4, #24]
 8005a0a:	b11b      	cbz	r3, 8005a14 <__sinit+0x14>
 8005a0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a10:	f7ff bff0 	b.w	80059f4 <__sinit_lock_release>
 8005a14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005a18:	6523      	str	r3, [r4, #80]	; 0x50
 8005a1a:	4b13      	ldr	r3, [pc, #76]	; (8005a68 <__sinit+0x68>)
 8005a1c:	4a13      	ldr	r2, [pc, #76]	; (8005a6c <__sinit+0x6c>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	62a2      	str	r2, [r4, #40]	; 0x28
 8005a22:	42a3      	cmp	r3, r4
 8005a24:	bf04      	itt	eq
 8005a26:	2301      	moveq	r3, #1
 8005a28:	61a3      	streq	r3, [r4, #24]
 8005a2a:	4620      	mov	r0, r4
 8005a2c:	f000 f820 	bl	8005a70 <__sfp>
 8005a30:	6060      	str	r0, [r4, #4]
 8005a32:	4620      	mov	r0, r4
 8005a34:	f000 f81c 	bl	8005a70 <__sfp>
 8005a38:	60a0      	str	r0, [r4, #8]
 8005a3a:	4620      	mov	r0, r4
 8005a3c:	f000 f818 	bl	8005a70 <__sfp>
 8005a40:	2200      	movs	r2, #0
 8005a42:	60e0      	str	r0, [r4, #12]
 8005a44:	2104      	movs	r1, #4
 8005a46:	6860      	ldr	r0, [r4, #4]
 8005a48:	f7ff ff82 	bl	8005950 <std>
 8005a4c:	68a0      	ldr	r0, [r4, #8]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	2109      	movs	r1, #9
 8005a52:	f7ff ff7d 	bl	8005950 <std>
 8005a56:	68e0      	ldr	r0, [r4, #12]
 8005a58:	2202      	movs	r2, #2
 8005a5a:	2112      	movs	r1, #18
 8005a5c:	f7ff ff78 	bl	8005950 <std>
 8005a60:	2301      	movs	r3, #1
 8005a62:	61a3      	str	r3, [r4, #24]
 8005a64:	e7d2      	b.n	8005a0c <__sinit+0xc>
 8005a66:	bf00      	nop
 8005a68:	080068f4 	.word	0x080068f4
 8005a6c:	08005999 	.word	0x08005999

08005a70 <__sfp>:
 8005a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a72:	4607      	mov	r7, r0
 8005a74:	f7ff ffac 	bl	80059d0 <__sfp_lock_acquire>
 8005a78:	4b1e      	ldr	r3, [pc, #120]	; (8005af4 <__sfp+0x84>)
 8005a7a:	681e      	ldr	r6, [r3, #0]
 8005a7c:	69b3      	ldr	r3, [r6, #24]
 8005a7e:	b913      	cbnz	r3, 8005a86 <__sfp+0x16>
 8005a80:	4630      	mov	r0, r6
 8005a82:	f7ff ffbd 	bl	8005a00 <__sinit>
 8005a86:	3648      	adds	r6, #72	; 0x48
 8005a88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005a8c:	3b01      	subs	r3, #1
 8005a8e:	d503      	bpl.n	8005a98 <__sfp+0x28>
 8005a90:	6833      	ldr	r3, [r6, #0]
 8005a92:	b30b      	cbz	r3, 8005ad8 <__sfp+0x68>
 8005a94:	6836      	ldr	r6, [r6, #0]
 8005a96:	e7f7      	b.n	8005a88 <__sfp+0x18>
 8005a98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005a9c:	b9d5      	cbnz	r5, 8005ad4 <__sfp+0x64>
 8005a9e:	4b16      	ldr	r3, [pc, #88]	; (8005af8 <__sfp+0x88>)
 8005aa0:	60e3      	str	r3, [r4, #12]
 8005aa2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005aa6:	6665      	str	r5, [r4, #100]	; 0x64
 8005aa8:	f000 f847 	bl	8005b3a <__retarget_lock_init_recursive>
 8005aac:	f7ff ff96 	bl	80059dc <__sfp_lock_release>
 8005ab0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005ab4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005ab8:	6025      	str	r5, [r4, #0]
 8005aba:	61a5      	str	r5, [r4, #24]
 8005abc:	2208      	movs	r2, #8
 8005abe:	4629      	mov	r1, r5
 8005ac0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005ac4:	f7ff fb7a 	bl	80051bc <memset>
 8005ac8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005acc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005ad0:	4620      	mov	r0, r4
 8005ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ad4:	3468      	adds	r4, #104	; 0x68
 8005ad6:	e7d9      	b.n	8005a8c <__sfp+0x1c>
 8005ad8:	2104      	movs	r1, #4
 8005ada:	4638      	mov	r0, r7
 8005adc:	f7ff ff62 	bl	80059a4 <__sfmoreglue>
 8005ae0:	4604      	mov	r4, r0
 8005ae2:	6030      	str	r0, [r6, #0]
 8005ae4:	2800      	cmp	r0, #0
 8005ae6:	d1d5      	bne.n	8005a94 <__sfp+0x24>
 8005ae8:	f7ff ff78 	bl	80059dc <__sfp_lock_release>
 8005aec:	230c      	movs	r3, #12
 8005aee:	603b      	str	r3, [r7, #0]
 8005af0:	e7ee      	b.n	8005ad0 <__sfp+0x60>
 8005af2:	bf00      	nop
 8005af4:	080068f4 	.word	0x080068f4
 8005af8:	ffff0001 	.word	0xffff0001

08005afc <_fwalk_reent>:
 8005afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b00:	4606      	mov	r6, r0
 8005b02:	4688      	mov	r8, r1
 8005b04:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005b08:	2700      	movs	r7, #0
 8005b0a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005b0e:	f1b9 0901 	subs.w	r9, r9, #1
 8005b12:	d505      	bpl.n	8005b20 <_fwalk_reent+0x24>
 8005b14:	6824      	ldr	r4, [r4, #0]
 8005b16:	2c00      	cmp	r4, #0
 8005b18:	d1f7      	bne.n	8005b0a <_fwalk_reent+0xe>
 8005b1a:	4638      	mov	r0, r7
 8005b1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b20:	89ab      	ldrh	r3, [r5, #12]
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d907      	bls.n	8005b36 <_fwalk_reent+0x3a>
 8005b26:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	d003      	beq.n	8005b36 <_fwalk_reent+0x3a>
 8005b2e:	4629      	mov	r1, r5
 8005b30:	4630      	mov	r0, r6
 8005b32:	47c0      	blx	r8
 8005b34:	4307      	orrs	r7, r0
 8005b36:	3568      	adds	r5, #104	; 0x68
 8005b38:	e7e9      	b.n	8005b0e <_fwalk_reent+0x12>

08005b3a <__retarget_lock_init_recursive>:
 8005b3a:	4770      	bx	lr

08005b3c <__retarget_lock_acquire_recursive>:
 8005b3c:	4770      	bx	lr

08005b3e <__retarget_lock_release_recursive>:
 8005b3e:	4770      	bx	lr

08005b40 <__swhatbuf_r>:
 8005b40:	b570      	push	{r4, r5, r6, lr}
 8005b42:	460e      	mov	r6, r1
 8005b44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b48:	2900      	cmp	r1, #0
 8005b4a:	b096      	sub	sp, #88	; 0x58
 8005b4c:	4614      	mov	r4, r2
 8005b4e:	461d      	mov	r5, r3
 8005b50:	da08      	bge.n	8005b64 <__swhatbuf_r+0x24>
 8005b52:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005b56:	2200      	movs	r2, #0
 8005b58:	602a      	str	r2, [r5, #0]
 8005b5a:	061a      	lsls	r2, r3, #24
 8005b5c:	d410      	bmi.n	8005b80 <__swhatbuf_r+0x40>
 8005b5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b62:	e00e      	b.n	8005b82 <__swhatbuf_r+0x42>
 8005b64:	466a      	mov	r2, sp
 8005b66:	f000 fd55 	bl	8006614 <_fstat_r>
 8005b6a:	2800      	cmp	r0, #0
 8005b6c:	dbf1      	blt.n	8005b52 <__swhatbuf_r+0x12>
 8005b6e:	9a01      	ldr	r2, [sp, #4]
 8005b70:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005b74:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005b78:	425a      	negs	r2, r3
 8005b7a:	415a      	adcs	r2, r3
 8005b7c:	602a      	str	r2, [r5, #0]
 8005b7e:	e7ee      	b.n	8005b5e <__swhatbuf_r+0x1e>
 8005b80:	2340      	movs	r3, #64	; 0x40
 8005b82:	2000      	movs	r0, #0
 8005b84:	6023      	str	r3, [r4, #0]
 8005b86:	b016      	add	sp, #88	; 0x58
 8005b88:	bd70      	pop	{r4, r5, r6, pc}
	...

08005b8c <__smakebuf_r>:
 8005b8c:	898b      	ldrh	r3, [r1, #12]
 8005b8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005b90:	079d      	lsls	r5, r3, #30
 8005b92:	4606      	mov	r6, r0
 8005b94:	460c      	mov	r4, r1
 8005b96:	d507      	bpl.n	8005ba8 <__smakebuf_r+0x1c>
 8005b98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005b9c:	6023      	str	r3, [r4, #0]
 8005b9e:	6123      	str	r3, [r4, #16]
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	6163      	str	r3, [r4, #20]
 8005ba4:	b002      	add	sp, #8
 8005ba6:	bd70      	pop	{r4, r5, r6, pc}
 8005ba8:	ab01      	add	r3, sp, #4
 8005baa:	466a      	mov	r2, sp
 8005bac:	f7ff ffc8 	bl	8005b40 <__swhatbuf_r>
 8005bb0:	9900      	ldr	r1, [sp, #0]
 8005bb2:	4605      	mov	r5, r0
 8005bb4:	4630      	mov	r0, r6
 8005bb6:	f7ff fb75 	bl	80052a4 <_malloc_r>
 8005bba:	b948      	cbnz	r0, 8005bd0 <__smakebuf_r+0x44>
 8005bbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bc0:	059a      	lsls	r2, r3, #22
 8005bc2:	d4ef      	bmi.n	8005ba4 <__smakebuf_r+0x18>
 8005bc4:	f023 0303 	bic.w	r3, r3, #3
 8005bc8:	f043 0302 	orr.w	r3, r3, #2
 8005bcc:	81a3      	strh	r3, [r4, #12]
 8005bce:	e7e3      	b.n	8005b98 <__smakebuf_r+0xc>
 8005bd0:	4b0d      	ldr	r3, [pc, #52]	; (8005c08 <__smakebuf_r+0x7c>)
 8005bd2:	62b3      	str	r3, [r6, #40]	; 0x28
 8005bd4:	89a3      	ldrh	r3, [r4, #12]
 8005bd6:	6020      	str	r0, [r4, #0]
 8005bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bdc:	81a3      	strh	r3, [r4, #12]
 8005bde:	9b00      	ldr	r3, [sp, #0]
 8005be0:	6163      	str	r3, [r4, #20]
 8005be2:	9b01      	ldr	r3, [sp, #4]
 8005be4:	6120      	str	r0, [r4, #16]
 8005be6:	b15b      	cbz	r3, 8005c00 <__smakebuf_r+0x74>
 8005be8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005bec:	4630      	mov	r0, r6
 8005bee:	f000 fd23 	bl	8006638 <_isatty_r>
 8005bf2:	b128      	cbz	r0, 8005c00 <__smakebuf_r+0x74>
 8005bf4:	89a3      	ldrh	r3, [r4, #12]
 8005bf6:	f023 0303 	bic.w	r3, r3, #3
 8005bfa:	f043 0301 	orr.w	r3, r3, #1
 8005bfe:	81a3      	strh	r3, [r4, #12]
 8005c00:	89a0      	ldrh	r0, [r4, #12]
 8005c02:	4305      	orrs	r5, r0
 8005c04:	81a5      	strh	r5, [r4, #12]
 8005c06:	e7cd      	b.n	8005ba4 <__smakebuf_r+0x18>
 8005c08:	08005999 	.word	0x08005999

08005c0c <__malloc_lock>:
 8005c0c:	4801      	ldr	r0, [pc, #4]	; (8005c14 <__malloc_lock+0x8>)
 8005c0e:	f7ff bf95 	b.w	8005b3c <__retarget_lock_acquire_recursive>
 8005c12:	bf00      	nop
 8005c14:	20000260 	.word	0x20000260

08005c18 <__malloc_unlock>:
 8005c18:	4801      	ldr	r0, [pc, #4]	; (8005c20 <__malloc_unlock+0x8>)
 8005c1a:	f7ff bf90 	b.w	8005b3e <__retarget_lock_release_recursive>
 8005c1e:	bf00      	nop
 8005c20:	20000260 	.word	0x20000260

08005c24 <__ssputs_r>:
 8005c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c28:	688e      	ldr	r6, [r1, #8]
 8005c2a:	429e      	cmp	r6, r3
 8005c2c:	4682      	mov	sl, r0
 8005c2e:	460c      	mov	r4, r1
 8005c30:	4690      	mov	r8, r2
 8005c32:	461f      	mov	r7, r3
 8005c34:	d838      	bhi.n	8005ca8 <__ssputs_r+0x84>
 8005c36:	898a      	ldrh	r2, [r1, #12]
 8005c38:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005c3c:	d032      	beq.n	8005ca4 <__ssputs_r+0x80>
 8005c3e:	6825      	ldr	r5, [r4, #0]
 8005c40:	6909      	ldr	r1, [r1, #16]
 8005c42:	eba5 0901 	sub.w	r9, r5, r1
 8005c46:	6965      	ldr	r5, [r4, #20]
 8005c48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005c50:	3301      	adds	r3, #1
 8005c52:	444b      	add	r3, r9
 8005c54:	106d      	asrs	r5, r5, #1
 8005c56:	429d      	cmp	r5, r3
 8005c58:	bf38      	it	cc
 8005c5a:	461d      	movcc	r5, r3
 8005c5c:	0553      	lsls	r3, r2, #21
 8005c5e:	d531      	bpl.n	8005cc4 <__ssputs_r+0xa0>
 8005c60:	4629      	mov	r1, r5
 8005c62:	f7ff fb1f 	bl	80052a4 <_malloc_r>
 8005c66:	4606      	mov	r6, r0
 8005c68:	b950      	cbnz	r0, 8005c80 <__ssputs_r+0x5c>
 8005c6a:	230c      	movs	r3, #12
 8005c6c:	f8ca 3000 	str.w	r3, [sl]
 8005c70:	89a3      	ldrh	r3, [r4, #12]
 8005c72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c76:	81a3      	strh	r3, [r4, #12]
 8005c78:	f04f 30ff 	mov.w	r0, #4294967295
 8005c7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c80:	6921      	ldr	r1, [r4, #16]
 8005c82:	464a      	mov	r2, r9
 8005c84:	f000 fcfa 	bl	800667c <memcpy>
 8005c88:	89a3      	ldrh	r3, [r4, #12]
 8005c8a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005c8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c92:	81a3      	strh	r3, [r4, #12]
 8005c94:	6126      	str	r6, [r4, #16]
 8005c96:	6165      	str	r5, [r4, #20]
 8005c98:	444e      	add	r6, r9
 8005c9a:	eba5 0509 	sub.w	r5, r5, r9
 8005c9e:	6026      	str	r6, [r4, #0]
 8005ca0:	60a5      	str	r5, [r4, #8]
 8005ca2:	463e      	mov	r6, r7
 8005ca4:	42be      	cmp	r6, r7
 8005ca6:	d900      	bls.n	8005caa <__ssputs_r+0x86>
 8005ca8:	463e      	mov	r6, r7
 8005caa:	6820      	ldr	r0, [r4, #0]
 8005cac:	4632      	mov	r2, r6
 8005cae:	4641      	mov	r1, r8
 8005cb0:	f000 fcf2 	bl	8006698 <memmove>
 8005cb4:	68a3      	ldr	r3, [r4, #8]
 8005cb6:	1b9b      	subs	r3, r3, r6
 8005cb8:	60a3      	str	r3, [r4, #8]
 8005cba:	6823      	ldr	r3, [r4, #0]
 8005cbc:	4433      	add	r3, r6
 8005cbe:	6023      	str	r3, [r4, #0]
 8005cc0:	2000      	movs	r0, #0
 8005cc2:	e7db      	b.n	8005c7c <__ssputs_r+0x58>
 8005cc4:	462a      	mov	r2, r5
 8005cc6:	f000 fd01 	bl	80066cc <_realloc_r>
 8005cca:	4606      	mov	r6, r0
 8005ccc:	2800      	cmp	r0, #0
 8005cce:	d1e1      	bne.n	8005c94 <__ssputs_r+0x70>
 8005cd0:	6921      	ldr	r1, [r4, #16]
 8005cd2:	4650      	mov	r0, sl
 8005cd4:	f7ff fa7a 	bl	80051cc <_free_r>
 8005cd8:	e7c7      	b.n	8005c6a <__ssputs_r+0x46>
	...

08005cdc <_svfiprintf_r>:
 8005cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ce0:	4698      	mov	r8, r3
 8005ce2:	898b      	ldrh	r3, [r1, #12]
 8005ce4:	061b      	lsls	r3, r3, #24
 8005ce6:	b09d      	sub	sp, #116	; 0x74
 8005ce8:	4607      	mov	r7, r0
 8005cea:	460d      	mov	r5, r1
 8005cec:	4614      	mov	r4, r2
 8005cee:	d50e      	bpl.n	8005d0e <_svfiprintf_r+0x32>
 8005cf0:	690b      	ldr	r3, [r1, #16]
 8005cf2:	b963      	cbnz	r3, 8005d0e <_svfiprintf_r+0x32>
 8005cf4:	2140      	movs	r1, #64	; 0x40
 8005cf6:	f7ff fad5 	bl	80052a4 <_malloc_r>
 8005cfa:	6028      	str	r0, [r5, #0]
 8005cfc:	6128      	str	r0, [r5, #16]
 8005cfe:	b920      	cbnz	r0, 8005d0a <_svfiprintf_r+0x2e>
 8005d00:	230c      	movs	r3, #12
 8005d02:	603b      	str	r3, [r7, #0]
 8005d04:	f04f 30ff 	mov.w	r0, #4294967295
 8005d08:	e0d1      	b.n	8005eae <_svfiprintf_r+0x1d2>
 8005d0a:	2340      	movs	r3, #64	; 0x40
 8005d0c:	616b      	str	r3, [r5, #20]
 8005d0e:	2300      	movs	r3, #0
 8005d10:	9309      	str	r3, [sp, #36]	; 0x24
 8005d12:	2320      	movs	r3, #32
 8005d14:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d18:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d1c:	2330      	movs	r3, #48	; 0x30
 8005d1e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005ec8 <_svfiprintf_r+0x1ec>
 8005d22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d26:	f04f 0901 	mov.w	r9, #1
 8005d2a:	4623      	mov	r3, r4
 8005d2c:	469a      	mov	sl, r3
 8005d2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d32:	b10a      	cbz	r2, 8005d38 <_svfiprintf_r+0x5c>
 8005d34:	2a25      	cmp	r2, #37	; 0x25
 8005d36:	d1f9      	bne.n	8005d2c <_svfiprintf_r+0x50>
 8005d38:	ebba 0b04 	subs.w	fp, sl, r4
 8005d3c:	d00b      	beq.n	8005d56 <_svfiprintf_r+0x7a>
 8005d3e:	465b      	mov	r3, fp
 8005d40:	4622      	mov	r2, r4
 8005d42:	4629      	mov	r1, r5
 8005d44:	4638      	mov	r0, r7
 8005d46:	f7ff ff6d 	bl	8005c24 <__ssputs_r>
 8005d4a:	3001      	adds	r0, #1
 8005d4c:	f000 80aa 	beq.w	8005ea4 <_svfiprintf_r+0x1c8>
 8005d50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d52:	445a      	add	r2, fp
 8005d54:	9209      	str	r2, [sp, #36]	; 0x24
 8005d56:	f89a 3000 	ldrb.w	r3, [sl]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	f000 80a2 	beq.w	8005ea4 <_svfiprintf_r+0x1c8>
 8005d60:	2300      	movs	r3, #0
 8005d62:	f04f 32ff 	mov.w	r2, #4294967295
 8005d66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d6a:	f10a 0a01 	add.w	sl, sl, #1
 8005d6e:	9304      	str	r3, [sp, #16]
 8005d70:	9307      	str	r3, [sp, #28]
 8005d72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d76:	931a      	str	r3, [sp, #104]	; 0x68
 8005d78:	4654      	mov	r4, sl
 8005d7a:	2205      	movs	r2, #5
 8005d7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d80:	4851      	ldr	r0, [pc, #324]	; (8005ec8 <_svfiprintf_r+0x1ec>)
 8005d82:	f7fa fa25 	bl	80001d0 <memchr>
 8005d86:	9a04      	ldr	r2, [sp, #16]
 8005d88:	b9d8      	cbnz	r0, 8005dc2 <_svfiprintf_r+0xe6>
 8005d8a:	06d0      	lsls	r0, r2, #27
 8005d8c:	bf44      	itt	mi
 8005d8e:	2320      	movmi	r3, #32
 8005d90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d94:	0711      	lsls	r1, r2, #28
 8005d96:	bf44      	itt	mi
 8005d98:	232b      	movmi	r3, #43	; 0x2b
 8005d9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d9e:	f89a 3000 	ldrb.w	r3, [sl]
 8005da2:	2b2a      	cmp	r3, #42	; 0x2a
 8005da4:	d015      	beq.n	8005dd2 <_svfiprintf_r+0xf6>
 8005da6:	9a07      	ldr	r2, [sp, #28]
 8005da8:	4654      	mov	r4, sl
 8005daa:	2000      	movs	r0, #0
 8005dac:	f04f 0c0a 	mov.w	ip, #10
 8005db0:	4621      	mov	r1, r4
 8005db2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005db6:	3b30      	subs	r3, #48	; 0x30
 8005db8:	2b09      	cmp	r3, #9
 8005dba:	d94e      	bls.n	8005e5a <_svfiprintf_r+0x17e>
 8005dbc:	b1b0      	cbz	r0, 8005dec <_svfiprintf_r+0x110>
 8005dbe:	9207      	str	r2, [sp, #28]
 8005dc0:	e014      	b.n	8005dec <_svfiprintf_r+0x110>
 8005dc2:	eba0 0308 	sub.w	r3, r0, r8
 8005dc6:	fa09 f303 	lsl.w	r3, r9, r3
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	9304      	str	r3, [sp, #16]
 8005dce:	46a2      	mov	sl, r4
 8005dd0:	e7d2      	b.n	8005d78 <_svfiprintf_r+0x9c>
 8005dd2:	9b03      	ldr	r3, [sp, #12]
 8005dd4:	1d19      	adds	r1, r3, #4
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	9103      	str	r1, [sp, #12]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	bfbb      	ittet	lt
 8005dde:	425b      	neglt	r3, r3
 8005de0:	f042 0202 	orrlt.w	r2, r2, #2
 8005de4:	9307      	strge	r3, [sp, #28]
 8005de6:	9307      	strlt	r3, [sp, #28]
 8005de8:	bfb8      	it	lt
 8005dea:	9204      	strlt	r2, [sp, #16]
 8005dec:	7823      	ldrb	r3, [r4, #0]
 8005dee:	2b2e      	cmp	r3, #46	; 0x2e
 8005df0:	d10c      	bne.n	8005e0c <_svfiprintf_r+0x130>
 8005df2:	7863      	ldrb	r3, [r4, #1]
 8005df4:	2b2a      	cmp	r3, #42	; 0x2a
 8005df6:	d135      	bne.n	8005e64 <_svfiprintf_r+0x188>
 8005df8:	9b03      	ldr	r3, [sp, #12]
 8005dfa:	1d1a      	adds	r2, r3, #4
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	9203      	str	r2, [sp, #12]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	bfb8      	it	lt
 8005e04:	f04f 33ff 	movlt.w	r3, #4294967295
 8005e08:	3402      	adds	r4, #2
 8005e0a:	9305      	str	r3, [sp, #20]
 8005e0c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005ed8 <_svfiprintf_r+0x1fc>
 8005e10:	7821      	ldrb	r1, [r4, #0]
 8005e12:	2203      	movs	r2, #3
 8005e14:	4650      	mov	r0, sl
 8005e16:	f7fa f9db 	bl	80001d0 <memchr>
 8005e1a:	b140      	cbz	r0, 8005e2e <_svfiprintf_r+0x152>
 8005e1c:	2340      	movs	r3, #64	; 0x40
 8005e1e:	eba0 000a 	sub.w	r0, r0, sl
 8005e22:	fa03 f000 	lsl.w	r0, r3, r0
 8005e26:	9b04      	ldr	r3, [sp, #16]
 8005e28:	4303      	orrs	r3, r0
 8005e2a:	3401      	adds	r4, #1
 8005e2c:	9304      	str	r3, [sp, #16]
 8005e2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e32:	4826      	ldr	r0, [pc, #152]	; (8005ecc <_svfiprintf_r+0x1f0>)
 8005e34:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005e38:	2206      	movs	r2, #6
 8005e3a:	f7fa f9c9 	bl	80001d0 <memchr>
 8005e3e:	2800      	cmp	r0, #0
 8005e40:	d038      	beq.n	8005eb4 <_svfiprintf_r+0x1d8>
 8005e42:	4b23      	ldr	r3, [pc, #140]	; (8005ed0 <_svfiprintf_r+0x1f4>)
 8005e44:	bb1b      	cbnz	r3, 8005e8e <_svfiprintf_r+0x1b2>
 8005e46:	9b03      	ldr	r3, [sp, #12]
 8005e48:	3307      	adds	r3, #7
 8005e4a:	f023 0307 	bic.w	r3, r3, #7
 8005e4e:	3308      	adds	r3, #8
 8005e50:	9303      	str	r3, [sp, #12]
 8005e52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e54:	4433      	add	r3, r6
 8005e56:	9309      	str	r3, [sp, #36]	; 0x24
 8005e58:	e767      	b.n	8005d2a <_svfiprintf_r+0x4e>
 8005e5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e5e:	460c      	mov	r4, r1
 8005e60:	2001      	movs	r0, #1
 8005e62:	e7a5      	b.n	8005db0 <_svfiprintf_r+0xd4>
 8005e64:	2300      	movs	r3, #0
 8005e66:	3401      	adds	r4, #1
 8005e68:	9305      	str	r3, [sp, #20]
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	f04f 0c0a 	mov.w	ip, #10
 8005e70:	4620      	mov	r0, r4
 8005e72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e76:	3a30      	subs	r2, #48	; 0x30
 8005e78:	2a09      	cmp	r2, #9
 8005e7a:	d903      	bls.n	8005e84 <_svfiprintf_r+0x1a8>
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d0c5      	beq.n	8005e0c <_svfiprintf_r+0x130>
 8005e80:	9105      	str	r1, [sp, #20]
 8005e82:	e7c3      	b.n	8005e0c <_svfiprintf_r+0x130>
 8005e84:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e88:	4604      	mov	r4, r0
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e7f0      	b.n	8005e70 <_svfiprintf_r+0x194>
 8005e8e:	ab03      	add	r3, sp, #12
 8005e90:	9300      	str	r3, [sp, #0]
 8005e92:	462a      	mov	r2, r5
 8005e94:	4b0f      	ldr	r3, [pc, #60]	; (8005ed4 <_svfiprintf_r+0x1f8>)
 8005e96:	a904      	add	r1, sp, #16
 8005e98:	4638      	mov	r0, r7
 8005e9a:	f3af 8000 	nop.w
 8005e9e:	1c42      	adds	r2, r0, #1
 8005ea0:	4606      	mov	r6, r0
 8005ea2:	d1d6      	bne.n	8005e52 <_svfiprintf_r+0x176>
 8005ea4:	89ab      	ldrh	r3, [r5, #12]
 8005ea6:	065b      	lsls	r3, r3, #25
 8005ea8:	f53f af2c 	bmi.w	8005d04 <_svfiprintf_r+0x28>
 8005eac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005eae:	b01d      	add	sp, #116	; 0x74
 8005eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eb4:	ab03      	add	r3, sp, #12
 8005eb6:	9300      	str	r3, [sp, #0]
 8005eb8:	462a      	mov	r2, r5
 8005eba:	4b06      	ldr	r3, [pc, #24]	; (8005ed4 <_svfiprintf_r+0x1f8>)
 8005ebc:	a904      	add	r1, sp, #16
 8005ebe:	4638      	mov	r0, r7
 8005ec0:	f000 f9d4 	bl	800626c <_printf_i>
 8005ec4:	e7eb      	b.n	8005e9e <_svfiprintf_r+0x1c2>
 8005ec6:	bf00      	nop
 8005ec8:	08006a5c 	.word	0x08006a5c
 8005ecc:	08006a66 	.word	0x08006a66
 8005ed0:	00000000 	.word	0x00000000
 8005ed4:	08005c25 	.word	0x08005c25
 8005ed8:	08006a62 	.word	0x08006a62

08005edc <__sfputc_r>:
 8005edc:	6893      	ldr	r3, [r2, #8]
 8005ede:	3b01      	subs	r3, #1
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	b410      	push	{r4}
 8005ee4:	6093      	str	r3, [r2, #8]
 8005ee6:	da08      	bge.n	8005efa <__sfputc_r+0x1e>
 8005ee8:	6994      	ldr	r4, [r2, #24]
 8005eea:	42a3      	cmp	r3, r4
 8005eec:	db01      	blt.n	8005ef2 <__sfputc_r+0x16>
 8005eee:	290a      	cmp	r1, #10
 8005ef0:	d103      	bne.n	8005efa <__sfputc_r+0x1e>
 8005ef2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ef6:	f7ff bba9 	b.w	800564c <__swbuf_r>
 8005efa:	6813      	ldr	r3, [r2, #0]
 8005efc:	1c58      	adds	r0, r3, #1
 8005efe:	6010      	str	r0, [r2, #0]
 8005f00:	7019      	strb	r1, [r3, #0]
 8005f02:	4608      	mov	r0, r1
 8005f04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f08:	4770      	bx	lr

08005f0a <__sfputs_r>:
 8005f0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f0c:	4606      	mov	r6, r0
 8005f0e:	460f      	mov	r7, r1
 8005f10:	4614      	mov	r4, r2
 8005f12:	18d5      	adds	r5, r2, r3
 8005f14:	42ac      	cmp	r4, r5
 8005f16:	d101      	bne.n	8005f1c <__sfputs_r+0x12>
 8005f18:	2000      	movs	r0, #0
 8005f1a:	e007      	b.n	8005f2c <__sfputs_r+0x22>
 8005f1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f20:	463a      	mov	r2, r7
 8005f22:	4630      	mov	r0, r6
 8005f24:	f7ff ffda 	bl	8005edc <__sfputc_r>
 8005f28:	1c43      	adds	r3, r0, #1
 8005f2a:	d1f3      	bne.n	8005f14 <__sfputs_r+0xa>
 8005f2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005f30 <_vfiprintf_r>:
 8005f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f34:	460d      	mov	r5, r1
 8005f36:	b09d      	sub	sp, #116	; 0x74
 8005f38:	4614      	mov	r4, r2
 8005f3a:	4698      	mov	r8, r3
 8005f3c:	4606      	mov	r6, r0
 8005f3e:	b118      	cbz	r0, 8005f48 <_vfiprintf_r+0x18>
 8005f40:	6983      	ldr	r3, [r0, #24]
 8005f42:	b90b      	cbnz	r3, 8005f48 <_vfiprintf_r+0x18>
 8005f44:	f7ff fd5c 	bl	8005a00 <__sinit>
 8005f48:	4b89      	ldr	r3, [pc, #548]	; (8006170 <_vfiprintf_r+0x240>)
 8005f4a:	429d      	cmp	r5, r3
 8005f4c:	d11b      	bne.n	8005f86 <_vfiprintf_r+0x56>
 8005f4e:	6875      	ldr	r5, [r6, #4]
 8005f50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f52:	07d9      	lsls	r1, r3, #31
 8005f54:	d405      	bmi.n	8005f62 <_vfiprintf_r+0x32>
 8005f56:	89ab      	ldrh	r3, [r5, #12]
 8005f58:	059a      	lsls	r2, r3, #22
 8005f5a:	d402      	bmi.n	8005f62 <_vfiprintf_r+0x32>
 8005f5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f5e:	f7ff fded 	bl	8005b3c <__retarget_lock_acquire_recursive>
 8005f62:	89ab      	ldrh	r3, [r5, #12]
 8005f64:	071b      	lsls	r3, r3, #28
 8005f66:	d501      	bpl.n	8005f6c <_vfiprintf_r+0x3c>
 8005f68:	692b      	ldr	r3, [r5, #16]
 8005f6a:	b9eb      	cbnz	r3, 8005fa8 <_vfiprintf_r+0x78>
 8005f6c:	4629      	mov	r1, r5
 8005f6e:	4630      	mov	r0, r6
 8005f70:	f7ff fbbe 	bl	80056f0 <__swsetup_r>
 8005f74:	b1c0      	cbz	r0, 8005fa8 <_vfiprintf_r+0x78>
 8005f76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f78:	07dc      	lsls	r4, r3, #31
 8005f7a:	d50e      	bpl.n	8005f9a <_vfiprintf_r+0x6a>
 8005f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f80:	b01d      	add	sp, #116	; 0x74
 8005f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f86:	4b7b      	ldr	r3, [pc, #492]	; (8006174 <_vfiprintf_r+0x244>)
 8005f88:	429d      	cmp	r5, r3
 8005f8a:	d101      	bne.n	8005f90 <_vfiprintf_r+0x60>
 8005f8c:	68b5      	ldr	r5, [r6, #8]
 8005f8e:	e7df      	b.n	8005f50 <_vfiprintf_r+0x20>
 8005f90:	4b79      	ldr	r3, [pc, #484]	; (8006178 <_vfiprintf_r+0x248>)
 8005f92:	429d      	cmp	r5, r3
 8005f94:	bf08      	it	eq
 8005f96:	68f5      	ldreq	r5, [r6, #12]
 8005f98:	e7da      	b.n	8005f50 <_vfiprintf_r+0x20>
 8005f9a:	89ab      	ldrh	r3, [r5, #12]
 8005f9c:	0598      	lsls	r0, r3, #22
 8005f9e:	d4ed      	bmi.n	8005f7c <_vfiprintf_r+0x4c>
 8005fa0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005fa2:	f7ff fdcc 	bl	8005b3e <__retarget_lock_release_recursive>
 8005fa6:	e7e9      	b.n	8005f7c <_vfiprintf_r+0x4c>
 8005fa8:	2300      	movs	r3, #0
 8005faa:	9309      	str	r3, [sp, #36]	; 0x24
 8005fac:	2320      	movs	r3, #32
 8005fae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005fb2:	f8cd 800c 	str.w	r8, [sp, #12]
 8005fb6:	2330      	movs	r3, #48	; 0x30
 8005fb8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800617c <_vfiprintf_r+0x24c>
 8005fbc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005fc0:	f04f 0901 	mov.w	r9, #1
 8005fc4:	4623      	mov	r3, r4
 8005fc6:	469a      	mov	sl, r3
 8005fc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005fcc:	b10a      	cbz	r2, 8005fd2 <_vfiprintf_r+0xa2>
 8005fce:	2a25      	cmp	r2, #37	; 0x25
 8005fd0:	d1f9      	bne.n	8005fc6 <_vfiprintf_r+0x96>
 8005fd2:	ebba 0b04 	subs.w	fp, sl, r4
 8005fd6:	d00b      	beq.n	8005ff0 <_vfiprintf_r+0xc0>
 8005fd8:	465b      	mov	r3, fp
 8005fda:	4622      	mov	r2, r4
 8005fdc:	4629      	mov	r1, r5
 8005fde:	4630      	mov	r0, r6
 8005fe0:	f7ff ff93 	bl	8005f0a <__sfputs_r>
 8005fe4:	3001      	adds	r0, #1
 8005fe6:	f000 80aa 	beq.w	800613e <_vfiprintf_r+0x20e>
 8005fea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005fec:	445a      	add	r2, fp
 8005fee:	9209      	str	r2, [sp, #36]	; 0x24
 8005ff0:	f89a 3000 	ldrb.w	r3, [sl]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	f000 80a2 	beq.w	800613e <_vfiprintf_r+0x20e>
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8006000:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006004:	f10a 0a01 	add.w	sl, sl, #1
 8006008:	9304      	str	r3, [sp, #16]
 800600a:	9307      	str	r3, [sp, #28]
 800600c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006010:	931a      	str	r3, [sp, #104]	; 0x68
 8006012:	4654      	mov	r4, sl
 8006014:	2205      	movs	r2, #5
 8006016:	f814 1b01 	ldrb.w	r1, [r4], #1
 800601a:	4858      	ldr	r0, [pc, #352]	; (800617c <_vfiprintf_r+0x24c>)
 800601c:	f7fa f8d8 	bl	80001d0 <memchr>
 8006020:	9a04      	ldr	r2, [sp, #16]
 8006022:	b9d8      	cbnz	r0, 800605c <_vfiprintf_r+0x12c>
 8006024:	06d1      	lsls	r1, r2, #27
 8006026:	bf44      	itt	mi
 8006028:	2320      	movmi	r3, #32
 800602a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800602e:	0713      	lsls	r3, r2, #28
 8006030:	bf44      	itt	mi
 8006032:	232b      	movmi	r3, #43	; 0x2b
 8006034:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006038:	f89a 3000 	ldrb.w	r3, [sl]
 800603c:	2b2a      	cmp	r3, #42	; 0x2a
 800603e:	d015      	beq.n	800606c <_vfiprintf_r+0x13c>
 8006040:	9a07      	ldr	r2, [sp, #28]
 8006042:	4654      	mov	r4, sl
 8006044:	2000      	movs	r0, #0
 8006046:	f04f 0c0a 	mov.w	ip, #10
 800604a:	4621      	mov	r1, r4
 800604c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006050:	3b30      	subs	r3, #48	; 0x30
 8006052:	2b09      	cmp	r3, #9
 8006054:	d94e      	bls.n	80060f4 <_vfiprintf_r+0x1c4>
 8006056:	b1b0      	cbz	r0, 8006086 <_vfiprintf_r+0x156>
 8006058:	9207      	str	r2, [sp, #28]
 800605a:	e014      	b.n	8006086 <_vfiprintf_r+0x156>
 800605c:	eba0 0308 	sub.w	r3, r0, r8
 8006060:	fa09 f303 	lsl.w	r3, r9, r3
 8006064:	4313      	orrs	r3, r2
 8006066:	9304      	str	r3, [sp, #16]
 8006068:	46a2      	mov	sl, r4
 800606a:	e7d2      	b.n	8006012 <_vfiprintf_r+0xe2>
 800606c:	9b03      	ldr	r3, [sp, #12]
 800606e:	1d19      	adds	r1, r3, #4
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	9103      	str	r1, [sp, #12]
 8006074:	2b00      	cmp	r3, #0
 8006076:	bfbb      	ittet	lt
 8006078:	425b      	neglt	r3, r3
 800607a:	f042 0202 	orrlt.w	r2, r2, #2
 800607e:	9307      	strge	r3, [sp, #28]
 8006080:	9307      	strlt	r3, [sp, #28]
 8006082:	bfb8      	it	lt
 8006084:	9204      	strlt	r2, [sp, #16]
 8006086:	7823      	ldrb	r3, [r4, #0]
 8006088:	2b2e      	cmp	r3, #46	; 0x2e
 800608a:	d10c      	bne.n	80060a6 <_vfiprintf_r+0x176>
 800608c:	7863      	ldrb	r3, [r4, #1]
 800608e:	2b2a      	cmp	r3, #42	; 0x2a
 8006090:	d135      	bne.n	80060fe <_vfiprintf_r+0x1ce>
 8006092:	9b03      	ldr	r3, [sp, #12]
 8006094:	1d1a      	adds	r2, r3, #4
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	9203      	str	r2, [sp, #12]
 800609a:	2b00      	cmp	r3, #0
 800609c:	bfb8      	it	lt
 800609e:	f04f 33ff 	movlt.w	r3, #4294967295
 80060a2:	3402      	adds	r4, #2
 80060a4:	9305      	str	r3, [sp, #20]
 80060a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800618c <_vfiprintf_r+0x25c>
 80060aa:	7821      	ldrb	r1, [r4, #0]
 80060ac:	2203      	movs	r2, #3
 80060ae:	4650      	mov	r0, sl
 80060b0:	f7fa f88e 	bl	80001d0 <memchr>
 80060b4:	b140      	cbz	r0, 80060c8 <_vfiprintf_r+0x198>
 80060b6:	2340      	movs	r3, #64	; 0x40
 80060b8:	eba0 000a 	sub.w	r0, r0, sl
 80060bc:	fa03 f000 	lsl.w	r0, r3, r0
 80060c0:	9b04      	ldr	r3, [sp, #16]
 80060c2:	4303      	orrs	r3, r0
 80060c4:	3401      	adds	r4, #1
 80060c6:	9304      	str	r3, [sp, #16]
 80060c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060cc:	482c      	ldr	r0, [pc, #176]	; (8006180 <_vfiprintf_r+0x250>)
 80060ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80060d2:	2206      	movs	r2, #6
 80060d4:	f7fa f87c 	bl	80001d0 <memchr>
 80060d8:	2800      	cmp	r0, #0
 80060da:	d03f      	beq.n	800615c <_vfiprintf_r+0x22c>
 80060dc:	4b29      	ldr	r3, [pc, #164]	; (8006184 <_vfiprintf_r+0x254>)
 80060de:	bb1b      	cbnz	r3, 8006128 <_vfiprintf_r+0x1f8>
 80060e0:	9b03      	ldr	r3, [sp, #12]
 80060e2:	3307      	adds	r3, #7
 80060e4:	f023 0307 	bic.w	r3, r3, #7
 80060e8:	3308      	adds	r3, #8
 80060ea:	9303      	str	r3, [sp, #12]
 80060ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060ee:	443b      	add	r3, r7
 80060f0:	9309      	str	r3, [sp, #36]	; 0x24
 80060f2:	e767      	b.n	8005fc4 <_vfiprintf_r+0x94>
 80060f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80060f8:	460c      	mov	r4, r1
 80060fa:	2001      	movs	r0, #1
 80060fc:	e7a5      	b.n	800604a <_vfiprintf_r+0x11a>
 80060fe:	2300      	movs	r3, #0
 8006100:	3401      	adds	r4, #1
 8006102:	9305      	str	r3, [sp, #20]
 8006104:	4619      	mov	r1, r3
 8006106:	f04f 0c0a 	mov.w	ip, #10
 800610a:	4620      	mov	r0, r4
 800610c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006110:	3a30      	subs	r2, #48	; 0x30
 8006112:	2a09      	cmp	r2, #9
 8006114:	d903      	bls.n	800611e <_vfiprintf_r+0x1ee>
 8006116:	2b00      	cmp	r3, #0
 8006118:	d0c5      	beq.n	80060a6 <_vfiprintf_r+0x176>
 800611a:	9105      	str	r1, [sp, #20]
 800611c:	e7c3      	b.n	80060a6 <_vfiprintf_r+0x176>
 800611e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006122:	4604      	mov	r4, r0
 8006124:	2301      	movs	r3, #1
 8006126:	e7f0      	b.n	800610a <_vfiprintf_r+0x1da>
 8006128:	ab03      	add	r3, sp, #12
 800612a:	9300      	str	r3, [sp, #0]
 800612c:	462a      	mov	r2, r5
 800612e:	4b16      	ldr	r3, [pc, #88]	; (8006188 <_vfiprintf_r+0x258>)
 8006130:	a904      	add	r1, sp, #16
 8006132:	4630      	mov	r0, r6
 8006134:	f3af 8000 	nop.w
 8006138:	4607      	mov	r7, r0
 800613a:	1c78      	adds	r0, r7, #1
 800613c:	d1d6      	bne.n	80060ec <_vfiprintf_r+0x1bc>
 800613e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006140:	07d9      	lsls	r1, r3, #31
 8006142:	d405      	bmi.n	8006150 <_vfiprintf_r+0x220>
 8006144:	89ab      	ldrh	r3, [r5, #12]
 8006146:	059a      	lsls	r2, r3, #22
 8006148:	d402      	bmi.n	8006150 <_vfiprintf_r+0x220>
 800614a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800614c:	f7ff fcf7 	bl	8005b3e <__retarget_lock_release_recursive>
 8006150:	89ab      	ldrh	r3, [r5, #12]
 8006152:	065b      	lsls	r3, r3, #25
 8006154:	f53f af12 	bmi.w	8005f7c <_vfiprintf_r+0x4c>
 8006158:	9809      	ldr	r0, [sp, #36]	; 0x24
 800615a:	e711      	b.n	8005f80 <_vfiprintf_r+0x50>
 800615c:	ab03      	add	r3, sp, #12
 800615e:	9300      	str	r3, [sp, #0]
 8006160:	462a      	mov	r2, r5
 8006162:	4b09      	ldr	r3, [pc, #36]	; (8006188 <_vfiprintf_r+0x258>)
 8006164:	a904      	add	r1, sp, #16
 8006166:	4630      	mov	r0, r6
 8006168:	f000 f880 	bl	800626c <_printf_i>
 800616c:	e7e4      	b.n	8006138 <_vfiprintf_r+0x208>
 800616e:	bf00      	nop
 8006170:	08006a1c 	.word	0x08006a1c
 8006174:	08006a3c 	.word	0x08006a3c
 8006178:	080069fc 	.word	0x080069fc
 800617c:	08006a5c 	.word	0x08006a5c
 8006180:	08006a66 	.word	0x08006a66
 8006184:	00000000 	.word	0x00000000
 8006188:	08005f0b 	.word	0x08005f0b
 800618c:	08006a62 	.word	0x08006a62

08006190 <_printf_common>:
 8006190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006194:	4616      	mov	r6, r2
 8006196:	4699      	mov	r9, r3
 8006198:	688a      	ldr	r2, [r1, #8]
 800619a:	690b      	ldr	r3, [r1, #16]
 800619c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80061a0:	4293      	cmp	r3, r2
 80061a2:	bfb8      	it	lt
 80061a4:	4613      	movlt	r3, r2
 80061a6:	6033      	str	r3, [r6, #0]
 80061a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80061ac:	4607      	mov	r7, r0
 80061ae:	460c      	mov	r4, r1
 80061b0:	b10a      	cbz	r2, 80061b6 <_printf_common+0x26>
 80061b2:	3301      	adds	r3, #1
 80061b4:	6033      	str	r3, [r6, #0]
 80061b6:	6823      	ldr	r3, [r4, #0]
 80061b8:	0699      	lsls	r1, r3, #26
 80061ba:	bf42      	ittt	mi
 80061bc:	6833      	ldrmi	r3, [r6, #0]
 80061be:	3302      	addmi	r3, #2
 80061c0:	6033      	strmi	r3, [r6, #0]
 80061c2:	6825      	ldr	r5, [r4, #0]
 80061c4:	f015 0506 	ands.w	r5, r5, #6
 80061c8:	d106      	bne.n	80061d8 <_printf_common+0x48>
 80061ca:	f104 0a19 	add.w	sl, r4, #25
 80061ce:	68e3      	ldr	r3, [r4, #12]
 80061d0:	6832      	ldr	r2, [r6, #0]
 80061d2:	1a9b      	subs	r3, r3, r2
 80061d4:	42ab      	cmp	r3, r5
 80061d6:	dc26      	bgt.n	8006226 <_printf_common+0x96>
 80061d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80061dc:	1e13      	subs	r3, r2, #0
 80061de:	6822      	ldr	r2, [r4, #0]
 80061e0:	bf18      	it	ne
 80061e2:	2301      	movne	r3, #1
 80061e4:	0692      	lsls	r2, r2, #26
 80061e6:	d42b      	bmi.n	8006240 <_printf_common+0xb0>
 80061e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80061ec:	4649      	mov	r1, r9
 80061ee:	4638      	mov	r0, r7
 80061f0:	47c0      	blx	r8
 80061f2:	3001      	adds	r0, #1
 80061f4:	d01e      	beq.n	8006234 <_printf_common+0xa4>
 80061f6:	6823      	ldr	r3, [r4, #0]
 80061f8:	68e5      	ldr	r5, [r4, #12]
 80061fa:	6832      	ldr	r2, [r6, #0]
 80061fc:	f003 0306 	and.w	r3, r3, #6
 8006200:	2b04      	cmp	r3, #4
 8006202:	bf08      	it	eq
 8006204:	1aad      	subeq	r5, r5, r2
 8006206:	68a3      	ldr	r3, [r4, #8]
 8006208:	6922      	ldr	r2, [r4, #16]
 800620a:	bf0c      	ite	eq
 800620c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006210:	2500      	movne	r5, #0
 8006212:	4293      	cmp	r3, r2
 8006214:	bfc4      	itt	gt
 8006216:	1a9b      	subgt	r3, r3, r2
 8006218:	18ed      	addgt	r5, r5, r3
 800621a:	2600      	movs	r6, #0
 800621c:	341a      	adds	r4, #26
 800621e:	42b5      	cmp	r5, r6
 8006220:	d11a      	bne.n	8006258 <_printf_common+0xc8>
 8006222:	2000      	movs	r0, #0
 8006224:	e008      	b.n	8006238 <_printf_common+0xa8>
 8006226:	2301      	movs	r3, #1
 8006228:	4652      	mov	r2, sl
 800622a:	4649      	mov	r1, r9
 800622c:	4638      	mov	r0, r7
 800622e:	47c0      	blx	r8
 8006230:	3001      	adds	r0, #1
 8006232:	d103      	bne.n	800623c <_printf_common+0xac>
 8006234:	f04f 30ff 	mov.w	r0, #4294967295
 8006238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800623c:	3501      	adds	r5, #1
 800623e:	e7c6      	b.n	80061ce <_printf_common+0x3e>
 8006240:	18e1      	adds	r1, r4, r3
 8006242:	1c5a      	adds	r2, r3, #1
 8006244:	2030      	movs	r0, #48	; 0x30
 8006246:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800624a:	4422      	add	r2, r4
 800624c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006250:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006254:	3302      	adds	r3, #2
 8006256:	e7c7      	b.n	80061e8 <_printf_common+0x58>
 8006258:	2301      	movs	r3, #1
 800625a:	4622      	mov	r2, r4
 800625c:	4649      	mov	r1, r9
 800625e:	4638      	mov	r0, r7
 8006260:	47c0      	blx	r8
 8006262:	3001      	adds	r0, #1
 8006264:	d0e6      	beq.n	8006234 <_printf_common+0xa4>
 8006266:	3601      	adds	r6, #1
 8006268:	e7d9      	b.n	800621e <_printf_common+0x8e>
	...

0800626c <_printf_i>:
 800626c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006270:	7e0f      	ldrb	r7, [r1, #24]
 8006272:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006274:	2f78      	cmp	r7, #120	; 0x78
 8006276:	4691      	mov	r9, r2
 8006278:	4680      	mov	r8, r0
 800627a:	460c      	mov	r4, r1
 800627c:	469a      	mov	sl, r3
 800627e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006282:	d807      	bhi.n	8006294 <_printf_i+0x28>
 8006284:	2f62      	cmp	r7, #98	; 0x62
 8006286:	d80a      	bhi.n	800629e <_printf_i+0x32>
 8006288:	2f00      	cmp	r7, #0
 800628a:	f000 80d8 	beq.w	800643e <_printf_i+0x1d2>
 800628e:	2f58      	cmp	r7, #88	; 0x58
 8006290:	f000 80a3 	beq.w	80063da <_printf_i+0x16e>
 8006294:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006298:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800629c:	e03a      	b.n	8006314 <_printf_i+0xa8>
 800629e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80062a2:	2b15      	cmp	r3, #21
 80062a4:	d8f6      	bhi.n	8006294 <_printf_i+0x28>
 80062a6:	a101      	add	r1, pc, #4	; (adr r1, 80062ac <_printf_i+0x40>)
 80062a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80062ac:	08006305 	.word	0x08006305
 80062b0:	08006319 	.word	0x08006319
 80062b4:	08006295 	.word	0x08006295
 80062b8:	08006295 	.word	0x08006295
 80062bc:	08006295 	.word	0x08006295
 80062c0:	08006295 	.word	0x08006295
 80062c4:	08006319 	.word	0x08006319
 80062c8:	08006295 	.word	0x08006295
 80062cc:	08006295 	.word	0x08006295
 80062d0:	08006295 	.word	0x08006295
 80062d4:	08006295 	.word	0x08006295
 80062d8:	08006425 	.word	0x08006425
 80062dc:	08006349 	.word	0x08006349
 80062e0:	08006407 	.word	0x08006407
 80062e4:	08006295 	.word	0x08006295
 80062e8:	08006295 	.word	0x08006295
 80062ec:	08006447 	.word	0x08006447
 80062f0:	08006295 	.word	0x08006295
 80062f4:	08006349 	.word	0x08006349
 80062f8:	08006295 	.word	0x08006295
 80062fc:	08006295 	.word	0x08006295
 8006300:	0800640f 	.word	0x0800640f
 8006304:	682b      	ldr	r3, [r5, #0]
 8006306:	1d1a      	adds	r2, r3, #4
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	602a      	str	r2, [r5, #0]
 800630c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006310:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006314:	2301      	movs	r3, #1
 8006316:	e0a3      	b.n	8006460 <_printf_i+0x1f4>
 8006318:	6820      	ldr	r0, [r4, #0]
 800631a:	6829      	ldr	r1, [r5, #0]
 800631c:	0606      	lsls	r6, r0, #24
 800631e:	f101 0304 	add.w	r3, r1, #4
 8006322:	d50a      	bpl.n	800633a <_printf_i+0xce>
 8006324:	680e      	ldr	r6, [r1, #0]
 8006326:	602b      	str	r3, [r5, #0]
 8006328:	2e00      	cmp	r6, #0
 800632a:	da03      	bge.n	8006334 <_printf_i+0xc8>
 800632c:	232d      	movs	r3, #45	; 0x2d
 800632e:	4276      	negs	r6, r6
 8006330:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006334:	485e      	ldr	r0, [pc, #376]	; (80064b0 <_printf_i+0x244>)
 8006336:	230a      	movs	r3, #10
 8006338:	e019      	b.n	800636e <_printf_i+0x102>
 800633a:	680e      	ldr	r6, [r1, #0]
 800633c:	602b      	str	r3, [r5, #0]
 800633e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006342:	bf18      	it	ne
 8006344:	b236      	sxthne	r6, r6
 8006346:	e7ef      	b.n	8006328 <_printf_i+0xbc>
 8006348:	682b      	ldr	r3, [r5, #0]
 800634a:	6820      	ldr	r0, [r4, #0]
 800634c:	1d19      	adds	r1, r3, #4
 800634e:	6029      	str	r1, [r5, #0]
 8006350:	0601      	lsls	r1, r0, #24
 8006352:	d501      	bpl.n	8006358 <_printf_i+0xec>
 8006354:	681e      	ldr	r6, [r3, #0]
 8006356:	e002      	b.n	800635e <_printf_i+0xf2>
 8006358:	0646      	lsls	r6, r0, #25
 800635a:	d5fb      	bpl.n	8006354 <_printf_i+0xe8>
 800635c:	881e      	ldrh	r6, [r3, #0]
 800635e:	4854      	ldr	r0, [pc, #336]	; (80064b0 <_printf_i+0x244>)
 8006360:	2f6f      	cmp	r7, #111	; 0x6f
 8006362:	bf0c      	ite	eq
 8006364:	2308      	moveq	r3, #8
 8006366:	230a      	movne	r3, #10
 8006368:	2100      	movs	r1, #0
 800636a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800636e:	6865      	ldr	r5, [r4, #4]
 8006370:	60a5      	str	r5, [r4, #8]
 8006372:	2d00      	cmp	r5, #0
 8006374:	bfa2      	ittt	ge
 8006376:	6821      	ldrge	r1, [r4, #0]
 8006378:	f021 0104 	bicge.w	r1, r1, #4
 800637c:	6021      	strge	r1, [r4, #0]
 800637e:	b90e      	cbnz	r6, 8006384 <_printf_i+0x118>
 8006380:	2d00      	cmp	r5, #0
 8006382:	d04d      	beq.n	8006420 <_printf_i+0x1b4>
 8006384:	4615      	mov	r5, r2
 8006386:	fbb6 f1f3 	udiv	r1, r6, r3
 800638a:	fb03 6711 	mls	r7, r3, r1, r6
 800638e:	5dc7      	ldrb	r7, [r0, r7]
 8006390:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006394:	4637      	mov	r7, r6
 8006396:	42bb      	cmp	r3, r7
 8006398:	460e      	mov	r6, r1
 800639a:	d9f4      	bls.n	8006386 <_printf_i+0x11a>
 800639c:	2b08      	cmp	r3, #8
 800639e:	d10b      	bne.n	80063b8 <_printf_i+0x14c>
 80063a0:	6823      	ldr	r3, [r4, #0]
 80063a2:	07de      	lsls	r6, r3, #31
 80063a4:	d508      	bpl.n	80063b8 <_printf_i+0x14c>
 80063a6:	6923      	ldr	r3, [r4, #16]
 80063a8:	6861      	ldr	r1, [r4, #4]
 80063aa:	4299      	cmp	r1, r3
 80063ac:	bfde      	ittt	le
 80063ae:	2330      	movle	r3, #48	; 0x30
 80063b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80063b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80063b8:	1b52      	subs	r2, r2, r5
 80063ba:	6122      	str	r2, [r4, #16]
 80063bc:	f8cd a000 	str.w	sl, [sp]
 80063c0:	464b      	mov	r3, r9
 80063c2:	aa03      	add	r2, sp, #12
 80063c4:	4621      	mov	r1, r4
 80063c6:	4640      	mov	r0, r8
 80063c8:	f7ff fee2 	bl	8006190 <_printf_common>
 80063cc:	3001      	adds	r0, #1
 80063ce:	d14c      	bne.n	800646a <_printf_i+0x1fe>
 80063d0:	f04f 30ff 	mov.w	r0, #4294967295
 80063d4:	b004      	add	sp, #16
 80063d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063da:	4835      	ldr	r0, [pc, #212]	; (80064b0 <_printf_i+0x244>)
 80063dc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80063e0:	6829      	ldr	r1, [r5, #0]
 80063e2:	6823      	ldr	r3, [r4, #0]
 80063e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80063e8:	6029      	str	r1, [r5, #0]
 80063ea:	061d      	lsls	r5, r3, #24
 80063ec:	d514      	bpl.n	8006418 <_printf_i+0x1ac>
 80063ee:	07df      	lsls	r7, r3, #31
 80063f0:	bf44      	itt	mi
 80063f2:	f043 0320 	orrmi.w	r3, r3, #32
 80063f6:	6023      	strmi	r3, [r4, #0]
 80063f8:	b91e      	cbnz	r6, 8006402 <_printf_i+0x196>
 80063fa:	6823      	ldr	r3, [r4, #0]
 80063fc:	f023 0320 	bic.w	r3, r3, #32
 8006400:	6023      	str	r3, [r4, #0]
 8006402:	2310      	movs	r3, #16
 8006404:	e7b0      	b.n	8006368 <_printf_i+0xfc>
 8006406:	6823      	ldr	r3, [r4, #0]
 8006408:	f043 0320 	orr.w	r3, r3, #32
 800640c:	6023      	str	r3, [r4, #0]
 800640e:	2378      	movs	r3, #120	; 0x78
 8006410:	4828      	ldr	r0, [pc, #160]	; (80064b4 <_printf_i+0x248>)
 8006412:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006416:	e7e3      	b.n	80063e0 <_printf_i+0x174>
 8006418:	0659      	lsls	r1, r3, #25
 800641a:	bf48      	it	mi
 800641c:	b2b6      	uxthmi	r6, r6
 800641e:	e7e6      	b.n	80063ee <_printf_i+0x182>
 8006420:	4615      	mov	r5, r2
 8006422:	e7bb      	b.n	800639c <_printf_i+0x130>
 8006424:	682b      	ldr	r3, [r5, #0]
 8006426:	6826      	ldr	r6, [r4, #0]
 8006428:	6961      	ldr	r1, [r4, #20]
 800642a:	1d18      	adds	r0, r3, #4
 800642c:	6028      	str	r0, [r5, #0]
 800642e:	0635      	lsls	r5, r6, #24
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	d501      	bpl.n	8006438 <_printf_i+0x1cc>
 8006434:	6019      	str	r1, [r3, #0]
 8006436:	e002      	b.n	800643e <_printf_i+0x1d2>
 8006438:	0670      	lsls	r0, r6, #25
 800643a:	d5fb      	bpl.n	8006434 <_printf_i+0x1c8>
 800643c:	8019      	strh	r1, [r3, #0]
 800643e:	2300      	movs	r3, #0
 8006440:	6123      	str	r3, [r4, #16]
 8006442:	4615      	mov	r5, r2
 8006444:	e7ba      	b.n	80063bc <_printf_i+0x150>
 8006446:	682b      	ldr	r3, [r5, #0]
 8006448:	1d1a      	adds	r2, r3, #4
 800644a:	602a      	str	r2, [r5, #0]
 800644c:	681d      	ldr	r5, [r3, #0]
 800644e:	6862      	ldr	r2, [r4, #4]
 8006450:	2100      	movs	r1, #0
 8006452:	4628      	mov	r0, r5
 8006454:	f7f9 febc 	bl	80001d0 <memchr>
 8006458:	b108      	cbz	r0, 800645e <_printf_i+0x1f2>
 800645a:	1b40      	subs	r0, r0, r5
 800645c:	6060      	str	r0, [r4, #4]
 800645e:	6863      	ldr	r3, [r4, #4]
 8006460:	6123      	str	r3, [r4, #16]
 8006462:	2300      	movs	r3, #0
 8006464:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006468:	e7a8      	b.n	80063bc <_printf_i+0x150>
 800646a:	6923      	ldr	r3, [r4, #16]
 800646c:	462a      	mov	r2, r5
 800646e:	4649      	mov	r1, r9
 8006470:	4640      	mov	r0, r8
 8006472:	47d0      	blx	sl
 8006474:	3001      	adds	r0, #1
 8006476:	d0ab      	beq.n	80063d0 <_printf_i+0x164>
 8006478:	6823      	ldr	r3, [r4, #0]
 800647a:	079b      	lsls	r3, r3, #30
 800647c:	d413      	bmi.n	80064a6 <_printf_i+0x23a>
 800647e:	68e0      	ldr	r0, [r4, #12]
 8006480:	9b03      	ldr	r3, [sp, #12]
 8006482:	4298      	cmp	r0, r3
 8006484:	bfb8      	it	lt
 8006486:	4618      	movlt	r0, r3
 8006488:	e7a4      	b.n	80063d4 <_printf_i+0x168>
 800648a:	2301      	movs	r3, #1
 800648c:	4632      	mov	r2, r6
 800648e:	4649      	mov	r1, r9
 8006490:	4640      	mov	r0, r8
 8006492:	47d0      	blx	sl
 8006494:	3001      	adds	r0, #1
 8006496:	d09b      	beq.n	80063d0 <_printf_i+0x164>
 8006498:	3501      	adds	r5, #1
 800649a:	68e3      	ldr	r3, [r4, #12]
 800649c:	9903      	ldr	r1, [sp, #12]
 800649e:	1a5b      	subs	r3, r3, r1
 80064a0:	42ab      	cmp	r3, r5
 80064a2:	dcf2      	bgt.n	800648a <_printf_i+0x21e>
 80064a4:	e7eb      	b.n	800647e <_printf_i+0x212>
 80064a6:	2500      	movs	r5, #0
 80064a8:	f104 0619 	add.w	r6, r4, #25
 80064ac:	e7f5      	b.n	800649a <_printf_i+0x22e>
 80064ae:	bf00      	nop
 80064b0:	08006a6d 	.word	0x08006a6d
 80064b4:	08006a7e 	.word	0x08006a7e

080064b8 <_putc_r>:
 80064b8:	b570      	push	{r4, r5, r6, lr}
 80064ba:	460d      	mov	r5, r1
 80064bc:	4614      	mov	r4, r2
 80064be:	4606      	mov	r6, r0
 80064c0:	b118      	cbz	r0, 80064ca <_putc_r+0x12>
 80064c2:	6983      	ldr	r3, [r0, #24]
 80064c4:	b90b      	cbnz	r3, 80064ca <_putc_r+0x12>
 80064c6:	f7ff fa9b 	bl	8005a00 <__sinit>
 80064ca:	4b1c      	ldr	r3, [pc, #112]	; (800653c <_putc_r+0x84>)
 80064cc:	429c      	cmp	r4, r3
 80064ce:	d124      	bne.n	800651a <_putc_r+0x62>
 80064d0:	6874      	ldr	r4, [r6, #4]
 80064d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80064d4:	07d8      	lsls	r0, r3, #31
 80064d6:	d405      	bmi.n	80064e4 <_putc_r+0x2c>
 80064d8:	89a3      	ldrh	r3, [r4, #12]
 80064da:	0599      	lsls	r1, r3, #22
 80064dc:	d402      	bmi.n	80064e4 <_putc_r+0x2c>
 80064de:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80064e0:	f7ff fb2c 	bl	8005b3c <__retarget_lock_acquire_recursive>
 80064e4:	68a3      	ldr	r3, [r4, #8]
 80064e6:	3b01      	subs	r3, #1
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	60a3      	str	r3, [r4, #8]
 80064ec:	da05      	bge.n	80064fa <_putc_r+0x42>
 80064ee:	69a2      	ldr	r2, [r4, #24]
 80064f0:	4293      	cmp	r3, r2
 80064f2:	db1c      	blt.n	800652e <_putc_r+0x76>
 80064f4:	b2eb      	uxtb	r3, r5
 80064f6:	2b0a      	cmp	r3, #10
 80064f8:	d019      	beq.n	800652e <_putc_r+0x76>
 80064fa:	6823      	ldr	r3, [r4, #0]
 80064fc:	1c5a      	adds	r2, r3, #1
 80064fe:	6022      	str	r2, [r4, #0]
 8006500:	701d      	strb	r5, [r3, #0]
 8006502:	b2ed      	uxtb	r5, r5
 8006504:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006506:	07da      	lsls	r2, r3, #31
 8006508:	d405      	bmi.n	8006516 <_putc_r+0x5e>
 800650a:	89a3      	ldrh	r3, [r4, #12]
 800650c:	059b      	lsls	r3, r3, #22
 800650e:	d402      	bmi.n	8006516 <_putc_r+0x5e>
 8006510:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006512:	f7ff fb14 	bl	8005b3e <__retarget_lock_release_recursive>
 8006516:	4628      	mov	r0, r5
 8006518:	bd70      	pop	{r4, r5, r6, pc}
 800651a:	4b09      	ldr	r3, [pc, #36]	; (8006540 <_putc_r+0x88>)
 800651c:	429c      	cmp	r4, r3
 800651e:	d101      	bne.n	8006524 <_putc_r+0x6c>
 8006520:	68b4      	ldr	r4, [r6, #8]
 8006522:	e7d6      	b.n	80064d2 <_putc_r+0x1a>
 8006524:	4b07      	ldr	r3, [pc, #28]	; (8006544 <_putc_r+0x8c>)
 8006526:	429c      	cmp	r4, r3
 8006528:	bf08      	it	eq
 800652a:	68f4      	ldreq	r4, [r6, #12]
 800652c:	e7d1      	b.n	80064d2 <_putc_r+0x1a>
 800652e:	4629      	mov	r1, r5
 8006530:	4622      	mov	r2, r4
 8006532:	4630      	mov	r0, r6
 8006534:	f7ff f88a 	bl	800564c <__swbuf_r>
 8006538:	4605      	mov	r5, r0
 800653a:	e7e3      	b.n	8006504 <_putc_r+0x4c>
 800653c:	08006a1c 	.word	0x08006a1c
 8006540:	08006a3c 	.word	0x08006a3c
 8006544:	080069fc 	.word	0x080069fc

08006548 <__sread>:
 8006548:	b510      	push	{r4, lr}
 800654a:	460c      	mov	r4, r1
 800654c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006550:	f000 f8ec 	bl	800672c <_read_r>
 8006554:	2800      	cmp	r0, #0
 8006556:	bfab      	itete	ge
 8006558:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800655a:	89a3      	ldrhlt	r3, [r4, #12]
 800655c:	181b      	addge	r3, r3, r0
 800655e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006562:	bfac      	ite	ge
 8006564:	6563      	strge	r3, [r4, #84]	; 0x54
 8006566:	81a3      	strhlt	r3, [r4, #12]
 8006568:	bd10      	pop	{r4, pc}

0800656a <__swrite>:
 800656a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800656e:	461f      	mov	r7, r3
 8006570:	898b      	ldrh	r3, [r1, #12]
 8006572:	05db      	lsls	r3, r3, #23
 8006574:	4605      	mov	r5, r0
 8006576:	460c      	mov	r4, r1
 8006578:	4616      	mov	r6, r2
 800657a:	d505      	bpl.n	8006588 <__swrite+0x1e>
 800657c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006580:	2302      	movs	r3, #2
 8006582:	2200      	movs	r2, #0
 8006584:	f000 f868 	bl	8006658 <_lseek_r>
 8006588:	89a3      	ldrh	r3, [r4, #12]
 800658a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800658e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006592:	81a3      	strh	r3, [r4, #12]
 8006594:	4632      	mov	r2, r6
 8006596:	463b      	mov	r3, r7
 8006598:	4628      	mov	r0, r5
 800659a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800659e:	f000 b817 	b.w	80065d0 <_write_r>

080065a2 <__sseek>:
 80065a2:	b510      	push	{r4, lr}
 80065a4:	460c      	mov	r4, r1
 80065a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065aa:	f000 f855 	bl	8006658 <_lseek_r>
 80065ae:	1c43      	adds	r3, r0, #1
 80065b0:	89a3      	ldrh	r3, [r4, #12]
 80065b2:	bf15      	itete	ne
 80065b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80065b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80065ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80065be:	81a3      	strheq	r3, [r4, #12]
 80065c0:	bf18      	it	ne
 80065c2:	81a3      	strhne	r3, [r4, #12]
 80065c4:	bd10      	pop	{r4, pc}

080065c6 <__sclose>:
 80065c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065ca:	f000 b813 	b.w	80065f4 <_close_r>
	...

080065d0 <_write_r>:
 80065d0:	b538      	push	{r3, r4, r5, lr}
 80065d2:	4d07      	ldr	r5, [pc, #28]	; (80065f0 <_write_r+0x20>)
 80065d4:	4604      	mov	r4, r0
 80065d6:	4608      	mov	r0, r1
 80065d8:	4611      	mov	r1, r2
 80065da:	2200      	movs	r2, #0
 80065dc:	602a      	str	r2, [r5, #0]
 80065de:	461a      	mov	r2, r3
 80065e0:	f7fb ff79 	bl	80024d6 <_write>
 80065e4:	1c43      	adds	r3, r0, #1
 80065e6:	d102      	bne.n	80065ee <_write_r+0x1e>
 80065e8:	682b      	ldr	r3, [r5, #0]
 80065ea:	b103      	cbz	r3, 80065ee <_write_r+0x1e>
 80065ec:	6023      	str	r3, [r4, #0]
 80065ee:	bd38      	pop	{r3, r4, r5, pc}
 80065f0:	20000264 	.word	0x20000264

080065f4 <_close_r>:
 80065f4:	b538      	push	{r3, r4, r5, lr}
 80065f6:	4d06      	ldr	r5, [pc, #24]	; (8006610 <_close_r+0x1c>)
 80065f8:	2300      	movs	r3, #0
 80065fa:	4604      	mov	r4, r0
 80065fc:	4608      	mov	r0, r1
 80065fe:	602b      	str	r3, [r5, #0]
 8006600:	f7fb ff85 	bl	800250e <_close>
 8006604:	1c43      	adds	r3, r0, #1
 8006606:	d102      	bne.n	800660e <_close_r+0x1a>
 8006608:	682b      	ldr	r3, [r5, #0]
 800660a:	b103      	cbz	r3, 800660e <_close_r+0x1a>
 800660c:	6023      	str	r3, [r4, #0]
 800660e:	bd38      	pop	{r3, r4, r5, pc}
 8006610:	20000264 	.word	0x20000264

08006614 <_fstat_r>:
 8006614:	b538      	push	{r3, r4, r5, lr}
 8006616:	4d07      	ldr	r5, [pc, #28]	; (8006634 <_fstat_r+0x20>)
 8006618:	2300      	movs	r3, #0
 800661a:	4604      	mov	r4, r0
 800661c:	4608      	mov	r0, r1
 800661e:	4611      	mov	r1, r2
 8006620:	602b      	str	r3, [r5, #0]
 8006622:	f7fb ff80 	bl	8002526 <_fstat>
 8006626:	1c43      	adds	r3, r0, #1
 8006628:	d102      	bne.n	8006630 <_fstat_r+0x1c>
 800662a:	682b      	ldr	r3, [r5, #0]
 800662c:	b103      	cbz	r3, 8006630 <_fstat_r+0x1c>
 800662e:	6023      	str	r3, [r4, #0]
 8006630:	bd38      	pop	{r3, r4, r5, pc}
 8006632:	bf00      	nop
 8006634:	20000264 	.word	0x20000264

08006638 <_isatty_r>:
 8006638:	b538      	push	{r3, r4, r5, lr}
 800663a:	4d06      	ldr	r5, [pc, #24]	; (8006654 <_isatty_r+0x1c>)
 800663c:	2300      	movs	r3, #0
 800663e:	4604      	mov	r4, r0
 8006640:	4608      	mov	r0, r1
 8006642:	602b      	str	r3, [r5, #0]
 8006644:	f7fb ff7f 	bl	8002546 <_isatty>
 8006648:	1c43      	adds	r3, r0, #1
 800664a:	d102      	bne.n	8006652 <_isatty_r+0x1a>
 800664c:	682b      	ldr	r3, [r5, #0]
 800664e:	b103      	cbz	r3, 8006652 <_isatty_r+0x1a>
 8006650:	6023      	str	r3, [r4, #0]
 8006652:	bd38      	pop	{r3, r4, r5, pc}
 8006654:	20000264 	.word	0x20000264

08006658 <_lseek_r>:
 8006658:	b538      	push	{r3, r4, r5, lr}
 800665a:	4d07      	ldr	r5, [pc, #28]	; (8006678 <_lseek_r+0x20>)
 800665c:	4604      	mov	r4, r0
 800665e:	4608      	mov	r0, r1
 8006660:	4611      	mov	r1, r2
 8006662:	2200      	movs	r2, #0
 8006664:	602a      	str	r2, [r5, #0]
 8006666:	461a      	mov	r2, r3
 8006668:	f7fb ff78 	bl	800255c <_lseek>
 800666c:	1c43      	adds	r3, r0, #1
 800666e:	d102      	bne.n	8006676 <_lseek_r+0x1e>
 8006670:	682b      	ldr	r3, [r5, #0]
 8006672:	b103      	cbz	r3, 8006676 <_lseek_r+0x1e>
 8006674:	6023      	str	r3, [r4, #0]
 8006676:	bd38      	pop	{r3, r4, r5, pc}
 8006678:	20000264 	.word	0x20000264

0800667c <memcpy>:
 800667c:	440a      	add	r2, r1
 800667e:	4291      	cmp	r1, r2
 8006680:	f100 33ff 	add.w	r3, r0, #4294967295
 8006684:	d100      	bne.n	8006688 <memcpy+0xc>
 8006686:	4770      	bx	lr
 8006688:	b510      	push	{r4, lr}
 800668a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800668e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006692:	4291      	cmp	r1, r2
 8006694:	d1f9      	bne.n	800668a <memcpy+0xe>
 8006696:	bd10      	pop	{r4, pc}

08006698 <memmove>:
 8006698:	4288      	cmp	r0, r1
 800669a:	b510      	push	{r4, lr}
 800669c:	eb01 0402 	add.w	r4, r1, r2
 80066a0:	d902      	bls.n	80066a8 <memmove+0x10>
 80066a2:	4284      	cmp	r4, r0
 80066a4:	4623      	mov	r3, r4
 80066a6:	d807      	bhi.n	80066b8 <memmove+0x20>
 80066a8:	1e43      	subs	r3, r0, #1
 80066aa:	42a1      	cmp	r1, r4
 80066ac:	d008      	beq.n	80066c0 <memmove+0x28>
 80066ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80066b6:	e7f8      	b.n	80066aa <memmove+0x12>
 80066b8:	4402      	add	r2, r0
 80066ba:	4601      	mov	r1, r0
 80066bc:	428a      	cmp	r2, r1
 80066be:	d100      	bne.n	80066c2 <memmove+0x2a>
 80066c0:	bd10      	pop	{r4, pc}
 80066c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80066c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80066ca:	e7f7      	b.n	80066bc <memmove+0x24>

080066cc <_realloc_r>:
 80066cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066d0:	4680      	mov	r8, r0
 80066d2:	4614      	mov	r4, r2
 80066d4:	460e      	mov	r6, r1
 80066d6:	b921      	cbnz	r1, 80066e2 <_realloc_r+0x16>
 80066d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066dc:	4611      	mov	r1, r2
 80066de:	f7fe bde1 	b.w	80052a4 <_malloc_r>
 80066e2:	b92a      	cbnz	r2, 80066f0 <_realloc_r+0x24>
 80066e4:	f7fe fd72 	bl	80051cc <_free_r>
 80066e8:	4625      	mov	r5, r4
 80066ea:	4628      	mov	r0, r5
 80066ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066f0:	f000 f82e 	bl	8006750 <_malloc_usable_size_r>
 80066f4:	4284      	cmp	r4, r0
 80066f6:	4607      	mov	r7, r0
 80066f8:	d802      	bhi.n	8006700 <_realloc_r+0x34>
 80066fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80066fe:	d812      	bhi.n	8006726 <_realloc_r+0x5a>
 8006700:	4621      	mov	r1, r4
 8006702:	4640      	mov	r0, r8
 8006704:	f7fe fdce 	bl	80052a4 <_malloc_r>
 8006708:	4605      	mov	r5, r0
 800670a:	2800      	cmp	r0, #0
 800670c:	d0ed      	beq.n	80066ea <_realloc_r+0x1e>
 800670e:	42bc      	cmp	r4, r7
 8006710:	4622      	mov	r2, r4
 8006712:	4631      	mov	r1, r6
 8006714:	bf28      	it	cs
 8006716:	463a      	movcs	r2, r7
 8006718:	f7ff ffb0 	bl	800667c <memcpy>
 800671c:	4631      	mov	r1, r6
 800671e:	4640      	mov	r0, r8
 8006720:	f7fe fd54 	bl	80051cc <_free_r>
 8006724:	e7e1      	b.n	80066ea <_realloc_r+0x1e>
 8006726:	4635      	mov	r5, r6
 8006728:	e7df      	b.n	80066ea <_realloc_r+0x1e>
	...

0800672c <_read_r>:
 800672c:	b538      	push	{r3, r4, r5, lr}
 800672e:	4d07      	ldr	r5, [pc, #28]	; (800674c <_read_r+0x20>)
 8006730:	4604      	mov	r4, r0
 8006732:	4608      	mov	r0, r1
 8006734:	4611      	mov	r1, r2
 8006736:	2200      	movs	r2, #0
 8006738:	602a      	str	r2, [r5, #0]
 800673a:	461a      	mov	r2, r3
 800673c:	f7fb feae 	bl	800249c <_read>
 8006740:	1c43      	adds	r3, r0, #1
 8006742:	d102      	bne.n	800674a <_read_r+0x1e>
 8006744:	682b      	ldr	r3, [r5, #0]
 8006746:	b103      	cbz	r3, 800674a <_read_r+0x1e>
 8006748:	6023      	str	r3, [r4, #0]
 800674a:	bd38      	pop	{r3, r4, r5, pc}
 800674c:	20000264 	.word	0x20000264

08006750 <_malloc_usable_size_r>:
 8006750:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006754:	1f18      	subs	r0, r3, #4
 8006756:	2b00      	cmp	r3, #0
 8006758:	bfbc      	itt	lt
 800675a:	580b      	ldrlt	r3, [r1, r0]
 800675c:	18c0      	addlt	r0, r0, r3
 800675e:	4770      	bx	lr

08006760 <_init>:
 8006760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006762:	bf00      	nop
 8006764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006766:	bc08      	pop	{r3}
 8006768:	469e      	mov	lr, r3
 800676a:	4770      	bx	lr

0800676c <_fini>:
 800676c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800676e:	bf00      	nop
 8006770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006772:	bc08      	pop	{r3}
 8006774:	469e      	mov	lr, r3
 8006776:	4770      	bx	lr
