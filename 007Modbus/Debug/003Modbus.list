
003Modbus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bd4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08004d64  08004d64  00014d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e6c  08004e6c  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  08004e6c  08004e6c  00014e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e74  08004e74  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e74  08004e74  00014e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e78  08004e78  00014e78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08004e7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002009c  2**0
                  CONTENTS
 10 .bss          00000118  2000009c  2000009c  0002009c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001b4  200001b4  0002009c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b603  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d23  00000000  00000000  0002b6cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a58  00000000  00000000  0002d3f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000009b8  00000000  00000000  0002de50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f208  00000000  00000000  0002e808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bdb2  00000000  00000000  0004da10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c87e9  00000000  00000000  000597c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00121fab  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002f24  00000000  00000000  00121ffc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000009c 	.word	0x2000009c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004d4c 	.word	0x08004d4c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a0 	.word	0x200000a0
 80001cc:	08004d4c 	.word	0x08004d4c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <cs_sel>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void cs_sel() {
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET); //CS LOW
 8000588:	2200      	movs	r2, #0
 800058a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800058e:	4802      	ldr	r0, [pc, #8]	; (8000598 <cs_sel+0x14>)
 8000590:	f001 f898 	bl	80016c4 <HAL_GPIO_WritePin>
}
 8000594:	bf00      	nop
 8000596:	bd80      	pop	{r7, pc}
 8000598:	40020000 	.word	0x40020000

0800059c <cs_desel>:

void cs_desel() {
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET); //CS HIGH
 80005a0:	2201      	movs	r2, #1
 80005a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005a6:	4802      	ldr	r0, [pc, #8]	; (80005b0 <cs_desel+0x14>)
 80005a8:	f001 f88c 	bl	80016c4 <HAL_GPIO_WritePin>
}
 80005ac:	bf00      	nop
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	40020400 	.word	0x40020400

080005b4 <spi_rb>:

uint8_t spi_rb(void) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
	uint8_t rbuf;
	HAL_SPI_Receive(&hspi1, &rbuf, 1, 0xFFFFFFFF);
 80005ba:	1df9      	adds	r1, r7, #7
 80005bc:	f04f 33ff 	mov.w	r3, #4294967295
 80005c0:	2201      	movs	r2, #1
 80005c2:	4804      	ldr	r0, [pc, #16]	; (80005d4 <spi_rb+0x20>)
 80005c4:	f001 ff0f 	bl	80023e6 <HAL_SPI_Receive>
	return rbuf;
 80005c8:	79fb      	ldrb	r3, [r7, #7]
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	200000e0 	.word	0x200000e0

080005d8 <spi_wb>:

void spi_wb(uint8_t b) {
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &b, 1, 0xFFFFFFFF);
 80005e2:	1df9      	adds	r1, r7, #7
 80005e4:	f04f 33ff 	mov.w	r3, #4294967295
 80005e8:	2201      	movs	r2, #1
 80005ea:	4803      	ldr	r0, [pc, #12]	; (80005f8 <spi_wb+0x20>)
 80005ec:	f001 fdbf 	bl	800216e <HAL_SPI_Transmit>
}
 80005f0:	bf00      	nop
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	200000e0 	.word	0x200000e0

080005fc <send_uart>:

void send_uart (char *string)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen (string);
 8000604:	6878      	ldr	r0, [r7, #4]
 8000606:	f7ff fde3 	bl	80001d0 <strlen>
 800060a:	4603      	mov	r3, r0
 800060c:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart5, (uint8_t *) string, len, HAL_MAX_DELAY);  // transmit in blocking mode
 800060e:	7bfb      	ldrb	r3, [r7, #15]
 8000610:	b29a      	uxth	r2, r3
 8000612:	f04f 33ff 	mov.w	r3, #4294967295
 8000616:	6879      	ldr	r1, [r7, #4]
 8000618:	4803      	ldr	r0, [pc, #12]	; (8000628 <send_uart+0x2c>)
 800061a:	f002 fb14 	bl	8002c46 <HAL_UART_Transmit>
}
 800061e:	bf00      	nop
 8000620:	3710      	adds	r7, #16
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	20000138 	.word	0x20000138

0800062c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b094      	sub	sp, #80	; 0x50
 8000630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint8_t retVal, sockStatus;
  uint8_t bufSize[] = {2, 2, 2, 2};
 8000632:	f04f 3302 	mov.w	r3, #33686018	; 0x2020202
 8000636:	643b      	str	r3, [r7, #64]	; 0x40
  uint16_t deneme =0;
 8000638:	2300      	movs	r3, #0
 800063a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800063e:	f000 fd29 	bl	8001094 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000642:	f000 f8c9 	bl	80007d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000646:	f000 f98d 	bl	8000964 <MX_GPIO_Init>
  MX_SPI1_Init();
 800064a:	f000 f92f 	bl	80008ac <MX_SPI1_Init>
  MX_UART5_Init();
 800064e:	f000 f95f 	bl	8000910 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */


   wizchip_init(bufSize, bufSize);
 8000652:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000656:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800065a:	4611      	mov	r1, r2
 800065c:	4618      	mov	r0, r3
 800065e:	f003 fe09 	bl	8004274 <wizchip_init>
   wiz_NetInfo netInfo = { .mac 	= {0x00, 0x08, 0xdc, 0xab, 0xcd, 0xef},	// Mac address
 8000662:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]
 800066e:	60da      	str	r2, [r3, #12]
 8000670:	611a      	str	r2, [r3, #16]
 8000672:	f8c3 2013 	str.w	r2, [r3, #19]
 8000676:	4a4a      	ldr	r2, [pc, #296]	; (80007a0 <main+0x174>)
 8000678:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800067c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000680:	6018      	str	r0, [r3, #0]
 8000682:	3304      	adds	r3, #4
 8000684:	8019      	strh	r1, [r3, #0]
 8000686:	4a47      	ldr	r2, [pc, #284]	; (80007a4 <main+0x178>)
 8000688:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800068c:	6810      	ldr	r0, [r2, #0]
 800068e:	6018      	str	r0, [r3, #0]
 8000690:	4a45      	ldr	r2, [pc, #276]	; (80007a8 <main+0x17c>)
 8000692:	f107 0332 	add.w	r3, r7, #50	; 0x32
 8000696:	6810      	ldr	r0, [r2, #0]
 8000698:	6018      	str	r0, [r3, #0]
							.ip 	= {192, 168, 0, 101},					// IP address
							.sn 	= {255, 255, 255, 0}};					// Subnet mask
   wizchip_setnetinfo(&netInfo);
 800069a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800069e:	4618      	mov	r0, r3
 80006a0:	f003 fe74 	bl	800438c <wizchip_setnetinfo>

  reg_wizchip_cs_cbfunc(cs_sel, cs_desel);
 80006a4:	4941      	ldr	r1, [pc, #260]	; (80007ac <main+0x180>)
 80006a6:	4842      	ldr	r0, [pc, #264]	; (80007b0 <main+0x184>)
 80006a8:	f003 fd46 	bl	8004138 <reg_wizchip_cs_cbfunc>
  reg_wizchip_spi_cbfunc(spi_rb, spi_wb);
 80006ac:	4941      	ldr	r1, [pc, #260]	; (80007b4 <main+0x188>)
 80006ae:	4842      	ldr	r0, [pc, #264]	; (80007b8 <main+0x18c>)
 80006b0:	f003 fd68 	bl	8004184 <reg_wizchip_spi_cbfunc>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(function3(okunan_veriler, 5) == 0){
 80006b4:	2105      	movs	r1, #5
 80006b6:	4841      	ldr	r0, [pc, #260]	; (80007bc <main+0x190>)
 80006b8:	f000 f9b4 	bl	8000a24 <function3>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d11f      	bne.n	8000702 <main+0xd6>
		  send_uart("Fonksiyon 4 OK... \n");
 80006c2:	483f      	ldr	r0, [pc, #252]	; (80007c0 <main+0x194>)
 80006c4:	f7ff ff9a 	bl	80005fc <send_uart>
		  for(int i=0;i<5;i++)
 80006c8:	2300      	movs	r3, #0
 80006ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80006cc:	e015      	b.n	80006fa <main+0xce>
		  {
			  char mesaj[20];
			  sprintf(mesaj,"- %d",okunan_veriler[i]);
 80006ce:	4a3b      	ldr	r2, [pc, #236]	; (80007bc <main+0x190>)
 80006d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80006d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006d6:	461a      	mov	r2, r3
 80006d8:	f107 0314 	add.w	r3, r7, #20
 80006dc:	4939      	ldr	r1, [pc, #228]	; (80007c4 <main+0x198>)
 80006de:	4618      	mov	r0, r3
 80006e0:	f003 fec6 	bl	8004470 <siprintf>
			  send_uart(mesaj);
 80006e4:	f107 0314 	add.w	r3, r7, #20
 80006e8:	4618      	mov	r0, r3
 80006ea:	f7ff ff87 	bl	80005fc <send_uart>
			  send_uart("..\n");
 80006ee:	4836      	ldr	r0, [pc, #216]	; (80007c8 <main+0x19c>)
 80006f0:	f7ff ff84 	bl	80005fc <send_uart>
		  for(int i=0;i<5;i++)
 80006f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80006f6:	3301      	adds	r3, #1
 80006f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80006fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80006fc:	2b04      	cmp	r3, #4
 80006fe:	dde6      	ble.n	80006ce <main+0xa2>
 8000700:	e00c      	b.n	800071c <main+0xf0>
		  }
	  }
	  else{
		send_uart("Fonksiyon 3 Error... \n");
 8000702:	4832      	ldr	r0, [pc, #200]	; (80007cc <main+0x1a0>)
 8000704:	f7ff ff7a 	bl	80005fc <send_uart>
		while(1)
		{
			HAL_Delay(500);
 8000708:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800070c:	f000 fd34 	bl	8001178 <HAL_Delay>
			HAL_GPIO_TogglePin(Kirmizi_led_GPIO_Port, Kirmizi_led_Pin);
 8000710:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000714:	482e      	ldr	r0, [pc, #184]	; (80007d0 <main+0x1a4>)
 8000716:	f000 ffee 	bl	80016f6 <HAL_GPIO_TogglePin>
			HAL_Delay(500);
 800071a:	e7f5      	b.n	8000708 <main+0xdc>
		}

	  }

	  if (function4(okunan_veriler,5)==0)
 800071c:	2105      	movs	r1, #5
 800071e:	4827      	ldr	r0, [pc, #156]	; (80007bc <main+0x190>)
 8000720:	f000 fa60 	bl	8000be4 <function4>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d11d      	bne.n	8000766 <main+0x13a>
	  {
		  send_uart("Fonksiyon 3 OK... \n");
 800072a:	482a      	ldr	r0, [pc, #168]	; (80007d4 <main+0x1a8>)
 800072c:	f7ff ff66 	bl	80005fc <send_uart>
		  for(int i=0;i<5;i++)
 8000730:	2300      	movs	r3, #0
 8000732:	647b      	str	r3, [r7, #68]	; 0x44
 8000734:	e013      	b.n	800075e <main+0x132>
		  {
			  char mesaj[20];
			  sprintf(mesaj,"- %d",okunan_veriler[i]);
 8000736:	4a21      	ldr	r2, [pc, #132]	; (80007bc <main+0x190>)
 8000738:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800073a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800073e:	461a      	mov	r2, r3
 8000740:	463b      	mov	r3, r7
 8000742:	4920      	ldr	r1, [pc, #128]	; (80007c4 <main+0x198>)
 8000744:	4618      	mov	r0, r3
 8000746:	f003 fe93 	bl	8004470 <siprintf>
			  send_uart(mesaj);
 800074a:	463b      	mov	r3, r7
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff ff55 	bl	80005fc <send_uart>
			  send_uart("..\n");
 8000752:	481d      	ldr	r0, [pc, #116]	; (80007c8 <main+0x19c>)
 8000754:	f7ff ff52 	bl	80005fc <send_uart>
		  for(int i=0;i<5;i++)
 8000758:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800075a:	3301      	adds	r3, #1
 800075c:	647b      	str	r3, [r7, #68]	; 0x44
 800075e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000760:	2b04      	cmp	r3, #4
 8000762:	dde8      	ble.n	8000736 <main+0x10a>
 8000764:	e00c      	b.n	8000780 <main+0x154>
		  }
	  }
	  else
	  {
	  	send_uart("Fonksiyon 3 Error... \n");
 8000766:	4819      	ldr	r0, [pc, #100]	; (80007cc <main+0x1a0>)
 8000768:	f7ff ff48 	bl	80005fc <send_uart>
	  	while(1)
	  	{
	  	    HAL_Delay(500);
 800076c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000770:	f000 fd02 	bl	8001178 <HAL_Delay>
	  		HAL_GPIO_TogglePin(Kirmizi_led_GPIO_Port, Kirmizi_led_Pin);
 8000774:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000778:	4815      	ldr	r0, [pc, #84]	; (80007d0 <main+0x1a4>)
 800077a:	f000 ffbc 	bl	80016f6 <HAL_GPIO_TogglePin>
	  	    HAL_Delay(500);
 800077e:	e7f5      	b.n	800076c <main+0x140>
	  	}
	 }
	 HAL_Delay(1000);
 8000780:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000784:	f000 fcf8 	bl	8001178 <HAL_Delay>
	 HAL_GPIO_TogglePin(Kirmizi_led_GPIO_Port, Kirmizi_led_Pin);
 8000788:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800078c:	4810      	ldr	r0, [pc, #64]	; (80007d0 <main+0x1a4>)
 800078e:	f000 ffb2 	bl	80016f6 <HAL_GPIO_TogglePin>
	 deneme++;
 8000792:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000796:	3301      	adds	r3, #1
 8000798:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	  if(function3(okunan_veriler, 5) == 0){
 800079c:	e78a      	b.n	80006b4 <main+0x88>
 800079e:	bf00      	nop
 80007a0:	08004db0 	.word	0x08004db0
 80007a4:	08004db8 	.word	0x08004db8
 80007a8:	08004dbc 	.word	0x08004dbc
 80007ac:	0800059d 	.word	0x0800059d
 80007b0:	08000585 	.word	0x08000585
 80007b4:	080005d9 	.word	0x080005d9
 80007b8:	080005b5 	.word	0x080005b5
 80007bc:	200000b8 	.word	0x200000b8
 80007c0:	08004d64 	.word	0x08004d64
 80007c4:	08004d78 	.word	0x08004d78
 80007c8:	08004d80 	.word	0x08004d80
 80007cc:	08004d84 	.word	0x08004d84
 80007d0:	40020c00 	.word	0x40020c00
 80007d4:	08004d9c 	.word	0x08004d9c

080007d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b094      	sub	sp, #80	; 0x50
 80007dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007de:	f107 0320 	add.w	r3, r7, #32
 80007e2:	2230      	movs	r2, #48	; 0x30
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f003 fe3a 	bl	8004460 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ec:	f107 030c 	add.w	r3, r7, #12
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
 80007fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fc:	2300      	movs	r3, #0
 80007fe:	60bb      	str	r3, [r7, #8]
 8000800:	4b28      	ldr	r3, [pc, #160]	; (80008a4 <SystemClock_Config+0xcc>)
 8000802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000804:	4a27      	ldr	r2, [pc, #156]	; (80008a4 <SystemClock_Config+0xcc>)
 8000806:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800080a:	6413      	str	r3, [r2, #64]	; 0x40
 800080c:	4b25      	ldr	r3, [pc, #148]	; (80008a4 <SystemClock_Config+0xcc>)
 800080e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000814:	60bb      	str	r3, [r7, #8]
 8000816:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000818:	2300      	movs	r3, #0
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	4b22      	ldr	r3, [pc, #136]	; (80008a8 <SystemClock_Config+0xd0>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a21      	ldr	r2, [pc, #132]	; (80008a8 <SystemClock_Config+0xd0>)
 8000822:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000826:	6013      	str	r3, [r2, #0]
 8000828:	4b1f      	ldr	r3, [pc, #124]	; (80008a8 <SystemClock_Config+0xd0>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000834:	2301      	movs	r3, #1
 8000836:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000838:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800083e:	2302      	movs	r3, #2
 8000840:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000842:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000846:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000848:	2304      	movs	r3, #4
 800084a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 82;
 800084c:	2352      	movs	r3, #82	; 0x52
 800084e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000850:	2302      	movs	r3, #2
 8000852:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000854:	2307      	movs	r3, #7
 8000856:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000858:	f107 0320 	add.w	r3, r7, #32
 800085c:	4618      	mov	r0, r3
 800085e:	f000 ff65 	bl	800172c <HAL_RCC_OscConfig>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000868:	f000 fa9a 	bl	8000da0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800086c:	230f      	movs	r3, #15
 800086e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000870:	2302      	movs	r3, #2
 8000872:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000878:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800087c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800087e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000882:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000884:	f107 030c 	add.w	r3, r7, #12
 8000888:	2102      	movs	r1, #2
 800088a:	4618      	mov	r0, r3
 800088c:	f001 f9c6 	bl	8001c1c <HAL_RCC_ClockConfig>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000896:	f000 fa83 	bl	8000da0 <Error_Handler>
  }
}
 800089a:	bf00      	nop
 800089c:	3750      	adds	r7, #80	; 0x50
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40023800 	.word	0x40023800
 80008a8:	40007000 	.word	0x40007000

080008ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008b0:	4b15      	ldr	r3, [pc, #84]	; (8000908 <MX_SPI1_Init+0x5c>)
 80008b2:	4a16      	ldr	r2, [pc, #88]	; (800090c <MX_SPI1_Init+0x60>)
 80008b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80008b6:	4b14      	ldr	r3, [pc, #80]	; (8000908 <MX_SPI1_Init+0x5c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008bc:	4b12      	ldr	r3, [pc, #72]	; (8000908 <MX_SPI1_Init+0x5c>)
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008c2:	4b11      	ldr	r3, [pc, #68]	; (8000908 <MX_SPI1_Init+0x5c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008c8:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <MX_SPI1_Init+0x5c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008ce:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <MX_SPI1_Init+0x5c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008d4:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <MX_SPI1_Init+0x5c>)
 80008d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008da:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008dc:	4b0a      	ldr	r3, [pc, #40]	; (8000908 <MX_SPI1_Init+0x5c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008e2:	4b09      	ldr	r3, [pc, #36]	; (8000908 <MX_SPI1_Init+0x5c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008e8:	4b07      	ldr	r3, [pc, #28]	; (8000908 <MX_SPI1_Init+0x5c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008ee:	4b06      	ldr	r3, [pc, #24]	; (8000908 <MX_SPI1_Init+0x5c>)
 80008f0:	220a      	movs	r2, #10
 80008f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008f4:	4804      	ldr	r0, [pc, #16]	; (8000908 <MX_SPI1_Init+0x5c>)
 80008f6:	f001 fbb1 	bl	800205c <HAL_SPI_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_SPI1_Init+0x58>
  {
    Error_Handler();
 8000900:	f000 fa4e 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000904:	bf00      	nop
 8000906:	bd80      	pop	{r7, pc}
 8000908:	200000e0 	.word	0x200000e0
 800090c:	40013000 	.word	0x40013000

08000910 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000914:	4b11      	ldr	r3, [pc, #68]	; (800095c <MX_UART5_Init+0x4c>)
 8000916:	4a12      	ldr	r2, [pc, #72]	; (8000960 <MX_UART5_Init+0x50>)
 8000918:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800091a:	4b10      	ldr	r3, [pc, #64]	; (800095c <MX_UART5_Init+0x4c>)
 800091c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000920:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000922:	4b0e      	ldr	r3, [pc, #56]	; (800095c <MX_UART5_Init+0x4c>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000928:	4b0c      	ldr	r3, [pc, #48]	; (800095c <MX_UART5_Init+0x4c>)
 800092a:	2200      	movs	r2, #0
 800092c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800092e:	4b0b      	ldr	r3, [pc, #44]	; (800095c <MX_UART5_Init+0x4c>)
 8000930:	2200      	movs	r2, #0
 8000932:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000934:	4b09      	ldr	r3, [pc, #36]	; (800095c <MX_UART5_Init+0x4c>)
 8000936:	220c      	movs	r2, #12
 8000938:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800093a:	4b08      	ldr	r3, [pc, #32]	; (800095c <MX_UART5_Init+0x4c>)
 800093c:	2200      	movs	r2, #0
 800093e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000940:	4b06      	ldr	r3, [pc, #24]	; (800095c <MX_UART5_Init+0x4c>)
 8000942:	2200      	movs	r2, #0
 8000944:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000946:	4805      	ldr	r0, [pc, #20]	; (800095c <MX_UART5_Init+0x4c>)
 8000948:	f002 f930 	bl	8002bac <HAL_UART_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000952:	f000 fa25 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000138 	.word	0x20000138
 8000960:	40005000 	.word	0x40005000

08000964 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b08a      	sub	sp, #40	; 0x28
 8000968:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096a:	f107 0314 	add.w	r3, r7, #20
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	605a      	str	r2, [r3, #4]
 8000974:	609a      	str	r2, [r3, #8]
 8000976:	60da      	str	r2, [r3, #12]
 8000978:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	613b      	str	r3, [r7, #16]
 800097e:	4b27      	ldr	r3, [pc, #156]	; (8000a1c <MX_GPIO_Init+0xb8>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a26      	ldr	r2, [pc, #152]	; (8000a1c <MX_GPIO_Init+0xb8>)
 8000984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b24      	ldr	r3, [pc, #144]	; (8000a1c <MX_GPIO_Init+0xb8>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000992:	613b      	str	r3, [r7, #16]
 8000994:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	60fb      	str	r3, [r7, #12]
 800099a:	4b20      	ldr	r3, [pc, #128]	; (8000a1c <MX_GPIO_Init+0xb8>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a1f      	ldr	r2, [pc, #124]	; (8000a1c <MX_GPIO_Init+0xb8>)
 80009a0:	f043 0308 	orr.w	r3, r3, #8
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b1d      	ldr	r3, [pc, #116]	; (8000a1c <MX_GPIO_Init+0xb8>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f003 0308 	and.w	r3, r3, #8
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	60bb      	str	r3, [r7, #8]
 80009b6:	4b19      	ldr	r3, [pc, #100]	; (8000a1c <MX_GPIO_Init+0xb8>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a18      	ldr	r2, [pc, #96]	; (8000a1c <MX_GPIO_Init+0xb8>)
 80009bc:	f043 0304 	orr.w	r3, r3, #4
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
 80009c2:	4b16      	ldr	r3, [pc, #88]	; (8000a1c <MX_GPIO_Init+0xb8>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	f003 0304 	and.w	r3, r3, #4
 80009ca:	60bb      	str	r3, [r7, #8]
 80009cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	607b      	str	r3, [r7, #4]
 80009d2:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <MX_GPIO_Init+0xb8>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a11      	ldr	r2, [pc, #68]	; (8000a1c <MX_GPIO_Init+0xb8>)
 80009d8:	f043 0302 	orr.w	r3, r3, #2
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <MX_GPIO_Init+0xb8>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f003 0302 	and.w	r3, r3, #2
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, sari_led_Pin|Kirmizi_led_Pin|CS_Pin_Pin, GPIO_PIN_RESET);
 80009ea:	2200      	movs	r2, #0
 80009ec:	f24c 0180 	movw	r1, #49280	; 0xc080
 80009f0:	480b      	ldr	r0, [pc, #44]	; (8000a20 <MX_GPIO_Init+0xbc>)
 80009f2:	f000 fe67 	bl	80016c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : sari_led_Pin Kirmizi_led_Pin CS_Pin_Pin */
  GPIO_InitStruct.Pin = sari_led_Pin|Kirmizi_led_Pin|CS_Pin_Pin;
 80009f6:	f24c 0380 	movw	r3, #49280	; 0xc080
 80009fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fc:	2301      	movs	r3, #1
 80009fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a04:	2300      	movs	r3, #0
 8000a06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4804      	ldr	r0, [pc, #16]	; (8000a20 <MX_GPIO_Init+0xbc>)
 8000a10:	f000 fcbc 	bl	800138c <HAL_GPIO_Init>

}
 8000a14:	bf00      	nop
 8000a16:	3728      	adds	r7, #40	; 0x28
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40020c00 	.word	0x40020c00

08000a24 <function3>:

/* USER CODE BEGIN 4 */

uint8_t function3(uint16_t *deger,uint8_t adet){
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08c      	sub	sp, #48	; 0x30
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	460b      	mov	r3, r1
 8000a2e:	70fb      	strb	r3, [r7, #3]
	uint8_t s=0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t time_out;
	uint8_t response[12];
	uint8_t indication[8];
	uint8_t master_ip[4]={192, 168, 0, 10}; //host (client) ip address
 8000a36:	4b69      	ldr	r3, [pc, #420]	; (8000bdc <function3+0x1b8>)
 8000a38:	60bb      	str	r3, [r7, #8]
	uint8_t cevap;
	uint8_t received_len=0,baglanma_istegi,RSR_len;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22


	cevap=socket(s,Sn_MR_TCP,502,SF_TCP_NODELAY);
 8000a40:	f897 0023 	ldrb.w	r0, [r7, #35]	; 0x23
 8000a44:	2320      	movs	r3, #32
 8000a46:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	f002 fc70 	bl	8003330 <socket>
 8000a50:	4603      	mov	r3, r0
 8000a52:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	if(cevap!=0)
 8000a56:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d00a      	beq.n	8000a74 <function3+0x50>
	{
		while(1)
		{
			HAL_GPIO_TogglePin(Kirmizi_led_GPIO_Port, Kirmizi_led_Pin);
 8000a5e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a62:	485f      	ldr	r0, [pc, #380]	; (8000be0 <function3+0x1bc>)
 8000a64:	f000 fe47 	bl	80016f6 <HAL_GPIO_TogglePin>
			HAL_Delay(500);
 8000a68:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a6c:	f000 fb84 	bl	8001178 <HAL_Delay>
			return 1;
 8000a70:	2301      	movs	r3, #1
 8000a72:	e0af      	b.n	8000bd4 <function3+0x1b0>
		}
	}
	for(int i=0;i<10;i++)
 8000a74:	2300      	movs	r3, #0
 8000a76:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a78:	e021      	b.n	8000abe <function3+0x9a>
	{

		baglanma_istegi=connect(s,master_ip,502);
 8000a7a:	f107 0108 	add.w	r1, r7, #8
 8000a7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000a82:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 8000a86:	4618      	mov	r0, r3
 8000a88:	f002 fdd6 	bl	8003638 <connect>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		if(baglanma_istegi==SOCK_OK)
 8000a92:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	d106      	bne.n	8000aa8 <function3+0x84>
		{
			HAL_GPIO_WritePin(Kirmizi_led_GPIO_Port, Kirmizi_led_Pin, GPIO_PIN_SET);
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000aa0:	484f      	ldr	r0, [pc, #316]	; (8000be0 <function3+0x1bc>)
 8000aa2:	f000 fe0f 	bl	80016c4 <HAL_GPIO_WritePin>
			break;
 8000aa6:	e00d      	b.n	8000ac4 <function3+0xa0>
		}
		else
		{
			HAL_GPIO_TogglePin(Kirmizi_led_GPIO_Port, Kirmizi_led_Pin);
 8000aa8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000aac:	484c      	ldr	r0, [pc, #304]	; (8000be0 <function3+0x1bc>)
 8000aae:	f000 fe22 	bl	80016f6 <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 8000ab2:	2064      	movs	r0, #100	; 0x64
 8000ab4:	f000 fb60 	bl	8001178 <HAL_Delay>
	for(int i=0;i<10;i++)
 8000ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aba:	3301      	adds	r3, #1
 8000abc:	62bb      	str	r3, [r7, #40]	; 0x28
 8000abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ac0:	2b09      	cmp	r3, #9
 8000ac2:	ddda      	ble.n	8000a7a <function3+0x56>
		}
	}

    if (baglanma_istegi != SOCK_OK) {
 8000ac4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d001      	beq.n	8000ad0 <function3+0xac>
        // Bağlantı başarısız oldu, hata durumunu işleyin
        return 1;
 8000acc:	2301      	movs	r3, #1
 8000ace:	e081      	b.n	8000bd4 <function3+0x1b0>
    }


	response[0]=45;
 8000ad0:	232d      	movs	r3, #45	; 0x2d
 8000ad2:	753b      	strb	r3, [r7, #20]
	response[1]=80;
 8000ad4:	2350      	movs	r3, #80	; 0x50
 8000ad6:	757b      	strb	r3, [r7, #21]
	response[2]=0;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	75bb      	strb	r3, [r7, #22]
	response[3]=0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	75fb      	strb	r3, [r7, #23]
	response[4]=0;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	763b      	strb	r3, [r7, #24]
	response[5]=6;
 8000ae4:	2306      	movs	r3, #6
 8000ae6:	767b      	strb	r3, [r7, #25]
	response[6]=1;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	76bb      	strb	r3, [r7, #26]
	response[7]=3;
 8000aec:	2303      	movs	r3, #3
 8000aee:	76fb      	strb	r3, [r7, #27]
	response[8]=0;
 8000af0:	2300      	movs	r3, #0
 8000af2:	773b      	strb	r3, [r7, #28]
	response[9]=0;
 8000af4:	2300      	movs	r3, #0
 8000af6:	777b      	strb	r3, [r7, #29]
	response[10]=0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	77bb      	strb	r3, [r7, #30]
	response[11]=adet;
 8000afc:	78fb      	ldrb	r3, [r7, #3]
 8000afe:	77fb      	strb	r3, [r7, #31]

	send(s,response,12);
 8000b00:	f107 0114 	add.w	r1, r7, #20
 8000b04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000b08:	220c      	movs	r2, #12
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f002 fe70 	bl	80037f0 <send>
	while(received_len==0)
 8000b10:	e05b      	b.n	8000bca <function3+0x1a6>
	{
		HAL_GPIO_WritePin(sari_led_GPIO_Port, sari_led_Pin, GPIO_PIN_SET);
 8000b12:	2201      	movs	r2, #1
 8000b14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b18:	4831      	ldr	r0, [pc, #196]	; (8000be0 <function3+0x1bc>)
 8000b1a:	f000 fdd3 	bl	80016c4 <HAL_GPIO_WritePin>
		if ((RSR_len = getSn_RX_RSR(s)) > 0)
 8000b1e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000b22:	4618      	mov	r0, r3
 8000b24:	f003 f9b9 	bl	8003e9a <getSn_RX_RSR>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	f887 3020 	strb.w	r3, [r7, #32]
 8000b2e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d03b      	beq.n	8000bae <function3+0x18a>
		{
			received_len=recv(s,indication,RSR_len);
 8000b36:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000b3a:	b29a      	uxth	r2, r3
 8000b3c:	f107 010c 	add.w	r1, r7, #12
 8000b40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000b44:	4618      	mov	r0, r3
 8000b46:	f002 ff4d 	bl	80039e4 <recv>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			if(response[0]==indication[0]&&response[1]==indication[1])
 8000b50:	7d3a      	ldrb	r2, [r7, #20]
 8000b52:	7b3b      	ldrb	r3, [r7, #12]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	d128      	bne.n	8000baa <function3+0x186>
 8000b58:	7d7a      	ldrb	r2, [r7, #21]
 8000b5a:	7b7b      	ldrb	r3, [r7, #13]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d124      	bne.n	8000baa <function3+0x186>
			{
				for(int i=0;i<adet;i++)
 8000b60:	2300      	movs	r3, #0
 8000b62:	627b      	str	r3, [r7, #36]	; 0x24
 8000b64:	e01b      	b.n	8000b9e <function3+0x17a>
				{
					*(deger+i)=(indication[9+(i*2)]<<8)|indication[10+(i*2)];
 8000b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	3309      	adds	r3, #9
 8000b6c:	3330      	adds	r3, #48	; 0x30
 8000b6e:	443b      	add	r3, r7
 8000b70:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000b74:	021b      	lsls	r3, r3, #8
 8000b76:	b21a      	sxth	r2, r3
 8000b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b7a:	3305      	adds	r3, #5
 8000b7c:	005b      	lsls	r3, r3, #1
 8000b7e:	3330      	adds	r3, #48	; 0x30
 8000b80:	443b      	add	r3, r7
 8000b82:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000b86:	b21b      	sxth	r3, r3
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	b219      	sxth	r1, r3
 8000b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b8e:	005b      	lsls	r3, r3, #1
 8000b90:	687a      	ldr	r2, [r7, #4]
 8000b92:	4413      	add	r3, r2
 8000b94:	b28a      	uxth	r2, r1
 8000b96:	801a      	strh	r2, [r3, #0]
				for(int i=0;i<adet;i++)
 8000b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	627b      	str	r3, [r7, #36]	; 0x24
 8000b9e:	78fb      	ldrb	r3, [r7, #3]
 8000ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	dbdf      	blt.n	8000b66 <function3+0x142>
				}
				return 0;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	e014      	b.n	8000bd4 <function3+0x1b0>
			}
			else
			{
				return 2;
 8000baa:	2302      	movs	r3, #2
 8000bac:	e012      	b.n	8000bd4 <function3+0x1b0>
			}
		}
		else
		{
			time_out++;
 8000bae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if(time_out>250)
 8000bb8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000bbc:	2bfa      	cmp	r3, #250	; 0xfa
 8000bbe:	d901      	bls.n	8000bc4 <function3+0x1a0>
			{
				return 4;
 8000bc0:	2304      	movs	r3, #4
 8000bc2:	e007      	b.n	8000bd4 <function3+0x1b0>
			}
		}
		HAL_Delay(1);
 8000bc4:	2001      	movs	r0, #1
 8000bc6:	f000 fad7 	bl	8001178 <HAL_Delay>
	while(received_len==0)
 8000bca:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d09f      	beq.n	8000b12 <function3+0xee>
	}
	return 4;
 8000bd2:	2304      	movs	r3, #4
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3730      	adds	r7, #48	; 0x30
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	0a00a8c0 	.word	0x0a00a8c0
 8000be0:	40020c00 	.word	0x40020c00

08000be4 <function4>:

uint8_t function4(uint16_t *deger, uint8_t adet){
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08e      	sub	sp, #56	; 0x38
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	460b      	mov	r3, r1
 8000bee:	70fb      	strb	r3, [r7, #3]
	uint8_t s=0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t time_out;
	uint8_t response[12];
	uint8_t indication[8];
	uint8_t master_ip[4]={192, 168, 0, 10}; //host (client) ip address
 8000bf6:	4b68      	ldr	r3, [pc, #416]	; (8000d98 <function4+0x1b4>)
 8000bf8:	60fb      	str	r3, [r7, #12]
	uint8_t cevap;
	uint8_t received_len=0,baglanma_istegi,RSR_len;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a


	cevap=socket(s,Sn_MR_TCP,502,SF_TCP_NODELAY);
 8000c00:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
 8000c04:	2320      	movs	r3, #32
 8000c06:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	f002 fb90 	bl	8003330 <socket>
 8000c10:	4603      	mov	r3, r0
 8000c12:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	if(cevap!=0)
 8000c16:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d00a      	beq.n	8000c34 <function4+0x50>
	{
		while(1)
		{
			HAL_GPIO_TogglePin(Kirmizi_led_GPIO_Port, Kirmizi_led_Pin);
 8000c1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c22:	485e      	ldr	r0, [pc, #376]	; (8000d9c <function4+0x1b8>)
 8000c24:	f000 fd67 	bl	80016f6 <HAL_GPIO_TogglePin>
			HAL_Delay(500);
 8000c28:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c2c:	f000 faa4 	bl	8001178 <HAL_Delay>
			return 1;
 8000c30:	2301      	movs	r3, #1
 8000c32:	e0ad      	b.n	8000d90 <function4+0x1ac>
		}
	}
	for(int i=0;i<10;i++)
 8000c34:	2300      	movs	r3, #0
 8000c36:	633b      	str	r3, [r7, #48]	; 0x30
 8000c38:	e021      	b.n	8000c7e <function4+0x9a>
	{

		baglanma_istegi=connect(s,master_ip,502);
 8000c3a:	f107 010c 	add.w	r1, r7, #12
 8000c3e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000c42:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 8000c46:	4618      	mov	r0, r3
 8000c48:	f002 fcf6 	bl	8003638 <connect>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
		if(baglanma_istegi==SOCK_OK)
 8000c52:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d106      	bne.n	8000c68 <function4+0x84>
		{
			HAL_GPIO_WritePin(Kirmizi_led_GPIO_Port, Kirmizi_led_Pin, GPIO_PIN_SET);
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c60:	484e      	ldr	r0, [pc, #312]	; (8000d9c <function4+0x1b8>)
 8000c62:	f000 fd2f 	bl	80016c4 <HAL_GPIO_WritePin>
			break;
 8000c66:	e00d      	b.n	8000c84 <function4+0xa0>
		}
		else
		{
			HAL_GPIO_TogglePin(Kirmizi_led_GPIO_Port, Kirmizi_led_Pin);
 8000c68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c6c:	484b      	ldr	r0, [pc, #300]	; (8000d9c <function4+0x1b8>)
 8000c6e:	f000 fd42 	bl	80016f6 <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 8000c72:	2064      	movs	r0, #100	; 0x64
 8000c74:	f000 fa80 	bl	8001178 <HAL_Delay>
	for(int i=0;i<10;i++)
 8000c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	633b      	str	r3, [r7, #48]	; 0x30
 8000c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c80:	2b09      	cmp	r3, #9
 8000c82:	ddda      	ble.n	8000c3a <function4+0x56>
		}
	}
	response[0]=45;
 8000c84:	232d      	movs	r3, #45	; 0x2d
 8000c86:	763b      	strb	r3, [r7, #24]
	response[1]=80;
 8000c88:	2350      	movs	r3, #80	; 0x50
 8000c8a:	767b      	strb	r3, [r7, #25]
	response[2]=0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	76bb      	strb	r3, [r7, #26]
	response[3]=0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	76fb      	strb	r3, [r7, #27]
	response[4]=0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	773b      	strb	r3, [r7, #28]
	response[5]=6;
 8000c98:	2306      	movs	r3, #6
 8000c9a:	777b      	strb	r3, [r7, #29]
	response[6]=1;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	77bb      	strb	r3, [r7, #30]
	response[7]=4;
 8000ca0:	2304      	movs	r3, #4
 8000ca2:	77fb      	strb	r3, [r7, #31]
	response[8]=0;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	f887 3020 	strb.w	r3, [r7, #32]
	response[9]=0;
 8000caa:	2300      	movs	r3, #0
 8000cac:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	response[10]=0;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	response[11]=adet;
 8000cb6:	78fb      	ldrb	r3, [r7, #3]
 8000cb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	send(s,response,12);
 8000cbc:	f107 0118 	add.w	r1, r7, #24
 8000cc0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000cc4:	220c      	movs	r2, #12
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f002 fd92 	bl	80037f0 <send>
	while(received_len==0)
 8000ccc:	e05b      	b.n	8000d86 <function4+0x1a2>
	{
		HAL_GPIO_WritePin(sari_led_GPIO_Port, sari_led_Pin, GPIO_PIN_SET);
 8000cce:	2201      	movs	r2, #1
 8000cd0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cd4:	4831      	ldr	r0, [pc, #196]	; (8000d9c <function4+0x1b8>)
 8000cd6:	f000 fcf5 	bl	80016c4 <HAL_GPIO_WritePin>
		if ((RSR_len = getSn_RX_RSR(s)) > 0)
 8000cda:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f003 f8db 	bl	8003e9a <getSn_RX_RSR>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000cea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d03b      	beq.n	8000d6a <function4+0x186>
		{
			received_len=recv(s,indication,RSR_len);
 8000cf2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000cf6:	b29a      	uxth	r2, r3
 8000cf8:	f107 0110 	add.w	r1, r7, #16
 8000cfc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000d00:	4618      	mov	r0, r3
 8000d02:	f002 fe6f 	bl	80039e4 <recv>
 8000d06:	4603      	mov	r3, r0
 8000d08:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			if(response[0]==indication[0]&&response[1]==indication[1])
 8000d0c:	7e3a      	ldrb	r2, [r7, #24]
 8000d0e:	7c3b      	ldrb	r3, [r7, #16]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d128      	bne.n	8000d66 <function4+0x182>
 8000d14:	7e7a      	ldrb	r2, [r7, #25]
 8000d16:	7c7b      	ldrb	r3, [r7, #17]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d124      	bne.n	8000d66 <function4+0x182>
			{
				for(int i=0;i<adet;i++)
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d20:	e01b      	b.n	8000d5a <function4+0x176>
				{
					*(deger+i)=(indication[9+(i*2)]<<8)|indication[10+(i*2)];
 8000d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	3309      	adds	r3, #9
 8000d28:	3338      	adds	r3, #56	; 0x38
 8000d2a:	443b      	add	r3, r7
 8000d2c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000d30:	021b      	lsls	r3, r3, #8
 8000d32:	b21a      	sxth	r2, r3
 8000d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d36:	3305      	adds	r3, #5
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	3338      	adds	r3, #56	; 0x38
 8000d3c:	443b      	add	r3, r7
 8000d3e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000d42:	b21b      	sxth	r3, r3
 8000d44:	4313      	orrs	r3, r2
 8000d46:	b219      	sxth	r1, r3
 8000d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	687a      	ldr	r2, [r7, #4]
 8000d4e:	4413      	add	r3, r2
 8000d50:	b28a      	uxth	r2, r1
 8000d52:	801a      	strh	r2, [r3, #0]
				for(int i=0;i<adet;i++)
 8000d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d56:	3301      	adds	r3, #1
 8000d58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d5a:	78fb      	ldrb	r3, [r7, #3]
 8000d5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d5e:	429a      	cmp	r2, r3
 8000d60:	dbdf      	blt.n	8000d22 <function4+0x13e>
				}
				return 0;
 8000d62:	2300      	movs	r3, #0
 8000d64:	e014      	b.n	8000d90 <function4+0x1ac>
			}
			else
			{
				return 2;
 8000d66:	2302      	movs	r3, #2
 8000d68:	e012      	b.n	8000d90 <function4+0x1ac>
			}
		}
		else
		{
			time_out++;
 8000d6a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000d6e:	3301      	adds	r3, #1
 8000d70:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			if(time_out>250)
 8000d74:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000d78:	2bfa      	cmp	r3, #250	; 0xfa
 8000d7a:	d901      	bls.n	8000d80 <function4+0x19c>
			{
				return 4;
 8000d7c:	2304      	movs	r3, #4
 8000d7e:	e007      	b.n	8000d90 <function4+0x1ac>
			}
		}
		HAL_Delay(1);
 8000d80:	2001      	movs	r0, #1
 8000d82:	f000 f9f9 	bl	8001178 <HAL_Delay>
	while(received_len==0)
 8000d86:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d09f      	beq.n	8000cce <function4+0xea>
	}
	return 4;
 8000d8e:	2304      	movs	r3, #4
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3738      	adds	r7, #56	; 0x38
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	0a00a8c0 	.word	0x0a00a8c0
 8000d9c:	40020c00 	.word	0x40020c00

08000da0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000da4:	b672      	cpsid	i
}
 8000da6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000da8:	e7fe      	b.n	8000da8 <Error_Handler+0x8>
	...

08000dac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	607b      	str	r3, [r7, #4]
 8000db6:	4b10      	ldr	r3, [pc, #64]	; (8000df8 <HAL_MspInit+0x4c>)
 8000db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dba:	4a0f      	ldr	r2, [pc, #60]	; (8000df8 <HAL_MspInit+0x4c>)
 8000dbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dc0:	6453      	str	r3, [r2, #68]	; 0x44
 8000dc2:	4b0d      	ldr	r3, [pc, #52]	; (8000df8 <HAL_MspInit+0x4c>)
 8000dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dca:	607b      	str	r3, [r7, #4]
 8000dcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	603b      	str	r3, [r7, #0]
 8000dd2:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <HAL_MspInit+0x4c>)
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd6:	4a08      	ldr	r2, [pc, #32]	; (8000df8 <HAL_MspInit+0x4c>)
 8000dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dde:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <HAL_MspInit+0x4c>)
 8000de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de6:	603b      	str	r3, [r7, #0]
 8000de8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000dea:	2007      	movs	r0, #7
 8000dec:	f000 fa9a 	bl	8001324 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000df0:	bf00      	nop
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40023800 	.word	0x40023800

08000dfc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08a      	sub	sp, #40	; 0x28
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	f107 0314 	add.w	r3, r7, #20
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a19      	ldr	r2, [pc, #100]	; (8000e80 <HAL_SPI_MspInit+0x84>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d12b      	bne.n	8000e76 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	613b      	str	r3, [r7, #16]
 8000e22:	4b18      	ldr	r3, [pc, #96]	; (8000e84 <HAL_SPI_MspInit+0x88>)
 8000e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e26:	4a17      	ldr	r2, [pc, #92]	; (8000e84 <HAL_SPI_MspInit+0x88>)
 8000e28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e2e:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <HAL_SPI_MspInit+0x88>)
 8000e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e36:	613b      	str	r3, [r7, #16]
 8000e38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <HAL_SPI_MspInit+0x88>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	4a10      	ldr	r2, [pc, #64]	; (8000e84 <HAL_SPI_MspInit+0x88>)
 8000e44:	f043 0302 	orr.w	r3, r3, #2
 8000e48:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <HAL_SPI_MspInit+0x88>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	f003 0302 	and.w	r3, r3, #2
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000e56:	2338      	movs	r3, #56	; 0x38
 8000e58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e62:	2303      	movs	r3, #3
 8000e64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e66:	2305      	movs	r3, #5
 8000e68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e6a:	f107 0314 	add.w	r3, r7, #20
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4805      	ldr	r0, [pc, #20]	; (8000e88 <HAL_SPI_MspInit+0x8c>)
 8000e72:	f000 fa8b 	bl	800138c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e76:	bf00      	nop
 8000e78:	3728      	adds	r7, #40	; 0x28
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40013000 	.word	0x40013000
 8000e84:	40023800 	.word	0x40023800
 8000e88:	40020400 	.word	0x40020400

08000e8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b08a      	sub	sp, #40	; 0x28
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e94:	f107 0314 	add.w	r3, r7, #20
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a28      	ldr	r2, [pc, #160]	; (8000f4c <HAL_UART_MspInit+0xc0>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d14a      	bne.n	8000f44 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	613b      	str	r3, [r7, #16]
 8000eb2:	4b27      	ldr	r3, [pc, #156]	; (8000f50 <HAL_UART_MspInit+0xc4>)
 8000eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb6:	4a26      	ldr	r2, [pc, #152]	; (8000f50 <HAL_UART_MspInit+0xc4>)
 8000eb8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000ebc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ebe:	4b24      	ldr	r3, [pc, #144]	; (8000f50 <HAL_UART_MspInit+0xc4>)
 8000ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ec6:	613b      	str	r3, [r7, #16]
 8000ec8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	4b20      	ldr	r3, [pc, #128]	; (8000f50 <HAL_UART_MspInit+0xc4>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	4a1f      	ldr	r2, [pc, #124]	; (8000f50 <HAL_UART_MspInit+0xc4>)
 8000ed4:	f043 0304 	orr.w	r3, r3, #4
 8000ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eda:	4b1d      	ldr	r3, [pc, #116]	; (8000f50 <HAL_UART_MspInit+0xc4>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	f003 0304 	and.w	r3, r3, #4
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60bb      	str	r3, [r7, #8]
 8000eea:	4b19      	ldr	r3, [pc, #100]	; (8000f50 <HAL_UART_MspInit+0xc4>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	4a18      	ldr	r2, [pc, #96]	; (8000f50 <HAL_UART_MspInit+0xc4>)
 8000ef0:	f043 0308 	orr.w	r3, r3, #8
 8000ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef6:	4b16      	ldr	r3, [pc, #88]	; (8000f50 <HAL_UART_MspInit+0xc4>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	f003 0308 	and.w	r3, r3, #8
 8000efe:	60bb      	str	r3, [r7, #8]
 8000f00:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f10:	2303      	movs	r3, #3
 8000f12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000f14:	2308      	movs	r3, #8
 8000f16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f18:	f107 0314 	add.w	r3, r7, #20
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	480d      	ldr	r0, [pc, #52]	; (8000f54 <HAL_UART_MspInit+0xc8>)
 8000f20:	f000 fa34 	bl	800138c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f24:	2304      	movs	r3, #4
 8000f26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f30:	2303      	movs	r3, #3
 8000f32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000f34:	2308      	movs	r3, #8
 8000f36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4806      	ldr	r0, [pc, #24]	; (8000f58 <HAL_UART_MspInit+0xcc>)
 8000f40:	f000 fa24 	bl	800138c <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8000f44:	bf00      	nop
 8000f46:	3728      	adds	r7, #40	; 0x28
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	40005000 	.word	0x40005000
 8000f50:	40023800 	.word	0x40023800
 8000f54:	40020800 	.word	0x40020800
 8000f58:	40020c00 	.word	0x40020c00

08000f5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <NMI_Handler+0x4>

08000f62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f66:	e7fe      	b.n	8000f66 <HardFault_Handler+0x4>

08000f68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f6c:	e7fe      	b.n	8000f6c <MemManage_Handler+0x4>

08000f6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f72:	e7fe      	b.n	8000f72 <BusFault_Handler+0x4>

08000f74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f78:	e7fe      	b.n	8000f78 <UsageFault_Handler+0x4>

08000f7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr

08000f96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fa8:	f000 f8c6 	bl	8001138 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fb8:	4a14      	ldr	r2, [pc, #80]	; (800100c <_sbrk+0x5c>)
 8000fba:	4b15      	ldr	r3, [pc, #84]	; (8001010 <_sbrk+0x60>)
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fc4:	4b13      	ldr	r3, [pc, #76]	; (8001014 <_sbrk+0x64>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d102      	bne.n	8000fd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fcc:	4b11      	ldr	r3, [pc, #68]	; (8001014 <_sbrk+0x64>)
 8000fce:	4a12      	ldr	r2, [pc, #72]	; (8001018 <_sbrk+0x68>)
 8000fd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fd2:	4b10      	ldr	r3, [pc, #64]	; (8001014 <_sbrk+0x64>)
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4413      	add	r3, r2
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d207      	bcs.n	8000ff0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fe0:	f003 fa14 	bl	800440c <__errno>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	220c      	movs	r2, #12
 8000fe8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fea:	f04f 33ff 	mov.w	r3, #4294967295
 8000fee:	e009      	b.n	8001004 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ff0:	4b08      	ldr	r3, [pc, #32]	; (8001014 <_sbrk+0x64>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ff6:	4b07      	ldr	r3, [pc, #28]	; (8001014 <_sbrk+0x64>)
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	4a05      	ldr	r2, [pc, #20]	; (8001014 <_sbrk+0x64>)
 8001000:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001002:	68fb      	ldr	r3, [r7, #12]
}
 8001004:	4618      	mov	r0, r3
 8001006:	3718      	adds	r7, #24
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20020000 	.word	0x20020000
 8001010:	00000400 	.word	0x00000400
 8001014:	2000017c 	.word	0x2000017c
 8001018:	200001b8 	.word	0x200001b8

0800101c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <SystemInit+0x20>)
 8001022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001026:	4a05      	ldr	r2, [pc, #20]	; (800103c <SystemInit+0x20>)
 8001028:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800102c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001040:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001078 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001044:	480d      	ldr	r0, [pc, #52]	; (800107c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001046:	490e      	ldr	r1, [pc, #56]	; (8001080 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001048:	4a0e      	ldr	r2, [pc, #56]	; (8001084 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800104a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800104c:	e002      	b.n	8001054 <LoopCopyDataInit>

0800104e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800104e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001050:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001052:	3304      	adds	r3, #4

08001054 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001054:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001056:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001058:	d3f9      	bcc.n	800104e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800105a:	4a0b      	ldr	r2, [pc, #44]	; (8001088 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800105c:	4c0b      	ldr	r4, [pc, #44]	; (800108c <LoopFillZerobss+0x26>)
  movs r3, #0
 800105e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001060:	e001      	b.n	8001066 <LoopFillZerobss>

08001062 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001062:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001064:	3204      	adds	r2, #4

08001066 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001066:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001068:	d3fb      	bcc.n	8001062 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800106a:	f7ff ffd7 	bl	800101c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800106e:	f003 f9d3 	bl	8004418 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001072:	f7ff fadb 	bl	800062c <main>
  bx  lr    
 8001076:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001078:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800107c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001080:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8001084:	08004e7c 	.word	0x08004e7c
  ldr r2, =_sbss
 8001088:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 800108c:	200001b4 	.word	0x200001b4

08001090 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001090:	e7fe      	b.n	8001090 <ADC_IRQHandler>
	...

08001094 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001098:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <HAL_Init+0x40>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a0d      	ldr	r2, [pc, #52]	; (80010d4 <HAL_Init+0x40>)
 800109e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010a4:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <HAL_Init+0x40>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a0a      	ldr	r2, [pc, #40]	; (80010d4 <HAL_Init+0x40>)
 80010aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010b0:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <HAL_Init+0x40>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a07      	ldr	r2, [pc, #28]	; (80010d4 <HAL_Init+0x40>)
 80010b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010bc:	2003      	movs	r0, #3
 80010be:	f000 f931 	bl	8001324 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010c2:	2000      	movs	r0, #0
 80010c4:	f000 f808 	bl	80010d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010c8:	f7ff fe70 	bl	8000dac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40023c00 	.word	0x40023c00

080010d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010e0:	4b12      	ldr	r3, [pc, #72]	; (800112c <HAL_InitTick+0x54>)
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	4b12      	ldr	r3, [pc, #72]	; (8001130 <HAL_InitTick+0x58>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	4619      	mov	r1, r3
 80010ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80010f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010f6:	4618      	mov	r0, r3
 80010f8:	f000 f93b 	bl	8001372 <HAL_SYSTICK_Config>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e00e      	b.n	8001124 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2b0f      	cmp	r3, #15
 800110a:	d80a      	bhi.n	8001122 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800110c:	2200      	movs	r2, #0
 800110e:	6879      	ldr	r1, [r7, #4]
 8001110:	f04f 30ff 	mov.w	r0, #4294967295
 8001114:	f000 f911 	bl	800133a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001118:	4a06      	ldr	r2, [pc, #24]	; (8001134 <HAL_InitTick+0x5c>)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800111e:	2300      	movs	r3, #0
 8001120:	e000      	b.n	8001124 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
}
 8001124:	4618      	mov	r0, r3
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20000000 	.word	0x20000000
 8001130:	20000008 	.word	0x20000008
 8001134:	20000004 	.word	0x20000004

08001138 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800113c:	4b06      	ldr	r3, [pc, #24]	; (8001158 <HAL_IncTick+0x20>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	461a      	mov	r2, r3
 8001142:	4b06      	ldr	r3, [pc, #24]	; (800115c <HAL_IncTick+0x24>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4413      	add	r3, r2
 8001148:	4a04      	ldr	r2, [pc, #16]	; (800115c <HAL_IncTick+0x24>)
 800114a:	6013      	str	r3, [r2, #0]
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	20000008 	.word	0x20000008
 800115c:	20000180 	.word	0x20000180

08001160 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  return uwTick;
 8001164:	4b03      	ldr	r3, [pc, #12]	; (8001174 <HAL_GetTick+0x14>)
 8001166:	681b      	ldr	r3, [r3, #0]
}
 8001168:	4618      	mov	r0, r3
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	20000180 	.word	0x20000180

08001178 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001180:	f7ff ffee 	bl	8001160 <HAL_GetTick>
 8001184:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001190:	d005      	beq.n	800119e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001192:	4b0a      	ldr	r3, [pc, #40]	; (80011bc <HAL_Delay+0x44>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	461a      	mov	r2, r3
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	4413      	add	r3, r2
 800119c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800119e:	bf00      	nop
 80011a0:	f7ff ffde 	bl	8001160 <HAL_GetTick>
 80011a4:	4602      	mov	r2, r0
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	68fa      	ldr	r2, [r7, #12]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d8f7      	bhi.n	80011a0 <HAL_Delay+0x28>
  {
  }
}
 80011b0:	bf00      	nop
 80011b2:	bf00      	nop
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000008 	.word	0x20000008

080011c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011d0:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <__NVIC_SetPriorityGrouping+0x44>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011d6:	68ba      	ldr	r2, [r7, #8]
 80011d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011dc:	4013      	ands	r3, r2
 80011de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011f2:	4a04      	ldr	r2, [pc, #16]	; (8001204 <__NVIC_SetPriorityGrouping+0x44>)
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	60d3      	str	r3, [r2, #12]
}
 80011f8:	bf00      	nop
 80011fa:	3714      	adds	r7, #20
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800120c:	4b04      	ldr	r3, [pc, #16]	; (8001220 <__NVIC_GetPriorityGrouping+0x18>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	0a1b      	lsrs	r3, r3, #8
 8001212:	f003 0307 	and.w	r3, r3, #7
}
 8001216:	4618      	mov	r0, r3
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	e000ed00 	.word	0xe000ed00

08001224 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	6039      	str	r1, [r7, #0]
 800122e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001234:	2b00      	cmp	r3, #0
 8001236:	db0a      	blt.n	800124e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	b2da      	uxtb	r2, r3
 800123c:	490c      	ldr	r1, [pc, #48]	; (8001270 <__NVIC_SetPriority+0x4c>)
 800123e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001242:	0112      	lsls	r2, r2, #4
 8001244:	b2d2      	uxtb	r2, r2
 8001246:	440b      	add	r3, r1
 8001248:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800124c:	e00a      	b.n	8001264 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	b2da      	uxtb	r2, r3
 8001252:	4908      	ldr	r1, [pc, #32]	; (8001274 <__NVIC_SetPriority+0x50>)
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	f003 030f 	and.w	r3, r3, #15
 800125a:	3b04      	subs	r3, #4
 800125c:	0112      	lsls	r2, r2, #4
 800125e:	b2d2      	uxtb	r2, r2
 8001260:	440b      	add	r3, r1
 8001262:	761a      	strb	r2, [r3, #24]
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	e000e100 	.word	0xe000e100
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001278:	b480      	push	{r7}
 800127a:	b089      	sub	sp, #36	; 0x24
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	f1c3 0307 	rsb	r3, r3, #7
 8001292:	2b04      	cmp	r3, #4
 8001294:	bf28      	it	cs
 8001296:	2304      	movcs	r3, #4
 8001298:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	3304      	adds	r3, #4
 800129e:	2b06      	cmp	r3, #6
 80012a0:	d902      	bls.n	80012a8 <NVIC_EncodePriority+0x30>
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	3b03      	subs	r3, #3
 80012a6:	e000      	b.n	80012aa <NVIC_EncodePriority+0x32>
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ac:	f04f 32ff 	mov.w	r2, #4294967295
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43da      	mvns	r2, r3
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	401a      	ands	r2, r3
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c0:	f04f 31ff 	mov.w	r1, #4294967295
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ca:	43d9      	mvns	r1, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d0:	4313      	orrs	r3, r2
         );
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3724      	adds	r7, #36	; 0x24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
	...

080012e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3b01      	subs	r3, #1
 80012ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012f0:	d301      	bcc.n	80012f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012f2:	2301      	movs	r3, #1
 80012f4:	e00f      	b.n	8001316 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012f6:	4a0a      	ldr	r2, [pc, #40]	; (8001320 <SysTick_Config+0x40>)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012fe:	210f      	movs	r1, #15
 8001300:	f04f 30ff 	mov.w	r0, #4294967295
 8001304:	f7ff ff8e 	bl	8001224 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001308:	4b05      	ldr	r3, [pc, #20]	; (8001320 <SysTick_Config+0x40>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800130e:	4b04      	ldr	r3, [pc, #16]	; (8001320 <SysTick_Config+0x40>)
 8001310:	2207      	movs	r2, #7
 8001312:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	e000e010 	.word	0xe000e010

08001324 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f7ff ff47 	bl	80011c0 <__NVIC_SetPriorityGrouping>
}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800133a:	b580      	push	{r7, lr}
 800133c:	b086      	sub	sp, #24
 800133e:	af00      	add	r7, sp, #0
 8001340:	4603      	mov	r3, r0
 8001342:	60b9      	str	r1, [r7, #8]
 8001344:	607a      	str	r2, [r7, #4]
 8001346:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800134c:	f7ff ff5c 	bl	8001208 <__NVIC_GetPriorityGrouping>
 8001350:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	68b9      	ldr	r1, [r7, #8]
 8001356:	6978      	ldr	r0, [r7, #20]
 8001358:	f7ff ff8e 	bl	8001278 <NVIC_EncodePriority>
 800135c:	4602      	mov	r2, r0
 800135e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001362:	4611      	mov	r1, r2
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff ff5d 	bl	8001224 <__NVIC_SetPriority>
}
 800136a:	bf00      	nop
 800136c:	3718      	adds	r7, #24
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b082      	sub	sp, #8
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f7ff ffb0 	bl	80012e0 <SysTick_Config>
 8001380:	4603      	mov	r3, r0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
	...

0800138c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800138c:	b480      	push	{r7}
 800138e:	b089      	sub	sp, #36	; 0x24
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001396:	2300      	movs	r3, #0
 8001398:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800139a:	2300      	movs	r3, #0
 800139c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800139e:	2300      	movs	r3, #0
 80013a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013a2:	2300      	movs	r3, #0
 80013a4:	61fb      	str	r3, [r7, #28]
 80013a6:	e16b      	b.n	8001680 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013a8:	2201      	movs	r2, #1
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	697a      	ldr	r2, [r7, #20]
 80013b8:	4013      	ands	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013bc:	693a      	ldr	r2, [r7, #16]
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	f040 815a 	bne.w	800167a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f003 0303 	and.w	r3, r3, #3
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d005      	beq.n	80013de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d130      	bne.n	8001440 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	2203      	movs	r2, #3
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	43db      	mvns	r3, r3
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4013      	ands	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	68da      	ldr	r2, [r3, #12]
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4313      	orrs	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001414:	2201      	movs	r2, #1
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	43db      	mvns	r3, r3
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	4013      	ands	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	091b      	lsrs	r3, r3, #4
 800142a:	f003 0201 	and.w	r2, r3, #1
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	4313      	orrs	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f003 0303 	and.w	r3, r3, #3
 8001448:	2b03      	cmp	r3, #3
 800144a:	d017      	beq.n	800147c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	2203      	movs	r2, #3
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	43db      	mvns	r3, r3
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	4013      	ands	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	689a      	ldr	r2, [r3, #8]
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	4313      	orrs	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f003 0303 	and.w	r3, r3, #3
 8001484:	2b02      	cmp	r3, #2
 8001486:	d123      	bne.n	80014d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	08da      	lsrs	r2, r3, #3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	3208      	adds	r2, #8
 8001490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001494:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	f003 0307 	and.w	r3, r3, #7
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	220f      	movs	r2, #15
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	43db      	mvns	r3, r3
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	4013      	ands	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	691a      	ldr	r2, [r3, #16]
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	4313      	orrs	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	08da      	lsrs	r2, r3, #3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	3208      	adds	r2, #8
 80014ca:	69b9      	ldr	r1, [r7, #24]
 80014cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	2203      	movs	r2, #3
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	43db      	mvns	r3, r3
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	4013      	ands	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f003 0203 	and.w	r2, r3, #3
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800150c:	2b00      	cmp	r3, #0
 800150e:	f000 80b4 	beq.w	800167a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	4b60      	ldr	r3, [pc, #384]	; (8001698 <HAL_GPIO_Init+0x30c>)
 8001518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151a:	4a5f      	ldr	r2, [pc, #380]	; (8001698 <HAL_GPIO_Init+0x30c>)
 800151c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001520:	6453      	str	r3, [r2, #68]	; 0x44
 8001522:	4b5d      	ldr	r3, [pc, #372]	; (8001698 <HAL_GPIO_Init+0x30c>)
 8001524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001526:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800152e:	4a5b      	ldr	r2, [pc, #364]	; (800169c <HAL_GPIO_Init+0x310>)
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	089b      	lsrs	r3, r3, #2
 8001534:	3302      	adds	r3, #2
 8001536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800153a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	f003 0303 	and.w	r3, r3, #3
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	220f      	movs	r2, #15
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	43db      	mvns	r3, r3
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	4013      	ands	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a52      	ldr	r2, [pc, #328]	; (80016a0 <HAL_GPIO_Init+0x314>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d02b      	beq.n	80015b2 <HAL_GPIO_Init+0x226>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a51      	ldr	r2, [pc, #324]	; (80016a4 <HAL_GPIO_Init+0x318>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d025      	beq.n	80015ae <HAL_GPIO_Init+0x222>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a50      	ldr	r2, [pc, #320]	; (80016a8 <HAL_GPIO_Init+0x31c>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d01f      	beq.n	80015aa <HAL_GPIO_Init+0x21e>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a4f      	ldr	r2, [pc, #316]	; (80016ac <HAL_GPIO_Init+0x320>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d019      	beq.n	80015a6 <HAL_GPIO_Init+0x21a>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a4e      	ldr	r2, [pc, #312]	; (80016b0 <HAL_GPIO_Init+0x324>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d013      	beq.n	80015a2 <HAL_GPIO_Init+0x216>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a4d      	ldr	r2, [pc, #308]	; (80016b4 <HAL_GPIO_Init+0x328>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d00d      	beq.n	800159e <HAL_GPIO_Init+0x212>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a4c      	ldr	r2, [pc, #304]	; (80016b8 <HAL_GPIO_Init+0x32c>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d007      	beq.n	800159a <HAL_GPIO_Init+0x20e>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a4b      	ldr	r2, [pc, #300]	; (80016bc <HAL_GPIO_Init+0x330>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d101      	bne.n	8001596 <HAL_GPIO_Init+0x20a>
 8001592:	2307      	movs	r3, #7
 8001594:	e00e      	b.n	80015b4 <HAL_GPIO_Init+0x228>
 8001596:	2308      	movs	r3, #8
 8001598:	e00c      	b.n	80015b4 <HAL_GPIO_Init+0x228>
 800159a:	2306      	movs	r3, #6
 800159c:	e00a      	b.n	80015b4 <HAL_GPIO_Init+0x228>
 800159e:	2305      	movs	r3, #5
 80015a0:	e008      	b.n	80015b4 <HAL_GPIO_Init+0x228>
 80015a2:	2304      	movs	r3, #4
 80015a4:	e006      	b.n	80015b4 <HAL_GPIO_Init+0x228>
 80015a6:	2303      	movs	r3, #3
 80015a8:	e004      	b.n	80015b4 <HAL_GPIO_Init+0x228>
 80015aa:	2302      	movs	r3, #2
 80015ac:	e002      	b.n	80015b4 <HAL_GPIO_Init+0x228>
 80015ae:	2301      	movs	r3, #1
 80015b0:	e000      	b.n	80015b4 <HAL_GPIO_Init+0x228>
 80015b2:	2300      	movs	r3, #0
 80015b4:	69fa      	ldr	r2, [r7, #28]
 80015b6:	f002 0203 	and.w	r2, r2, #3
 80015ba:	0092      	lsls	r2, r2, #2
 80015bc:	4093      	lsls	r3, r2
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015c4:	4935      	ldr	r1, [pc, #212]	; (800169c <HAL_GPIO_Init+0x310>)
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	089b      	lsrs	r3, r3, #2
 80015ca:	3302      	adds	r3, #2
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015d2:	4b3b      	ldr	r3, [pc, #236]	; (80016c0 <HAL_GPIO_Init+0x334>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	43db      	mvns	r3, r3
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	4013      	ands	r3, r2
 80015e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d003      	beq.n	80015f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015f6:	4a32      	ldr	r2, [pc, #200]	; (80016c0 <HAL_GPIO_Init+0x334>)
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015fc:	4b30      	ldr	r3, [pc, #192]	; (80016c0 <HAL_GPIO_Init+0x334>)
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	43db      	mvns	r3, r3
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	4013      	ands	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d003      	beq.n	8001620 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	4313      	orrs	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001620:	4a27      	ldr	r2, [pc, #156]	; (80016c0 <HAL_GPIO_Init+0x334>)
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001626:	4b26      	ldr	r3, [pc, #152]	; (80016c0 <HAL_GPIO_Init+0x334>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	43db      	mvns	r3, r3
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	4013      	ands	r3, r2
 8001634:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d003      	beq.n	800164a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	4313      	orrs	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800164a:	4a1d      	ldr	r2, [pc, #116]	; (80016c0 <HAL_GPIO_Init+0x334>)
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001650:	4b1b      	ldr	r3, [pc, #108]	; (80016c0 <HAL_GPIO_Init+0x334>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	43db      	mvns	r3, r3
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	4013      	ands	r3, r2
 800165e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d003      	beq.n	8001674 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	4313      	orrs	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001674:	4a12      	ldr	r2, [pc, #72]	; (80016c0 <HAL_GPIO_Init+0x334>)
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	3301      	adds	r3, #1
 800167e:	61fb      	str	r3, [r7, #28]
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	2b0f      	cmp	r3, #15
 8001684:	f67f ae90 	bls.w	80013a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001688:	bf00      	nop
 800168a:	bf00      	nop
 800168c:	3724      	adds	r7, #36	; 0x24
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	40023800 	.word	0x40023800
 800169c:	40013800 	.word	0x40013800
 80016a0:	40020000 	.word	0x40020000
 80016a4:	40020400 	.word	0x40020400
 80016a8:	40020800 	.word	0x40020800
 80016ac:	40020c00 	.word	0x40020c00
 80016b0:	40021000 	.word	0x40021000
 80016b4:	40021400 	.word	0x40021400
 80016b8:	40021800 	.word	0x40021800
 80016bc:	40021c00 	.word	0x40021c00
 80016c0:	40013c00 	.word	0x40013c00

080016c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	460b      	mov	r3, r1
 80016ce:	807b      	strh	r3, [r7, #2]
 80016d0:	4613      	mov	r3, r2
 80016d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016d4:	787b      	ldrb	r3, [r7, #1]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d003      	beq.n	80016e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016da:	887a      	ldrh	r2, [r7, #2]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016e0:	e003      	b.n	80016ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016e2:	887b      	ldrh	r3, [r7, #2]
 80016e4:	041a      	lsls	r2, r3, #16
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	619a      	str	r2, [r3, #24]
}
 80016ea:	bf00      	nop
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr

080016f6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016f6:	b480      	push	{r7}
 80016f8:	b085      	sub	sp, #20
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
 80016fe:	460b      	mov	r3, r1
 8001700:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	695b      	ldr	r3, [r3, #20]
 8001706:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001708:	887a      	ldrh	r2, [r7, #2]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	4013      	ands	r3, r2
 800170e:	041a      	lsls	r2, r3, #16
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	43d9      	mvns	r1, r3
 8001714:	887b      	ldrh	r3, [r7, #2]
 8001716:	400b      	ands	r3, r1
 8001718:	431a      	orrs	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	619a      	str	r2, [r3, #24]
}
 800171e:	bf00      	nop
 8001720:	3714      	adds	r7, #20
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
	...

0800172c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d101      	bne.n	800173e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e267      	b.n	8001c0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	2b00      	cmp	r3, #0
 8001748:	d075      	beq.n	8001836 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800174a:	4b88      	ldr	r3, [pc, #544]	; (800196c <HAL_RCC_OscConfig+0x240>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f003 030c 	and.w	r3, r3, #12
 8001752:	2b04      	cmp	r3, #4
 8001754:	d00c      	beq.n	8001770 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001756:	4b85      	ldr	r3, [pc, #532]	; (800196c <HAL_RCC_OscConfig+0x240>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800175e:	2b08      	cmp	r3, #8
 8001760:	d112      	bne.n	8001788 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001762:	4b82      	ldr	r3, [pc, #520]	; (800196c <HAL_RCC_OscConfig+0x240>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800176a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800176e:	d10b      	bne.n	8001788 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001770:	4b7e      	ldr	r3, [pc, #504]	; (800196c <HAL_RCC_OscConfig+0x240>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d05b      	beq.n	8001834 <HAL_RCC_OscConfig+0x108>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d157      	bne.n	8001834 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e242      	b.n	8001c0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001790:	d106      	bne.n	80017a0 <HAL_RCC_OscConfig+0x74>
 8001792:	4b76      	ldr	r3, [pc, #472]	; (800196c <HAL_RCC_OscConfig+0x240>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a75      	ldr	r2, [pc, #468]	; (800196c <HAL_RCC_OscConfig+0x240>)
 8001798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800179c:	6013      	str	r3, [r2, #0]
 800179e:	e01d      	b.n	80017dc <HAL_RCC_OscConfig+0xb0>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017a8:	d10c      	bne.n	80017c4 <HAL_RCC_OscConfig+0x98>
 80017aa:	4b70      	ldr	r3, [pc, #448]	; (800196c <HAL_RCC_OscConfig+0x240>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a6f      	ldr	r2, [pc, #444]	; (800196c <HAL_RCC_OscConfig+0x240>)
 80017b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017b4:	6013      	str	r3, [r2, #0]
 80017b6:	4b6d      	ldr	r3, [pc, #436]	; (800196c <HAL_RCC_OscConfig+0x240>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a6c      	ldr	r2, [pc, #432]	; (800196c <HAL_RCC_OscConfig+0x240>)
 80017bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017c0:	6013      	str	r3, [r2, #0]
 80017c2:	e00b      	b.n	80017dc <HAL_RCC_OscConfig+0xb0>
 80017c4:	4b69      	ldr	r3, [pc, #420]	; (800196c <HAL_RCC_OscConfig+0x240>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a68      	ldr	r2, [pc, #416]	; (800196c <HAL_RCC_OscConfig+0x240>)
 80017ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ce:	6013      	str	r3, [r2, #0]
 80017d0:	4b66      	ldr	r3, [pc, #408]	; (800196c <HAL_RCC_OscConfig+0x240>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a65      	ldr	r2, [pc, #404]	; (800196c <HAL_RCC_OscConfig+0x240>)
 80017d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d013      	beq.n	800180c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e4:	f7ff fcbc 	bl	8001160 <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017ec:	f7ff fcb8 	bl	8001160 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b64      	cmp	r3, #100	; 0x64
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e207      	b.n	8001c0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017fe:	4b5b      	ldr	r3, [pc, #364]	; (800196c <HAL_RCC_OscConfig+0x240>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d0f0      	beq.n	80017ec <HAL_RCC_OscConfig+0xc0>
 800180a:	e014      	b.n	8001836 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800180c:	f7ff fca8 	bl	8001160 <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001812:	e008      	b.n	8001826 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001814:	f7ff fca4 	bl	8001160 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b64      	cmp	r3, #100	; 0x64
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e1f3      	b.n	8001c0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001826:	4b51      	ldr	r3, [pc, #324]	; (800196c <HAL_RCC_OscConfig+0x240>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1f0      	bne.n	8001814 <HAL_RCC_OscConfig+0xe8>
 8001832:	e000      	b.n	8001836 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001834:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d063      	beq.n	800190a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001842:	4b4a      	ldr	r3, [pc, #296]	; (800196c <HAL_RCC_OscConfig+0x240>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f003 030c 	and.w	r3, r3, #12
 800184a:	2b00      	cmp	r3, #0
 800184c:	d00b      	beq.n	8001866 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800184e:	4b47      	ldr	r3, [pc, #284]	; (800196c <HAL_RCC_OscConfig+0x240>)
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001856:	2b08      	cmp	r3, #8
 8001858:	d11c      	bne.n	8001894 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800185a:	4b44      	ldr	r3, [pc, #272]	; (800196c <HAL_RCC_OscConfig+0x240>)
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d116      	bne.n	8001894 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001866:	4b41      	ldr	r3, [pc, #260]	; (800196c <HAL_RCC_OscConfig+0x240>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d005      	beq.n	800187e <HAL_RCC_OscConfig+0x152>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d001      	beq.n	800187e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e1c7      	b.n	8001c0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800187e:	4b3b      	ldr	r3, [pc, #236]	; (800196c <HAL_RCC_OscConfig+0x240>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	691b      	ldr	r3, [r3, #16]
 800188a:	00db      	lsls	r3, r3, #3
 800188c:	4937      	ldr	r1, [pc, #220]	; (800196c <HAL_RCC_OscConfig+0x240>)
 800188e:	4313      	orrs	r3, r2
 8001890:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001892:	e03a      	b.n	800190a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d020      	beq.n	80018de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800189c:	4b34      	ldr	r3, [pc, #208]	; (8001970 <HAL_RCC_OscConfig+0x244>)
 800189e:	2201      	movs	r2, #1
 80018a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a2:	f7ff fc5d 	bl	8001160 <HAL_GetTick>
 80018a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a8:	e008      	b.n	80018bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018aa:	f7ff fc59 	bl	8001160 <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e1a8      	b.n	8001c0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018bc:	4b2b      	ldr	r3, [pc, #172]	; (800196c <HAL_RCC_OscConfig+0x240>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d0f0      	beq.n	80018aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c8:	4b28      	ldr	r3, [pc, #160]	; (800196c <HAL_RCC_OscConfig+0x240>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	691b      	ldr	r3, [r3, #16]
 80018d4:	00db      	lsls	r3, r3, #3
 80018d6:	4925      	ldr	r1, [pc, #148]	; (800196c <HAL_RCC_OscConfig+0x240>)
 80018d8:	4313      	orrs	r3, r2
 80018da:	600b      	str	r3, [r1, #0]
 80018dc:	e015      	b.n	800190a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018de:	4b24      	ldr	r3, [pc, #144]	; (8001970 <HAL_RCC_OscConfig+0x244>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e4:	f7ff fc3c 	bl	8001160 <HAL_GetTick>
 80018e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ea:	e008      	b.n	80018fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018ec:	f7ff fc38 	bl	8001160 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e187      	b.n	8001c0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018fe:	4b1b      	ldr	r3, [pc, #108]	; (800196c <HAL_RCC_OscConfig+0x240>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d1f0      	bne.n	80018ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0308 	and.w	r3, r3, #8
 8001912:	2b00      	cmp	r3, #0
 8001914:	d036      	beq.n	8001984 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	695b      	ldr	r3, [r3, #20]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d016      	beq.n	800194c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800191e:	4b15      	ldr	r3, [pc, #84]	; (8001974 <HAL_RCC_OscConfig+0x248>)
 8001920:	2201      	movs	r2, #1
 8001922:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001924:	f7ff fc1c 	bl	8001160 <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800192c:	f7ff fc18 	bl	8001160 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b02      	cmp	r3, #2
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e167      	b.n	8001c0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800193e:	4b0b      	ldr	r3, [pc, #44]	; (800196c <HAL_RCC_OscConfig+0x240>)
 8001940:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d0f0      	beq.n	800192c <HAL_RCC_OscConfig+0x200>
 800194a:	e01b      	b.n	8001984 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800194c:	4b09      	ldr	r3, [pc, #36]	; (8001974 <HAL_RCC_OscConfig+0x248>)
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001952:	f7ff fc05 	bl	8001160 <HAL_GetTick>
 8001956:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001958:	e00e      	b.n	8001978 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800195a:	f7ff fc01 	bl	8001160 <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	2b02      	cmp	r3, #2
 8001966:	d907      	bls.n	8001978 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e150      	b.n	8001c0e <HAL_RCC_OscConfig+0x4e2>
 800196c:	40023800 	.word	0x40023800
 8001970:	42470000 	.word	0x42470000
 8001974:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001978:	4b88      	ldr	r3, [pc, #544]	; (8001b9c <HAL_RCC_OscConfig+0x470>)
 800197a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800197c:	f003 0302 	and.w	r3, r3, #2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d1ea      	bne.n	800195a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0304 	and.w	r3, r3, #4
 800198c:	2b00      	cmp	r3, #0
 800198e:	f000 8097 	beq.w	8001ac0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001992:	2300      	movs	r3, #0
 8001994:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001996:	4b81      	ldr	r3, [pc, #516]	; (8001b9c <HAL_RCC_OscConfig+0x470>)
 8001998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d10f      	bne.n	80019c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019a2:	2300      	movs	r3, #0
 80019a4:	60bb      	str	r3, [r7, #8]
 80019a6:	4b7d      	ldr	r3, [pc, #500]	; (8001b9c <HAL_RCC_OscConfig+0x470>)
 80019a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019aa:	4a7c      	ldr	r2, [pc, #496]	; (8001b9c <HAL_RCC_OscConfig+0x470>)
 80019ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019b0:	6413      	str	r3, [r2, #64]	; 0x40
 80019b2:	4b7a      	ldr	r3, [pc, #488]	; (8001b9c <HAL_RCC_OscConfig+0x470>)
 80019b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ba:	60bb      	str	r3, [r7, #8]
 80019bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019be:	2301      	movs	r3, #1
 80019c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c2:	4b77      	ldr	r3, [pc, #476]	; (8001ba0 <HAL_RCC_OscConfig+0x474>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d118      	bne.n	8001a00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019ce:	4b74      	ldr	r3, [pc, #464]	; (8001ba0 <HAL_RCC_OscConfig+0x474>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a73      	ldr	r2, [pc, #460]	; (8001ba0 <HAL_RCC_OscConfig+0x474>)
 80019d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019da:	f7ff fbc1 	bl	8001160 <HAL_GetTick>
 80019de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e0:	e008      	b.n	80019f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019e2:	f7ff fbbd 	bl	8001160 <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e10c      	b.n	8001c0e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f4:	4b6a      	ldr	r3, [pc, #424]	; (8001ba0 <HAL_RCC_OscConfig+0x474>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d0f0      	beq.n	80019e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d106      	bne.n	8001a16 <HAL_RCC_OscConfig+0x2ea>
 8001a08:	4b64      	ldr	r3, [pc, #400]	; (8001b9c <HAL_RCC_OscConfig+0x470>)
 8001a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a0c:	4a63      	ldr	r2, [pc, #396]	; (8001b9c <HAL_RCC_OscConfig+0x470>)
 8001a0e:	f043 0301 	orr.w	r3, r3, #1
 8001a12:	6713      	str	r3, [r2, #112]	; 0x70
 8001a14:	e01c      	b.n	8001a50 <HAL_RCC_OscConfig+0x324>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	2b05      	cmp	r3, #5
 8001a1c:	d10c      	bne.n	8001a38 <HAL_RCC_OscConfig+0x30c>
 8001a1e:	4b5f      	ldr	r3, [pc, #380]	; (8001b9c <HAL_RCC_OscConfig+0x470>)
 8001a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a22:	4a5e      	ldr	r2, [pc, #376]	; (8001b9c <HAL_RCC_OscConfig+0x470>)
 8001a24:	f043 0304 	orr.w	r3, r3, #4
 8001a28:	6713      	str	r3, [r2, #112]	; 0x70
 8001a2a:	4b5c      	ldr	r3, [pc, #368]	; (8001b9c <HAL_RCC_OscConfig+0x470>)
 8001a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a2e:	4a5b      	ldr	r2, [pc, #364]	; (8001b9c <HAL_RCC_OscConfig+0x470>)
 8001a30:	f043 0301 	orr.w	r3, r3, #1
 8001a34:	6713      	str	r3, [r2, #112]	; 0x70
 8001a36:	e00b      	b.n	8001a50 <HAL_RCC_OscConfig+0x324>
 8001a38:	4b58      	ldr	r3, [pc, #352]	; (8001b9c <HAL_RCC_OscConfig+0x470>)
 8001a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a3c:	4a57      	ldr	r2, [pc, #348]	; (8001b9c <HAL_RCC_OscConfig+0x470>)
 8001a3e:	f023 0301 	bic.w	r3, r3, #1
 8001a42:	6713      	str	r3, [r2, #112]	; 0x70
 8001a44:	4b55      	ldr	r3, [pc, #340]	; (8001b9c <HAL_RCC_OscConfig+0x470>)
 8001a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a48:	4a54      	ldr	r2, [pc, #336]	; (8001b9c <HAL_RCC_OscConfig+0x470>)
 8001a4a:	f023 0304 	bic.w	r3, r3, #4
 8001a4e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d015      	beq.n	8001a84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a58:	f7ff fb82 	bl	8001160 <HAL_GetTick>
 8001a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a5e:	e00a      	b.n	8001a76 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a60:	f7ff fb7e 	bl	8001160 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e0cb      	b.n	8001c0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a76:	4b49      	ldr	r3, [pc, #292]	; (8001b9c <HAL_RCC_OscConfig+0x470>)
 8001a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d0ee      	beq.n	8001a60 <HAL_RCC_OscConfig+0x334>
 8001a82:	e014      	b.n	8001aae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a84:	f7ff fb6c 	bl	8001160 <HAL_GetTick>
 8001a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a8a:	e00a      	b.n	8001aa2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a8c:	f7ff fb68 	bl	8001160 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e0b5      	b.n	8001c0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aa2:	4b3e      	ldr	r3, [pc, #248]	; (8001b9c <HAL_RCC_OscConfig+0x470>)
 8001aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d1ee      	bne.n	8001a8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001aae:	7dfb      	ldrb	r3, [r7, #23]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d105      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ab4:	4b39      	ldr	r3, [pc, #228]	; (8001b9c <HAL_RCC_OscConfig+0x470>)
 8001ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab8:	4a38      	ldr	r2, [pc, #224]	; (8001b9c <HAL_RCC_OscConfig+0x470>)
 8001aba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001abe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	f000 80a1 	beq.w	8001c0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001aca:	4b34      	ldr	r3, [pc, #208]	; (8001b9c <HAL_RCC_OscConfig+0x470>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f003 030c 	and.w	r3, r3, #12
 8001ad2:	2b08      	cmp	r3, #8
 8001ad4:	d05c      	beq.n	8001b90 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d141      	bne.n	8001b62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ade:	4b31      	ldr	r3, [pc, #196]	; (8001ba4 <HAL_RCC_OscConfig+0x478>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae4:	f7ff fb3c 	bl	8001160 <HAL_GetTick>
 8001ae8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aea:	e008      	b.n	8001afe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aec:	f7ff fb38 	bl	8001160 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e087      	b.n	8001c0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001afe:	4b27      	ldr	r3, [pc, #156]	; (8001b9c <HAL_RCC_OscConfig+0x470>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1f0      	bne.n	8001aec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	69da      	ldr	r2, [r3, #28]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a1b      	ldr	r3, [r3, #32]
 8001b12:	431a      	orrs	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b18:	019b      	lsls	r3, r3, #6
 8001b1a:	431a      	orrs	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b20:	085b      	lsrs	r3, r3, #1
 8001b22:	3b01      	subs	r3, #1
 8001b24:	041b      	lsls	r3, r3, #16
 8001b26:	431a      	orrs	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b2c:	061b      	lsls	r3, r3, #24
 8001b2e:	491b      	ldr	r1, [pc, #108]	; (8001b9c <HAL_RCC_OscConfig+0x470>)
 8001b30:	4313      	orrs	r3, r2
 8001b32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b34:	4b1b      	ldr	r3, [pc, #108]	; (8001ba4 <HAL_RCC_OscConfig+0x478>)
 8001b36:	2201      	movs	r2, #1
 8001b38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3a:	f7ff fb11 	bl	8001160 <HAL_GetTick>
 8001b3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b40:	e008      	b.n	8001b54 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b42:	f7ff fb0d 	bl	8001160 <HAL_GetTick>
 8001b46:	4602      	mov	r2, r0
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e05c      	b.n	8001c0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b54:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <HAL_RCC_OscConfig+0x470>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d0f0      	beq.n	8001b42 <HAL_RCC_OscConfig+0x416>
 8001b60:	e054      	b.n	8001c0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b62:	4b10      	ldr	r3, [pc, #64]	; (8001ba4 <HAL_RCC_OscConfig+0x478>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b68:	f7ff fafa 	bl	8001160 <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b70:	f7ff faf6 	bl	8001160 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e045      	b.n	8001c0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b82:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <HAL_RCC_OscConfig+0x470>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1f0      	bne.n	8001b70 <HAL_RCC_OscConfig+0x444>
 8001b8e:	e03d      	b.n	8001c0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d107      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e038      	b.n	8001c0e <HAL_RCC_OscConfig+0x4e2>
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	40007000 	.word	0x40007000
 8001ba4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ba8:	4b1b      	ldr	r3, [pc, #108]	; (8001c18 <HAL_RCC_OscConfig+0x4ec>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	699b      	ldr	r3, [r3, #24]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d028      	beq.n	8001c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d121      	bne.n	8001c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d11a      	bne.n	8001c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bd2:	68fa      	ldr	r2, [r7, #12]
 8001bd4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001bd8:	4013      	ands	r3, r2
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bde:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d111      	bne.n	8001c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bee:	085b      	lsrs	r3, r3, #1
 8001bf0:	3b01      	subs	r3, #1
 8001bf2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d107      	bne.n	8001c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d001      	beq.n	8001c0c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e000      	b.n	8001c0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3718      	adds	r7, #24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40023800 	.word	0x40023800

08001c1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d101      	bne.n	8001c30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e0cc      	b.n	8001dca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c30:	4b68      	ldr	r3, [pc, #416]	; (8001dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0307 	and.w	r3, r3, #7
 8001c38:	683a      	ldr	r2, [r7, #0]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d90c      	bls.n	8001c58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c3e:	4b65      	ldr	r3, [pc, #404]	; (8001dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c40:	683a      	ldr	r2, [r7, #0]
 8001c42:	b2d2      	uxtb	r2, r2
 8001c44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c46:	4b63      	ldr	r3, [pc, #396]	; (8001dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	683a      	ldr	r2, [r7, #0]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d001      	beq.n	8001c58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e0b8      	b.n	8001dca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d020      	beq.n	8001ca6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0304 	and.w	r3, r3, #4
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d005      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c70:	4b59      	ldr	r3, [pc, #356]	; (8001dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	4a58      	ldr	r2, [pc, #352]	; (8001dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0308 	and.w	r3, r3, #8
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d005      	beq.n	8001c94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c88:	4b53      	ldr	r3, [pc, #332]	; (8001dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	4a52      	ldr	r2, [pc, #328]	; (8001dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c94:	4b50      	ldr	r3, [pc, #320]	; (8001dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	494d      	ldr	r1, [pc, #308]	; (8001dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d044      	beq.n	8001d3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d107      	bne.n	8001cca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cba:	4b47      	ldr	r3, [pc, #284]	; (8001dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d119      	bne.n	8001cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e07f      	b.n	8001dca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d003      	beq.n	8001cda <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cd6:	2b03      	cmp	r3, #3
 8001cd8:	d107      	bne.n	8001cea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cda:	4b3f      	ldr	r3, [pc, #252]	; (8001dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d109      	bne.n	8001cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e06f      	b.n	8001dca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cea:	4b3b      	ldr	r3, [pc, #236]	; (8001dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d101      	bne.n	8001cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e067      	b.n	8001dca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cfa:	4b37      	ldr	r3, [pc, #220]	; (8001dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f023 0203 	bic.w	r2, r3, #3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	4934      	ldr	r1, [pc, #208]	; (8001dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d0c:	f7ff fa28 	bl	8001160 <HAL_GetTick>
 8001d10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d12:	e00a      	b.n	8001d2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d14:	f7ff fa24 	bl	8001160 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e04f      	b.n	8001dca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d2a:	4b2b      	ldr	r3, [pc, #172]	; (8001dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f003 020c 	and.w	r2, r3, #12
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d1eb      	bne.n	8001d14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d3c:	4b25      	ldr	r3, [pc, #148]	; (8001dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0307 	and.w	r3, r3, #7
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d20c      	bcs.n	8001d64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d4a:	4b22      	ldr	r3, [pc, #136]	; (8001dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d4c:	683a      	ldr	r2, [r7, #0]
 8001d4e:	b2d2      	uxtb	r2, r2
 8001d50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d52:	4b20      	ldr	r3, [pc, #128]	; (8001dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0307 	and.w	r3, r3, #7
 8001d5a:	683a      	ldr	r2, [r7, #0]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d001      	beq.n	8001d64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e032      	b.n	8001dca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0304 	and.w	r3, r3, #4
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d008      	beq.n	8001d82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d70:	4b19      	ldr	r3, [pc, #100]	; (8001dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	4916      	ldr	r1, [pc, #88]	; (8001dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0308 	and.w	r3, r3, #8
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d009      	beq.n	8001da2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d8e:	4b12      	ldr	r3, [pc, #72]	; (8001dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	00db      	lsls	r3, r3, #3
 8001d9c:	490e      	ldr	r1, [pc, #56]	; (8001dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001da2:	f000 f821 	bl	8001de8 <HAL_RCC_GetSysClockFreq>
 8001da6:	4602      	mov	r2, r0
 8001da8:	4b0b      	ldr	r3, [pc, #44]	; (8001dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	091b      	lsrs	r3, r3, #4
 8001dae:	f003 030f 	and.w	r3, r3, #15
 8001db2:	490a      	ldr	r1, [pc, #40]	; (8001ddc <HAL_RCC_ClockConfig+0x1c0>)
 8001db4:	5ccb      	ldrb	r3, [r1, r3]
 8001db6:	fa22 f303 	lsr.w	r3, r2, r3
 8001dba:	4a09      	ldr	r2, [pc, #36]	; (8001de0 <HAL_RCC_ClockConfig+0x1c4>)
 8001dbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001dbe:	4b09      	ldr	r3, [pc, #36]	; (8001de4 <HAL_RCC_ClockConfig+0x1c8>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff f988 	bl	80010d8 <HAL_InitTick>

  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	40023c00 	.word	0x40023c00
 8001dd8:	40023800 	.word	0x40023800
 8001ddc:	08004dc0 	.word	0x08004dc0
 8001de0:	20000000 	.word	0x20000000
 8001de4:	20000004 	.word	0x20000004

08001de8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001de8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001dec:	b094      	sub	sp, #80	; 0x50
 8001dee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001df0:	2300      	movs	r3, #0
 8001df2:	647b      	str	r3, [r7, #68]	; 0x44
 8001df4:	2300      	movs	r3, #0
 8001df6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001df8:	2300      	movs	r3, #0
 8001dfa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e00:	4b79      	ldr	r3, [pc, #484]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f003 030c 	and.w	r3, r3, #12
 8001e08:	2b08      	cmp	r3, #8
 8001e0a:	d00d      	beq.n	8001e28 <HAL_RCC_GetSysClockFreq+0x40>
 8001e0c:	2b08      	cmp	r3, #8
 8001e0e:	f200 80e1 	bhi.w	8001fd4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d002      	beq.n	8001e1c <HAL_RCC_GetSysClockFreq+0x34>
 8001e16:	2b04      	cmp	r3, #4
 8001e18:	d003      	beq.n	8001e22 <HAL_RCC_GetSysClockFreq+0x3a>
 8001e1a:	e0db      	b.n	8001fd4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e1c:	4b73      	ldr	r3, [pc, #460]	; (8001fec <HAL_RCC_GetSysClockFreq+0x204>)
 8001e1e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001e20:	e0db      	b.n	8001fda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e22:	4b73      	ldr	r3, [pc, #460]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x208>)
 8001e24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e26:	e0d8      	b.n	8001fda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e28:	4b6f      	ldr	r3, [pc, #444]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e30:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e32:	4b6d      	ldr	r3, [pc, #436]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d063      	beq.n	8001f06 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e3e:	4b6a      	ldr	r3, [pc, #424]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	099b      	lsrs	r3, r3, #6
 8001e44:	2200      	movs	r2, #0
 8001e46:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e48:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e50:	633b      	str	r3, [r7, #48]	; 0x30
 8001e52:	2300      	movs	r3, #0
 8001e54:	637b      	str	r3, [r7, #52]	; 0x34
 8001e56:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001e5a:	4622      	mov	r2, r4
 8001e5c:	462b      	mov	r3, r5
 8001e5e:	f04f 0000 	mov.w	r0, #0
 8001e62:	f04f 0100 	mov.w	r1, #0
 8001e66:	0159      	lsls	r1, r3, #5
 8001e68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e6c:	0150      	lsls	r0, r2, #5
 8001e6e:	4602      	mov	r2, r0
 8001e70:	460b      	mov	r3, r1
 8001e72:	4621      	mov	r1, r4
 8001e74:	1a51      	subs	r1, r2, r1
 8001e76:	6139      	str	r1, [r7, #16]
 8001e78:	4629      	mov	r1, r5
 8001e7a:	eb63 0301 	sbc.w	r3, r3, r1
 8001e7e:	617b      	str	r3, [r7, #20]
 8001e80:	f04f 0200 	mov.w	r2, #0
 8001e84:	f04f 0300 	mov.w	r3, #0
 8001e88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e8c:	4659      	mov	r1, fp
 8001e8e:	018b      	lsls	r3, r1, #6
 8001e90:	4651      	mov	r1, sl
 8001e92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e96:	4651      	mov	r1, sl
 8001e98:	018a      	lsls	r2, r1, #6
 8001e9a:	4651      	mov	r1, sl
 8001e9c:	ebb2 0801 	subs.w	r8, r2, r1
 8001ea0:	4659      	mov	r1, fp
 8001ea2:	eb63 0901 	sbc.w	r9, r3, r1
 8001ea6:	f04f 0200 	mov.w	r2, #0
 8001eaa:	f04f 0300 	mov.w	r3, #0
 8001eae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001eb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001eb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001eba:	4690      	mov	r8, r2
 8001ebc:	4699      	mov	r9, r3
 8001ebe:	4623      	mov	r3, r4
 8001ec0:	eb18 0303 	adds.w	r3, r8, r3
 8001ec4:	60bb      	str	r3, [r7, #8]
 8001ec6:	462b      	mov	r3, r5
 8001ec8:	eb49 0303 	adc.w	r3, r9, r3
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	f04f 0200 	mov.w	r2, #0
 8001ed2:	f04f 0300 	mov.w	r3, #0
 8001ed6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001eda:	4629      	mov	r1, r5
 8001edc:	024b      	lsls	r3, r1, #9
 8001ede:	4621      	mov	r1, r4
 8001ee0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ee4:	4621      	mov	r1, r4
 8001ee6:	024a      	lsls	r2, r1, #9
 8001ee8:	4610      	mov	r0, r2
 8001eea:	4619      	mov	r1, r3
 8001eec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001eee:	2200      	movs	r2, #0
 8001ef0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ef2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ef4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ef8:	f7fe f9c2 	bl	8000280 <__aeabi_uldivmod>
 8001efc:	4602      	mov	r2, r0
 8001efe:	460b      	mov	r3, r1
 8001f00:	4613      	mov	r3, r2
 8001f02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f04:	e058      	b.n	8001fb8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f06:	4b38      	ldr	r3, [pc, #224]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	099b      	lsrs	r3, r3, #6
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	4618      	mov	r0, r3
 8001f10:	4611      	mov	r1, r2
 8001f12:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001f16:	623b      	str	r3, [r7, #32]
 8001f18:	2300      	movs	r3, #0
 8001f1a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001f20:	4642      	mov	r2, r8
 8001f22:	464b      	mov	r3, r9
 8001f24:	f04f 0000 	mov.w	r0, #0
 8001f28:	f04f 0100 	mov.w	r1, #0
 8001f2c:	0159      	lsls	r1, r3, #5
 8001f2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f32:	0150      	lsls	r0, r2, #5
 8001f34:	4602      	mov	r2, r0
 8001f36:	460b      	mov	r3, r1
 8001f38:	4641      	mov	r1, r8
 8001f3a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f3e:	4649      	mov	r1, r9
 8001f40:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f44:	f04f 0200 	mov.w	r2, #0
 8001f48:	f04f 0300 	mov.w	r3, #0
 8001f4c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001f50:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001f54:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f58:	ebb2 040a 	subs.w	r4, r2, sl
 8001f5c:	eb63 050b 	sbc.w	r5, r3, fp
 8001f60:	f04f 0200 	mov.w	r2, #0
 8001f64:	f04f 0300 	mov.w	r3, #0
 8001f68:	00eb      	lsls	r3, r5, #3
 8001f6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f6e:	00e2      	lsls	r2, r4, #3
 8001f70:	4614      	mov	r4, r2
 8001f72:	461d      	mov	r5, r3
 8001f74:	4643      	mov	r3, r8
 8001f76:	18e3      	adds	r3, r4, r3
 8001f78:	603b      	str	r3, [r7, #0]
 8001f7a:	464b      	mov	r3, r9
 8001f7c:	eb45 0303 	adc.w	r3, r5, r3
 8001f80:	607b      	str	r3, [r7, #4]
 8001f82:	f04f 0200 	mov.w	r2, #0
 8001f86:	f04f 0300 	mov.w	r3, #0
 8001f8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f8e:	4629      	mov	r1, r5
 8001f90:	028b      	lsls	r3, r1, #10
 8001f92:	4621      	mov	r1, r4
 8001f94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f98:	4621      	mov	r1, r4
 8001f9a:	028a      	lsls	r2, r1, #10
 8001f9c:	4610      	mov	r0, r2
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	61bb      	str	r3, [r7, #24]
 8001fa6:	61fa      	str	r2, [r7, #28]
 8001fa8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fac:	f7fe f968 	bl	8000280 <__aeabi_uldivmod>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001fb8:	4b0b      	ldr	r3, [pc, #44]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	0c1b      	lsrs	r3, r3, #16
 8001fbe:	f003 0303 	and.w	r3, r3, #3
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001fc8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001fca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001fd2:	e002      	b.n	8001fda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fd4:	4b05      	ldr	r3, [pc, #20]	; (8001fec <HAL_RCC_GetSysClockFreq+0x204>)
 8001fd6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001fd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3750      	adds	r7, #80	; 0x50
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fe6:	bf00      	nop
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	00f42400 	.word	0x00f42400
 8001ff0:	007a1200 	.word	0x007a1200

08001ff4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ff8:	4b03      	ldr	r3, [pc, #12]	; (8002008 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	20000000 	.word	0x20000000

0800200c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002010:	f7ff fff0 	bl	8001ff4 <HAL_RCC_GetHCLKFreq>
 8002014:	4602      	mov	r2, r0
 8002016:	4b05      	ldr	r3, [pc, #20]	; (800202c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	0a9b      	lsrs	r3, r3, #10
 800201c:	f003 0307 	and.w	r3, r3, #7
 8002020:	4903      	ldr	r1, [pc, #12]	; (8002030 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002022:	5ccb      	ldrb	r3, [r1, r3]
 8002024:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002028:	4618      	mov	r0, r3
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40023800 	.word	0x40023800
 8002030:	08004dd0 	.word	0x08004dd0

08002034 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002038:	f7ff ffdc 	bl	8001ff4 <HAL_RCC_GetHCLKFreq>
 800203c:	4602      	mov	r2, r0
 800203e:	4b05      	ldr	r3, [pc, #20]	; (8002054 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	0b5b      	lsrs	r3, r3, #13
 8002044:	f003 0307 	and.w	r3, r3, #7
 8002048:	4903      	ldr	r1, [pc, #12]	; (8002058 <HAL_RCC_GetPCLK2Freq+0x24>)
 800204a:	5ccb      	ldrb	r3, [r1, r3]
 800204c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002050:	4618      	mov	r0, r3
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40023800 	.word	0x40023800
 8002058:	08004dd0 	.word	0x08004dd0

0800205c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e07b      	b.n	8002166 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002072:	2b00      	cmp	r3, #0
 8002074:	d108      	bne.n	8002088 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800207e:	d009      	beq.n	8002094 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	61da      	str	r2, [r3, #28]
 8002086:	e005      	b.n	8002094 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d106      	bne.n	80020b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f7fe fea4 	bl	8000dfc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2202      	movs	r2, #2
 80020b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80020dc:	431a      	orrs	r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020e6:	431a      	orrs	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	691b      	ldr	r3, [r3, #16]
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	431a      	orrs	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	431a      	orrs	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002104:	431a      	orrs	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	69db      	ldr	r3, [r3, #28]
 800210a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800210e:	431a      	orrs	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002118:	ea42 0103 	orr.w	r1, r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002120:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	430a      	orrs	r2, r1
 800212a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	0c1b      	lsrs	r3, r3, #16
 8002132:	f003 0104 	and.w	r1, r3, #4
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213a:	f003 0210 	and.w	r2, r3, #16
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	430a      	orrs	r2, r1
 8002144:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	69da      	ldr	r2, [r3, #28]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002154:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b088      	sub	sp, #32
 8002172:	af00      	add	r7, sp, #0
 8002174:	60f8      	str	r0, [r7, #12]
 8002176:	60b9      	str	r1, [r7, #8]
 8002178:	603b      	str	r3, [r7, #0]
 800217a:	4613      	mov	r3, r2
 800217c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800217e:	2300      	movs	r3, #0
 8002180:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002188:	2b01      	cmp	r3, #1
 800218a:	d101      	bne.n	8002190 <HAL_SPI_Transmit+0x22>
 800218c:	2302      	movs	r3, #2
 800218e:	e126      	b.n	80023de <HAL_SPI_Transmit+0x270>
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002198:	f7fe ffe2 	bl	8001160 <HAL_GetTick>
 800219c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800219e:	88fb      	ldrh	r3, [r7, #6]
 80021a0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d002      	beq.n	80021b4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80021ae:	2302      	movs	r3, #2
 80021b0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80021b2:	e10b      	b.n	80023cc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d002      	beq.n	80021c0 <HAL_SPI_Transmit+0x52>
 80021ba:	88fb      	ldrh	r3, [r7, #6]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d102      	bne.n	80021c6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80021c4:	e102      	b.n	80023cc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2203      	movs	r2, #3
 80021ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2200      	movs	r2, #0
 80021d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	68ba      	ldr	r2, [r7, #8]
 80021d8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	88fa      	ldrh	r2, [r7, #6]
 80021de:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	88fa      	ldrh	r2, [r7, #6]
 80021e4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2200      	movs	r2, #0
 80021ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2200      	movs	r2, #0
 80021f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2200      	movs	r2, #0
 80021f6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2200      	movs	r2, #0
 80021fc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2200      	movs	r2, #0
 8002202:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800220c:	d10f      	bne.n	800222e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800221c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800222c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002238:	2b40      	cmp	r3, #64	; 0x40
 800223a:	d007      	beq.n	800224c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800224a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002254:	d14b      	bne.n	80022ee <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d002      	beq.n	8002264 <HAL_SPI_Transmit+0xf6>
 800225e:	8afb      	ldrh	r3, [r7, #22]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d13e      	bne.n	80022e2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002268:	881a      	ldrh	r2, [r3, #0]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002274:	1c9a      	adds	r2, r3, #2
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800227e:	b29b      	uxth	r3, r3
 8002280:	3b01      	subs	r3, #1
 8002282:	b29a      	uxth	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002288:	e02b      	b.n	80022e2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f003 0302 	and.w	r3, r3, #2
 8002294:	2b02      	cmp	r3, #2
 8002296:	d112      	bne.n	80022be <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229c:	881a      	ldrh	r2, [r3, #0]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a8:	1c9a      	adds	r2, r3, #2
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	3b01      	subs	r3, #1
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	86da      	strh	r2, [r3, #54]	; 0x36
 80022bc:	e011      	b.n	80022e2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022be:	f7fe ff4f 	bl	8001160 <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d803      	bhi.n	80022d6 <HAL_SPI_Transmit+0x168>
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d4:	d102      	bne.n	80022dc <HAL_SPI_Transmit+0x16e>
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d102      	bne.n	80022e2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	77fb      	strb	r3, [r7, #31]
          goto error;
 80022e0:	e074      	b.n	80023cc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d1ce      	bne.n	800228a <HAL_SPI_Transmit+0x11c>
 80022ec:	e04c      	b.n	8002388 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d002      	beq.n	80022fc <HAL_SPI_Transmit+0x18e>
 80022f6:	8afb      	ldrh	r3, [r7, #22]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d140      	bne.n	800237e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	330c      	adds	r3, #12
 8002306:	7812      	ldrb	r2, [r2, #0]
 8002308:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230e:	1c5a      	adds	r2, r3, #1
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002318:	b29b      	uxth	r3, r3
 800231a:	3b01      	subs	r3, #1
 800231c:	b29a      	uxth	r2, r3
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002322:	e02c      	b.n	800237e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b02      	cmp	r3, #2
 8002330:	d113      	bne.n	800235a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	330c      	adds	r3, #12
 800233c:	7812      	ldrb	r2, [r2, #0]
 800233e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002344:	1c5a      	adds	r2, r3, #1
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800234e:	b29b      	uxth	r3, r3
 8002350:	3b01      	subs	r3, #1
 8002352:	b29a      	uxth	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	86da      	strh	r2, [r3, #54]	; 0x36
 8002358:	e011      	b.n	800237e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800235a:	f7fe ff01 	bl	8001160 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	429a      	cmp	r2, r3
 8002368:	d803      	bhi.n	8002372 <HAL_SPI_Transmit+0x204>
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002370:	d102      	bne.n	8002378 <HAL_SPI_Transmit+0x20a>
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d102      	bne.n	800237e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800237c:	e026      	b.n	80023cc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002382:	b29b      	uxth	r3, r3
 8002384:	2b00      	cmp	r3, #0
 8002386:	d1cd      	bne.n	8002324 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	6839      	ldr	r1, [r7, #0]
 800238c:	68f8      	ldr	r0, [r7, #12]
 800238e:	f000 fbcb 	bl	8002b28 <SPI_EndRxTxTransaction>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d002      	beq.n	800239e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2220      	movs	r2, #32
 800239c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d10a      	bne.n	80023bc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80023a6:	2300      	movs	r3, #0
 80023a8:	613b      	str	r3, [r7, #16]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	613b      	str	r3, [r7, #16]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	613b      	str	r3, [r7, #16]
 80023ba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d002      	beq.n	80023ca <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	77fb      	strb	r3, [r7, #31]
 80023c8:	e000      	b.n	80023cc <HAL_SPI_Transmit+0x25e>
  }

error:
 80023ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80023dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3720      	adds	r7, #32
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b088      	sub	sp, #32
 80023ea:	af02      	add	r7, sp, #8
 80023ec:	60f8      	str	r0, [r7, #12]
 80023ee:	60b9      	str	r1, [r7, #8]
 80023f0:	603b      	str	r3, [r7, #0]
 80023f2:	4613      	mov	r3, r2
 80023f4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80023f6:	2300      	movs	r3, #0
 80023f8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002402:	d112      	bne.n	800242a <HAL_SPI_Receive+0x44>
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d10e      	bne.n	800242a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2204      	movs	r2, #4
 8002410:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002414:	88fa      	ldrh	r2, [r7, #6]
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	9300      	str	r3, [sp, #0]
 800241a:	4613      	mov	r3, r2
 800241c:	68ba      	ldr	r2, [r7, #8]
 800241e:	68b9      	ldr	r1, [r7, #8]
 8002420:	68f8      	ldr	r0, [r7, #12]
 8002422:	f000 f8f1 	bl	8002608 <HAL_SPI_TransmitReceive>
 8002426:	4603      	mov	r3, r0
 8002428:	e0ea      	b.n	8002600 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002430:	2b01      	cmp	r3, #1
 8002432:	d101      	bne.n	8002438 <HAL_SPI_Receive+0x52>
 8002434:	2302      	movs	r3, #2
 8002436:	e0e3      	b.n	8002600 <HAL_SPI_Receive+0x21a>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002440:	f7fe fe8e 	bl	8001160 <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b01      	cmp	r3, #1
 8002450:	d002      	beq.n	8002458 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002452:	2302      	movs	r3, #2
 8002454:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002456:	e0ca      	b.n	80025ee <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d002      	beq.n	8002464 <HAL_SPI_Receive+0x7e>
 800245e:	88fb      	ldrh	r3, [r7, #6]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d102      	bne.n	800246a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002468:	e0c1      	b.n	80025ee <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2204      	movs	r2, #4
 800246e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2200      	movs	r2, #0
 8002476:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	68ba      	ldr	r2, [r7, #8]
 800247c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	88fa      	ldrh	r2, [r7, #6]
 8002482:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	88fa      	ldrh	r2, [r7, #6]
 8002488:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2200      	movs	r2, #0
 800248e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2200      	movs	r2, #0
 8002494:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2200      	movs	r2, #0
 800249a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2200      	movs	r2, #0
 80024a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2200      	movs	r2, #0
 80024a6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024b0:	d10f      	bne.n	80024d2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80024d0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024dc:	2b40      	cmp	r3, #64	; 0x40
 80024de:	d007      	beq.n	80024f0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024ee:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d162      	bne.n	80025be <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80024f8:	e02e      	b.n	8002558 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	2b01      	cmp	r3, #1
 8002506:	d115      	bne.n	8002534 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f103 020c 	add.w	r2, r3, #12
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002514:	7812      	ldrb	r2, [r2, #0]
 8002516:	b2d2      	uxtb	r2, r2
 8002518:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800251e:	1c5a      	adds	r2, r3, #1
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002528:	b29b      	uxth	r3, r3
 800252a:	3b01      	subs	r3, #1
 800252c:	b29a      	uxth	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002532:	e011      	b.n	8002558 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002534:	f7fe fe14 	bl	8001160 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	429a      	cmp	r2, r3
 8002542:	d803      	bhi.n	800254c <HAL_SPI_Receive+0x166>
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800254a:	d102      	bne.n	8002552 <HAL_SPI_Receive+0x16c>
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d102      	bne.n	8002558 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002556:	e04a      	b.n	80025ee <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800255c:	b29b      	uxth	r3, r3
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1cb      	bne.n	80024fa <HAL_SPI_Receive+0x114>
 8002562:	e031      	b.n	80025c8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	2b01      	cmp	r3, #1
 8002570:	d113      	bne.n	800259a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68da      	ldr	r2, [r3, #12]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800257c:	b292      	uxth	r2, r2
 800257e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002584:	1c9a      	adds	r2, r3, #2
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800258e:	b29b      	uxth	r3, r3
 8002590:	3b01      	subs	r3, #1
 8002592:	b29a      	uxth	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002598:	e011      	b.n	80025be <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800259a:	f7fe fde1 	bl	8001160 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	683a      	ldr	r2, [r7, #0]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d803      	bhi.n	80025b2 <HAL_SPI_Receive+0x1cc>
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b0:	d102      	bne.n	80025b8 <HAL_SPI_Receive+0x1d2>
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d102      	bne.n	80025be <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	75fb      	strb	r3, [r7, #23]
          goto error;
 80025bc:	e017      	b.n	80025ee <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1cd      	bne.n	8002564 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	6839      	ldr	r1, [r7, #0]
 80025cc:	68f8      	ldr	r0, [r7, #12]
 80025ce:	f000 fa45 	bl	8002a5c <SPI_EndRxTransaction>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d002      	beq.n	80025de <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2220      	movs	r2, #32
 80025dc:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d002      	beq.n	80025ec <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	75fb      	strb	r3, [r7, #23]
 80025ea:	e000      	b.n	80025ee <HAL_SPI_Receive+0x208>
  }

error :
 80025ec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2201      	movs	r2, #1
 80025f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80025fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002600:	4618      	mov	r0, r3
 8002602:	3718      	adds	r7, #24
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b08c      	sub	sp, #48	; 0x30
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
 8002614:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002616:	2301      	movs	r3, #1
 8002618:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800261a:	2300      	movs	r3, #0
 800261c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002626:	2b01      	cmp	r3, #1
 8002628:	d101      	bne.n	800262e <HAL_SPI_TransmitReceive+0x26>
 800262a:	2302      	movs	r3, #2
 800262c:	e18a      	b.n	8002944 <HAL_SPI_TransmitReceive+0x33c>
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2201      	movs	r2, #1
 8002632:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002636:	f7fe fd93 	bl	8001160 <HAL_GetTick>
 800263a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002642:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800264c:	887b      	ldrh	r3, [r7, #2]
 800264e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002650:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002654:	2b01      	cmp	r3, #1
 8002656:	d00f      	beq.n	8002678 <HAL_SPI_TransmitReceive+0x70>
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800265e:	d107      	bne.n	8002670 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d103      	bne.n	8002670 <HAL_SPI_TransmitReceive+0x68>
 8002668:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800266c:	2b04      	cmp	r3, #4
 800266e:	d003      	beq.n	8002678 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002670:	2302      	movs	r3, #2
 8002672:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002676:	e15b      	b.n	8002930 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d005      	beq.n	800268a <HAL_SPI_TransmitReceive+0x82>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d002      	beq.n	800268a <HAL_SPI_TransmitReceive+0x82>
 8002684:	887b      	ldrh	r3, [r7, #2]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d103      	bne.n	8002692 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002690:	e14e      	b.n	8002930 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b04      	cmp	r3, #4
 800269c:	d003      	beq.n	80026a6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2205      	movs	r2, #5
 80026a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2200      	movs	r2, #0
 80026aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	887a      	ldrh	r2, [r7, #2]
 80026b6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	887a      	ldrh	r2, [r7, #2]
 80026bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	68ba      	ldr	r2, [r7, #8]
 80026c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	887a      	ldrh	r2, [r7, #2]
 80026c8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	887a      	ldrh	r2, [r7, #2]
 80026ce:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2200      	movs	r2, #0
 80026d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026e6:	2b40      	cmp	r3, #64	; 0x40
 80026e8:	d007      	beq.n	80026fa <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026f8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002702:	d178      	bne.n	80027f6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d002      	beq.n	8002712 <HAL_SPI_TransmitReceive+0x10a>
 800270c:	8b7b      	ldrh	r3, [r7, #26]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d166      	bne.n	80027e0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002716:	881a      	ldrh	r2, [r3, #0]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002722:	1c9a      	adds	r2, r3, #2
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800272c:	b29b      	uxth	r3, r3
 800272e:	3b01      	subs	r3, #1
 8002730:	b29a      	uxth	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002736:	e053      	b.n	80027e0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b02      	cmp	r3, #2
 8002744:	d11b      	bne.n	800277e <HAL_SPI_TransmitReceive+0x176>
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800274a:	b29b      	uxth	r3, r3
 800274c:	2b00      	cmp	r3, #0
 800274e:	d016      	beq.n	800277e <HAL_SPI_TransmitReceive+0x176>
 8002750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002752:	2b01      	cmp	r3, #1
 8002754:	d113      	bne.n	800277e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275a:	881a      	ldrh	r2, [r3, #0]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002766:	1c9a      	adds	r2, r3, #2
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002770:	b29b      	uxth	r3, r3
 8002772:	3b01      	subs	r3, #1
 8002774:	b29a      	uxth	r2, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800277a:	2300      	movs	r3, #0
 800277c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f003 0301 	and.w	r3, r3, #1
 8002788:	2b01      	cmp	r3, #1
 800278a:	d119      	bne.n	80027c0 <HAL_SPI_TransmitReceive+0x1b8>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002790:	b29b      	uxth	r3, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	d014      	beq.n	80027c0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68da      	ldr	r2, [r3, #12]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a0:	b292      	uxth	r2, r2
 80027a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a8:	1c9a      	adds	r2, r3, #2
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	3b01      	subs	r3, #1
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80027bc:	2301      	movs	r3, #1
 80027be:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80027c0:	f7fe fcce 	bl	8001160 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d807      	bhi.n	80027e0 <HAL_SPI_TransmitReceive+0x1d8>
 80027d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d6:	d003      	beq.n	80027e0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80027de:	e0a7      	b.n	8002930 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1a6      	bne.n	8002738 <HAL_SPI_TransmitReceive+0x130>
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d1a1      	bne.n	8002738 <HAL_SPI_TransmitReceive+0x130>
 80027f4:	e07c      	b.n	80028f0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d002      	beq.n	8002804 <HAL_SPI_TransmitReceive+0x1fc>
 80027fe:	8b7b      	ldrh	r3, [r7, #26]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d16b      	bne.n	80028dc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	330c      	adds	r3, #12
 800280e:	7812      	ldrb	r2, [r2, #0]
 8002810:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	1c5a      	adds	r2, r3, #1
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002820:	b29b      	uxth	r3, r3
 8002822:	3b01      	subs	r3, #1
 8002824:	b29a      	uxth	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800282a:	e057      	b.n	80028dc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b02      	cmp	r3, #2
 8002838:	d11c      	bne.n	8002874 <HAL_SPI_TransmitReceive+0x26c>
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800283e:	b29b      	uxth	r3, r3
 8002840:	2b00      	cmp	r3, #0
 8002842:	d017      	beq.n	8002874 <HAL_SPI_TransmitReceive+0x26c>
 8002844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002846:	2b01      	cmp	r3, #1
 8002848:	d114      	bne.n	8002874 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	330c      	adds	r3, #12
 8002854:	7812      	ldrb	r2, [r2, #0]
 8002856:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285c:	1c5a      	adds	r2, r3, #1
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002866:	b29b      	uxth	r3, r3
 8002868:	3b01      	subs	r3, #1
 800286a:	b29a      	uxth	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002870:	2300      	movs	r3, #0
 8002872:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	2b01      	cmp	r3, #1
 8002880:	d119      	bne.n	80028b6 <HAL_SPI_TransmitReceive+0x2ae>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002886:	b29b      	uxth	r3, r3
 8002888:	2b00      	cmp	r3, #0
 800288a:	d014      	beq.n	80028b6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68da      	ldr	r2, [r3, #12]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002896:	b2d2      	uxtb	r2, r2
 8002898:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800289e:	1c5a      	adds	r2, r3, #1
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	3b01      	subs	r3, #1
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80028b2:	2301      	movs	r3, #1
 80028b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80028b6:	f7fe fc53 	bl	8001160 <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d803      	bhi.n	80028ce <HAL_SPI_TransmitReceive+0x2c6>
 80028c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028cc:	d102      	bne.n	80028d4 <HAL_SPI_TransmitReceive+0x2cc>
 80028ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d103      	bne.n	80028dc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80028da:	e029      	b.n	8002930 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1a2      	bne.n	800282c <HAL_SPI_TransmitReceive+0x224>
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d19d      	bne.n	800282c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80028f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80028f4:	68f8      	ldr	r0, [r7, #12]
 80028f6:	f000 f917 	bl	8002b28 <SPI_EndRxTxTransaction>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d006      	beq.n	800290e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2220      	movs	r2, #32
 800290a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800290c:	e010      	b.n	8002930 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d10b      	bne.n	800292e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002916:	2300      	movs	r3, #0
 8002918:	617b      	str	r3, [r7, #20]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	617b      	str	r3, [r7, #20]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	617b      	str	r3, [r7, #20]
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	e000      	b.n	8002930 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800292e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002940:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002944:	4618      	mov	r0, r3
 8002946:	3730      	adds	r7, #48	; 0x30
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b088      	sub	sp, #32
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	603b      	str	r3, [r7, #0]
 8002958:	4613      	mov	r3, r2
 800295a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800295c:	f7fe fc00 	bl	8001160 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002964:	1a9b      	subs	r3, r3, r2
 8002966:	683a      	ldr	r2, [r7, #0]
 8002968:	4413      	add	r3, r2
 800296a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800296c:	f7fe fbf8 	bl	8001160 <HAL_GetTick>
 8002970:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002972:	4b39      	ldr	r3, [pc, #228]	; (8002a58 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	015b      	lsls	r3, r3, #5
 8002978:	0d1b      	lsrs	r3, r3, #20
 800297a:	69fa      	ldr	r2, [r7, #28]
 800297c:	fb02 f303 	mul.w	r3, r2, r3
 8002980:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002982:	e054      	b.n	8002a2e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800298a:	d050      	beq.n	8002a2e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800298c:	f7fe fbe8 	bl	8001160 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	69fa      	ldr	r2, [r7, #28]
 8002998:	429a      	cmp	r2, r3
 800299a:	d902      	bls.n	80029a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d13d      	bne.n	8002a1e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	685a      	ldr	r2, [r3, #4]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80029b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029ba:	d111      	bne.n	80029e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029c4:	d004      	beq.n	80029d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029ce:	d107      	bne.n	80029e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029e8:	d10f      	bne.n	8002a0a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029f8:	601a      	str	r2, [r3, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a08:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e017      	b.n	8002a4e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d101      	bne.n	8002a28 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002a24:	2300      	movs	r3, #0
 8002a26:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	689a      	ldr	r2, [r3, #8]
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	4013      	ands	r3, r2
 8002a38:	68ba      	ldr	r2, [r7, #8]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	bf0c      	ite	eq
 8002a3e:	2301      	moveq	r3, #1
 8002a40:	2300      	movne	r3, #0
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	461a      	mov	r2, r3
 8002a46:	79fb      	ldrb	r3, [r7, #7]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d19b      	bne.n	8002984 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3720      	adds	r7, #32
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	20000000 	.word	0x20000000

08002a5c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af02      	add	r7, sp, #8
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a70:	d111      	bne.n	8002a96 <SPI_EndRxTransaction+0x3a>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a7a:	d004      	beq.n	8002a86 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a84:	d107      	bne.n	8002a96 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a94:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a9e:	d12a      	bne.n	8002af6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aa8:	d012      	beq.n	8002ad0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	9300      	str	r3, [sp, #0]
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	2180      	movs	r1, #128	; 0x80
 8002ab4:	68f8      	ldr	r0, [r7, #12]
 8002ab6:	f7ff ff49 	bl	800294c <SPI_WaitFlagStateUntilTimeout>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d02d      	beq.n	8002b1c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac4:	f043 0220 	orr.w	r2, r3, #32
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e026      	b.n	8002b1e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	9300      	str	r3, [sp, #0]
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	2101      	movs	r1, #1
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f7ff ff36 	bl	800294c <SPI_WaitFlagStateUntilTimeout>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d01a      	beq.n	8002b1c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aea:	f043 0220 	orr.w	r2, r3, #32
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e013      	b.n	8002b1e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	9300      	str	r3, [sp, #0]
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	2200      	movs	r2, #0
 8002afe:	2101      	movs	r1, #1
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	f7ff ff23 	bl	800294c <SPI_WaitFlagStateUntilTimeout>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d007      	beq.n	8002b1c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b10:	f043 0220 	orr.w	r2, r3, #32
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e000      	b.n	8002b1e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3710      	adds	r7, #16
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
	...

08002b28 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b088      	sub	sp, #32
 8002b2c:	af02      	add	r7, sp, #8
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002b34:	4b1b      	ldr	r3, [pc, #108]	; (8002ba4 <SPI_EndRxTxTransaction+0x7c>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a1b      	ldr	r2, [pc, #108]	; (8002ba8 <SPI_EndRxTxTransaction+0x80>)
 8002b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3e:	0d5b      	lsrs	r3, r3, #21
 8002b40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b44:	fb02 f303 	mul.w	r3, r2, r3
 8002b48:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b52:	d112      	bne.n	8002b7a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	9300      	str	r3, [sp, #0]
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	2180      	movs	r1, #128	; 0x80
 8002b5e:	68f8      	ldr	r0, [r7, #12]
 8002b60:	f7ff fef4 	bl	800294c <SPI_WaitFlagStateUntilTimeout>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d016      	beq.n	8002b98 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b6e:	f043 0220 	orr.w	r2, r3, #32
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e00f      	b.n	8002b9a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d00a      	beq.n	8002b96 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	3b01      	subs	r3, #1
 8002b84:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b90:	2b80      	cmp	r3, #128	; 0x80
 8002b92:	d0f2      	beq.n	8002b7a <SPI_EndRxTxTransaction+0x52>
 8002b94:	e000      	b.n	8002b98 <SPI_EndRxTxTransaction+0x70>
        break;
 8002b96:	bf00      	nop
  }

  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3718      	adds	r7, #24
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	20000000 	.word	0x20000000
 8002ba8:	165e9f81 	.word	0x165e9f81

08002bac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e03f      	b.n	8002c3e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d106      	bne.n	8002bd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f7fe f95a 	bl	8000e8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2224      	movs	r2, #36	; 0x24
 8002bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68da      	ldr	r2, [r3, #12]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f000 f929 	bl	8002e48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	691a      	ldr	r2, [r3, #16]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	695a      	ldr	r2, [r3, #20]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68da      	ldr	r2, [r3, #12]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2220      	movs	r2, #32
 8002c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2220      	movs	r2, #32
 8002c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b08a      	sub	sp, #40	; 0x28
 8002c4a:	af02      	add	r7, sp, #8
 8002c4c:	60f8      	str	r0, [r7, #12]
 8002c4e:	60b9      	str	r1, [r7, #8]
 8002c50:	603b      	str	r3, [r7, #0]
 8002c52:	4613      	mov	r3, r2
 8002c54:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c56:	2300      	movs	r3, #0
 8002c58:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b20      	cmp	r3, #32
 8002c64:	d17c      	bne.n	8002d60 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d002      	beq.n	8002c72 <HAL_UART_Transmit+0x2c>
 8002c6c:	88fb      	ldrh	r3, [r7, #6]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e075      	b.n	8002d62 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d101      	bne.n	8002c84 <HAL_UART_Transmit+0x3e>
 8002c80:	2302      	movs	r3, #2
 8002c82:	e06e      	b.n	8002d62 <HAL_UART_Transmit+0x11c>
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2221      	movs	r2, #33	; 0x21
 8002c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c9a:	f7fe fa61 	bl	8001160 <HAL_GetTick>
 8002c9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	88fa      	ldrh	r2, [r7, #6]
 8002ca4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	88fa      	ldrh	r2, [r7, #6]
 8002caa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cb4:	d108      	bne.n	8002cc8 <HAL_UART_Transmit+0x82>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d104      	bne.n	8002cc8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	61bb      	str	r3, [r7, #24]
 8002cc6:	e003      	b.n	8002cd0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002cd8:	e02a      	b.n	8002d30 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	9300      	str	r3, [sp, #0]
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	2180      	movs	r1, #128	; 0x80
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f000 f840 	bl	8002d6a <UART_WaitOnFlagUntilTimeout>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e036      	b.n	8002d62 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d10b      	bne.n	8002d12 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	881b      	ldrh	r3, [r3, #0]
 8002cfe:	461a      	mov	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d08:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	3302      	adds	r3, #2
 8002d0e:	61bb      	str	r3, [r7, #24]
 8002d10:	e007      	b.n	8002d22 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	781a      	ldrb	r2, [r3, #0]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	3301      	adds	r3, #1
 8002d20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1cf      	bne.n	8002cda <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	9300      	str	r3, [sp, #0]
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	2200      	movs	r2, #0
 8002d42:	2140      	movs	r1, #64	; 0x40
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f000 f810 	bl	8002d6a <UART_WaitOnFlagUntilTimeout>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d001      	beq.n	8002d54 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e006      	b.n	8002d62 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2220      	movs	r2, #32
 8002d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	e000      	b.n	8002d62 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002d60:	2302      	movs	r3, #2
  }
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3720      	adds	r7, #32
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b090      	sub	sp, #64	; 0x40
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	60f8      	str	r0, [r7, #12]
 8002d72:	60b9      	str	r1, [r7, #8]
 8002d74:	603b      	str	r3, [r7, #0]
 8002d76:	4613      	mov	r3, r2
 8002d78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d7a:	e050      	b.n	8002e1e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d82:	d04c      	beq.n	8002e1e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d007      	beq.n	8002d9a <UART_WaitOnFlagUntilTimeout+0x30>
 8002d8a:	f7fe f9e9 	bl	8001160 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d241      	bcs.n	8002e1e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	330c      	adds	r3, #12
 8002da0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da4:	e853 3f00 	ldrex	r3, [r3]
 8002da8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002db0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	330c      	adds	r3, #12
 8002db8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002dba:	637a      	str	r2, [r7, #52]	; 0x34
 8002dbc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dbe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002dc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002dc2:	e841 2300 	strex	r3, r2, [r1]
 8002dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1e5      	bne.n	8002d9a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	3314      	adds	r3, #20
 8002dd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	e853 3f00 	ldrex	r3, [r3]
 8002ddc:	613b      	str	r3, [r7, #16]
   return(result);
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	f023 0301 	bic.w	r3, r3, #1
 8002de4:	63bb      	str	r3, [r7, #56]	; 0x38
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	3314      	adds	r3, #20
 8002dec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002dee:	623a      	str	r2, [r7, #32]
 8002df0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002df2:	69f9      	ldr	r1, [r7, #28]
 8002df4:	6a3a      	ldr	r2, [r7, #32]
 8002df6:	e841 2300 	strex	r3, r2, [r1]
 8002dfa:	61bb      	str	r3, [r7, #24]
   return(result);
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1e5      	bne.n	8002dce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2220      	movs	r2, #32
 8002e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2220      	movs	r2, #32
 8002e0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e00f      	b.n	8002e3e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	4013      	ands	r3, r2
 8002e28:	68ba      	ldr	r2, [r7, #8]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	bf0c      	ite	eq
 8002e2e:	2301      	moveq	r3, #1
 8002e30:	2300      	movne	r3, #0
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	461a      	mov	r2, r3
 8002e36:	79fb      	ldrb	r3, [r7, #7]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d09f      	beq.n	8002d7c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3740      	adds	r7, #64	; 0x40
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
	...

08002e48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e4c:	b0c0      	sub	sp, #256	; 0x100
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	691b      	ldr	r3, [r3, #16]
 8002e5c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e64:	68d9      	ldr	r1, [r3, #12]
 8002e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	ea40 0301 	orr.w	r3, r0, r1
 8002e70:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	431a      	orrs	r2, r3
 8002e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002ea0:	f021 010c 	bic.w	r1, r1, #12
 8002ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002eae:	430b      	orrs	r3, r1
 8002eb0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ec2:	6999      	ldr	r1, [r3, #24]
 8002ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	ea40 0301 	orr.w	r3, r0, r1
 8002ece:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	4b8f      	ldr	r3, [pc, #572]	; (8003114 <UART_SetConfig+0x2cc>)
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d005      	beq.n	8002ee8 <UART_SetConfig+0xa0>
 8002edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	4b8d      	ldr	r3, [pc, #564]	; (8003118 <UART_SetConfig+0x2d0>)
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d104      	bne.n	8002ef2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ee8:	f7ff f8a4 	bl	8002034 <HAL_RCC_GetPCLK2Freq>
 8002eec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002ef0:	e003      	b.n	8002efa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ef2:	f7ff f88b 	bl	800200c <HAL_RCC_GetPCLK1Freq>
 8002ef6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002efe:	69db      	ldr	r3, [r3, #28]
 8002f00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f04:	f040 810c 	bne.w	8003120 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002f12:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002f16:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002f1a:	4622      	mov	r2, r4
 8002f1c:	462b      	mov	r3, r5
 8002f1e:	1891      	adds	r1, r2, r2
 8002f20:	65b9      	str	r1, [r7, #88]	; 0x58
 8002f22:	415b      	adcs	r3, r3
 8002f24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f26:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002f2a:	4621      	mov	r1, r4
 8002f2c:	eb12 0801 	adds.w	r8, r2, r1
 8002f30:	4629      	mov	r1, r5
 8002f32:	eb43 0901 	adc.w	r9, r3, r1
 8002f36:	f04f 0200 	mov.w	r2, #0
 8002f3a:	f04f 0300 	mov.w	r3, #0
 8002f3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f4a:	4690      	mov	r8, r2
 8002f4c:	4699      	mov	r9, r3
 8002f4e:	4623      	mov	r3, r4
 8002f50:	eb18 0303 	adds.w	r3, r8, r3
 8002f54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002f58:	462b      	mov	r3, r5
 8002f5a:	eb49 0303 	adc.w	r3, r9, r3
 8002f5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002f6e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002f72:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002f76:	460b      	mov	r3, r1
 8002f78:	18db      	adds	r3, r3, r3
 8002f7a:	653b      	str	r3, [r7, #80]	; 0x50
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	eb42 0303 	adc.w	r3, r2, r3
 8002f82:	657b      	str	r3, [r7, #84]	; 0x54
 8002f84:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002f88:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002f8c:	f7fd f978 	bl	8000280 <__aeabi_uldivmod>
 8002f90:	4602      	mov	r2, r0
 8002f92:	460b      	mov	r3, r1
 8002f94:	4b61      	ldr	r3, [pc, #388]	; (800311c <UART_SetConfig+0x2d4>)
 8002f96:	fba3 2302 	umull	r2, r3, r3, r2
 8002f9a:	095b      	lsrs	r3, r3, #5
 8002f9c:	011c      	lsls	r4, r3, #4
 8002f9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002fa8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002fac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002fb0:	4642      	mov	r2, r8
 8002fb2:	464b      	mov	r3, r9
 8002fb4:	1891      	adds	r1, r2, r2
 8002fb6:	64b9      	str	r1, [r7, #72]	; 0x48
 8002fb8:	415b      	adcs	r3, r3
 8002fba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fbc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002fc0:	4641      	mov	r1, r8
 8002fc2:	eb12 0a01 	adds.w	sl, r2, r1
 8002fc6:	4649      	mov	r1, r9
 8002fc8:	eb43 0b01 	adc.w	fp, r3, r1
 8002fcc:	f04f 0200 	mov.w	r2, #0
 8002fd0:	f04f 0300 	mov.w	r3, #0
 8002fd4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002fd8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002fdc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002fe0:	4692      	mov	sl, r2
 8002fe2:	469b      	mov	fp, r3
 8002fe4:	4643      	mov	r3, r8
 8002fe6:	eb1a 0303 	adds.w	r3, sl, r3
 8002fea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002fee:	464b      	mov	r3, r9
 8002ff0:	eb4b 0303 	adc.w	r3, fp, r3
 8002ff4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003004:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003008:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800300c:	460b      	mov	r3, r1
 800300e:	18db      	adds	r3, r3, r3
 8003010:	643b      	str	r3, [r7, #64]	; 0x40
 8003012:	4613      	mov	r3, r2
 8003014:	eb42 0303 	adc.w	r3, r2, r3
 8003018:	647b      	str	r3, [r7, #68]	; 0x44
 800301a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800301e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003022:	f7fd f92d 	bl	8000280 <__aeabi_uldivmod>
 8003026:	4602      	mov	r2, r0
 8003028:	460b      	mov	r3, r1
 800302a:	4611      	mov	r1, r2
 800302c:	4b3b      	ldr	r3, [pc, #236]	; (800311c <UART_SetConfig+0x2d4>)
 800302e:	fba3 2301 	umull	r2, r3, r3, r1
 8003032:	095b      	lsrs	r3, r3, #5
 8003034:	2264      	movs	r2, #100	; 0x64
 8003036:	fb02 f303 	mul.w	r3, r2, r3
 800303a:	1acb      	subs	r3, r1, r3
 800303c:	00db      	lsls	r3, r3, #3
 800303e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003042:	4b36      	ldr	r3, [pc, #216]	; (800311c <UART_SetConfig+0x2d4>)
 8003044:	fba3 2302 	umull	r2, r3, r3, r2
 8003048:	095b      	lsrs	r3, r3, #5
 800304a:	005b      	lsls	r3, r3, #1
 800304c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003050:	441c      	add	r4, r3
 8003052:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003056:	2200      	movs	r2, #0
 8003058:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800305c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003060:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003064:	4642      	mov	r2, r8
 8003066:	464b      	mov	r3, r9
 8003068:	1891      	adds	r1, r2, r2
 800306a:	63b9      	str	r1, [r7, #56]	; 0x38
 800306c:	415b      	adcs	r3, r3
 800306e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003070:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003074:	4641      	mov	r1, r8
 8003076:	1851      	adds	r1, r2, r1
 8003078:	6339      	str	r1, [r7, #48]	; 0x30
 800307a:	4649      	mov	r1, r9
 800307c:	414b      	adcs	r3, r1
 800307e:	637b      	str	r3, [r7, #52]	; 0x34
 8003080:	f04f 0200 	mov.w	r2, #0
 8003084:	f04f 0300 	mov.w	r3, #0
 8003088:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800308c:	4659      	mov	r1, fp
 800308e:	00cb      	lsls	r3, r1, #3
 8003090:	4651      	mov	r1, sl
 8003092:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003096:	4651      	mov	r1, sl
 8003098:	00ca      	lsls	r2, r1, #3
 800309a:	4610      	mov	r0, r2
 800309c:	4619      	mov	r1, r3
 800309e:	4603      	mov	r3, r0
 80030a0:	4642      	mov	r2, r8
 80030a2:	189b      	adds	r3, r3, r2
 80030a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80030a8:	464b      	mov	r3, r9
 80030aa:	460a      	mov	r2, r1
 80030ac:	eb42 0303 	adc.w	r3, r2, r3
 80030b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80030b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80030c0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80030c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80030c8:	460b      	mov	r3, r1
 80030ca:	18db      	adds	r3, r3, r3
 80030cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80030ce:	4613      	mov	r3, r2
 80030d0:	eb42 0303 	adc.w	r3, r2, r3
 80030d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80030da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80030de:	f7fd f8cf 	bl	8000280 <__aeabi_uldivmod>
 80030e2:	4602      	mov	r2, r0
 80030e4:	460b      	mov	r3, r1
 80030e6:	4b0d      	ldr	r3, [pc, #52]	; (800311c <UART_SetConfig+0x2d4>)
 80030e8:	fba3 1302 	umull	r1, r3, r3, r2
 80030ec:	095b      	lsrs	r3, r3, #5
 80030ee:	2164      	movs	r1, #100	; 0x64
 80030f0:	fb01 f303 	mul.w	r3, r1, r3
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	3332      	adds	r3, #50	; 0x32
 80030fa:	4a08      	ldr	r2, [pc, #32]	; (800311c <UART_SetConfig+0x2d4>)
 80030fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003100:	095b      	lsrs	r3, r3, #5
 8003102:	f003 0207 	and.w	r2, r3, #7
 8003106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4422      	add	r2, r4
 800310e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003110:	e105      	b.n	800331e <UART_SetConfig+0x4d6>
 8003112:	bf00      	nop
 8003114:	40011000 	.word	0x40011000
 8003118:	40011400 	.word	0x40011400
 800311c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003120:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003124:	2200      	movs	r2, #0
 8003126:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800312a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800312e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003132:	4642      	mov	r2, r8
 8003134:	464b      	mov	r3, r9
 8003136:	1891      	adds	r1, r2, r2
 8003138:	6239      	str	r1, [r7, #32]
 800313a:	415b      	adcs	r3, r3
 800313c:	627b      	str	r3, [r7, #36]	; 0x24
 800313e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003142:	4641      	mov	r1, r8
 8003144:	1854      	adds	r4, r2, r1
 8003146:	4649      	mov	r1, r9
 8003148:	eb43 0501 	adc.w	r5, r3, r1
 800314c:	f04f 0200 	mov.w	r2, #0
 8003150:	f04f 0300 	mov.w	r3, #0
 8003154:	00eb      	lsls	r3, r5, #3
 8003156:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800315a:	00e2      	lsls	r2, r4, #3
 800315c:	4614      	mov	r4, r2
 800315e:	461d      	mov	r5, r3
 8003160:	4643      	mov	r3, r8
 8003162:	18e3      	adds	r3, r4, r3
 8003164:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003168:	464b      	mov	r3, r9
 800316a:	eb45 0303 	adc.w	r3, r5, r3
 800316e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800317e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003182:	f04f 0200 	mov.w	r2, #0
 8003186:	f04f 0300 	mov.w	r3, #0
 800318a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800318e:	4629      	mov	r1, r5
 8003190:	008b      	lsls	r3, r1, #2
 8003192:	4621      	mov	r1, r4
 8003194:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003198:	4621      	mov	r1, r4
 800319a:	008a      	lsls	r2, r1, #2
 800319c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80031a0:	f7fd f86e 	bl	8000280 <__aeabi_uldivmod>
 80031a4:	4602      	mov	r2, r0
 80031a6:	460b      	mov	r3, r1
 80031a8:	4b60      	ldr	r3, [pc, #384]	; (800332c <UART_SetConfig+0x4e4>)
 80031aa:	fba3 2302 	umull	r2, r3, r3, r2
 80031ae:	095b      	lsrs	r3, r3, #5
 80031b0:	011c      	lsls	r4, r3, #4
 80031b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031b6:	2200      	movs	r2, #0
 80031b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80031bc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80031c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80031c4:	4642      	mov	r2, r8
 80031c6:	464b      	mov	r3, r9
 80031c8:	1891      	adds	r1, r2, r2
 80031ca:	61b9      	str	r1, [r7, #24]
 80031cc:	415b      	adcs	r3, r3
 80031ce:	61fb      	str	r3, [r7, #28]
 80031d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031d4:	4641      	mov	r1, r8
 80031d6:	1851      	adds	r1, r2, r1
 80031d8:	6139      	str	r1, [r7, #16]
 80031da:	4649      	mov	r1, r9
 80031dc:	414b      	adcs	r3, r1
 80031de:	617b      	str	r3, [r7, #20]
 80031e0:	f04f 0200 	mov.w	r2, #0
 80031e4:	f04f 0300 	mov.w	r3, #0
 80031e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031ec:	4659      	mov	r1, fp
 80031ee:	00cb      	lsls	r3, r1, #3
 80031f0:	4651      	mov	r1, sl
 80031f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031f6:	4651      	mov	r1, sl
 80031f8:	00ca      	lsls	r2, r1, #3
 80031fa:	4610      	mov	r0, r2
 80031fc:	4619      	mov	r1, r3
 80031fe:	4603      	mov	r3, r0
 8003200:	4642      	mov	r2, r8
 8003202:	189b      	adds	r3, r3, r2
 8003204:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003208:	464b      	mov	r3, r9
 800320a:	460a      	mov	r2, r1
 800320c:	eb42 0303 	adc.w	r3, r2, r3
 8003210:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	67bb      	str	r3, [r7, #120]	; 0x78
 800321e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003220:	f04f 0200 	mov.w	r2, #0
 8003224:	f04f 0300 	mov.w	r3, #0
 8003228:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800322c:	4649      	mov	r1, r9
 800322e:	008b      	lsls	r3, r1, #2
 8003230:	4641      	mov	r1, r8
 8003232:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003236:	4641      	mov	r1, r8
 8003238:	008a      	lsls	r2, r1, #2
 800323a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800323e:	f7fd f81f 	bl	8000280 <__aeabi_uldivmod>
 8003242:	4602      	mov	r2, r0
 8003244:	460b      	mov	r3, r1
 8003246:	4b39      	ldr	r3, [pc, #228]	; (800332c <UART_SetConfig+0x4e4>)
 8003248:	fba3 1302 	umull	r1, r3, r3, r2
 800324c:	095b      	lsrs	r3, r3, #5
 800324e:	2164      	movs	r1, #100	; 0x64
 8003250:	fb01 f303 	mul.w	r3, r1, r3
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	011b      	lsls	r3, r3, #4
 8003258:	3332      	adds	r3, #50	; 0x32
 800325a:	4a34      	ldr	r2, [pc, #208]	; (800332c <UART_SetConfig+0x4e4>)
 800325c:	fba2 2303 	umull	r2, r3, r2, r3
 8003260:	095b      	lsrs	r3, r3, #5
 8003262:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003266:	441c      	add	r4, r3
 8003268:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800326c:	2200      	movs	r2, #0
 800326e:	673b      	str	r3, [r7, #112]	; 0x70
 8003270:	677a      	str	r2, [r7, #116]	; 0x74
 8003272:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003276:	4642      	mov	r2, r8
 8003278:	464b      	mov	r3, r9
 800327a:	1891      	adds	r1, r2, r2
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	415b      	adcs	r3, r3
 8003280:	60fb      	str	r3, [r7, #12]
 8003282:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003286:	4641      	mov	r1, r8
 8003288:	1851      	adds	r1, r2, r1
 800328a:	6039      	str	r1, [r7, #0]
 800328c:	4649      	mov	r1, r9
 800328e:	414b      	adcs	r3, r1
 8003290:	607b      	str	r3, [r7, #4]
 8003292:	f04f 0200 	mov.w	r2, #0
 8003296:	f04f 0300 	mov.w	r3, #0
 800329a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800329e:	4659      	mov	r1, fp
 80032a0:	00cb      	lsls	r3, r1, #3
 80032a2:	4651      	mov	r1, sl
 80032a4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032a8:	4651      	mov	r1, sl
 80032aa:	00ca      	lsls	r2, r1, #3
 80032ac:	4610      	mov	r0, r2
 80032ae:	4619      	mov	r1, r3
 80032b0:	4603      	mov	r3, r0
 80032b2:	4642      	mov	r2, r8
 80032b4:	189b      	adds	r3, r3, r2
 80032b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80032b8:	464b      	mov	r3, r9
 80032ba:	460a      	mov	r2, r1
 80032bc:	eb42 0303 	adc.w	r3, r2, r3
 80032c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80032c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	663b      	str	r3, [r7, #96]	; 0x60
 80032cc:	667a      	str	r2, [r7, #100]	; 0x64
 80032ce:	f04f 0200 	mov.w	r2, #0
 80032d2:	f04f 0300 	mov.w	r3, #0
 80032d6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80032da:	4649      	mov	r1, r9
 80032dc:	008b      	lsls	r3, r1, #2
 80032de:	4641      	mov	r1, r8
 80032e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032e4:	4641      	mov	r1, r8
 80032e6:	008a      	lsls	r2, r1, #2
 80032e8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80032ec:	f7fc ffc8 	bl	8000280 <__aeabi_uldivmod>
 80032f0:	4602      	mov	r2, r0
 80032f2:	460b      	mov	r3, r1
 80032f4:	4b0d      	ldr	r3, [pc, #52]	; (800332c <UART_SetConfig+0x4e4>)
 80032f6:	fba3 1302 	umull	r1, r3, r3, r2
 80032fa:	095b      	lsrs	r3, r3, #5
 80032fc:	2164      	movs	r1, #100	; 0x64
 80032fe:	fb01 f303 	mul.w	r3, r1, r3
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	011b      	lsls	r3, r3, #4
 8003306:	3332      	adds	r3, #50	; 0x32
 8003308:	4a08      	ldr	r2, [pc, #32]	; (800332c <UART_SetConfig+0x4e4>)
 800330a:	fba2 2303 	umull	r2, r3, r2, r3
 800330e:	095b      	lsrs	r3, r3, #5
 8003310:	f003 020f 	and.w	r2, r3, #15
 8003314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4422      	add	r2, r4
 800331c:	609a      	str	r2, [r3, #8]
}
 800331e:	bf00      	nop
 8003320:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003324:	46bd      	mov	sp, r7
 8003326:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800332a:	bf00      	nop
 800332c:	51eb851f 	.word	0x51eb851f

08003330 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8003330:	b590      	push	{r4, r7, lr}
 8003332:	b085      	sub	sp, #20
 8003334:	af00      	add	r7, sp, #0
 8003336:	4604      	mov	r4, r0
 8003338:	4608      	mov	r0, r1
 800333a:	4611      	mov	r1, r2
 800333c:	461a      	mov	r2, r3
 800333e:	4623      	mov	r3, r4
 8003340:	71fb      	strb	r3, [r7, #7]
 8003342:	4603      	mov	r3, r0
 8003344:	71bb      	strb	r3, [r7, #6]
 8003346:	460b      	mov	r3, r1
 8003348:	80bb      	strh	r3, [r7, #4]
 800334a:	4613      	mov	r3, r2
 800334c:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 800334e:	79fb      	ldrb	r3, [r7, #7]
 8003350:	2b08      	cmp	r3, #8
 8003352:	d902      	bls.n	800335a <socket+0x2a>
 8003354:	f04f 33ff 	mov.w	r3, #4294967295
 8003358:	e0f2      	b.n	8003540 <socket+0x210>
	switch(protocol)
 800335a:	79bb      	ldrb	r3, [r7, #6]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d005      	beq.n	800336c <socket+0x3c>
 8003360:	2b00      	cmp	r3, #0
 8003362:	dd11      	ble.n	8003388 <socket+0x58>
 8003364:	3b02      	subs	r3, #2
 8003366:	2b02      	cmp	r3, #2
 8003368:	d80e      	bhi.n	8003388 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 800336a:	e011      	b.n	8003390 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 800336c:	f107 030c 	add.w	r3, r7, #12
 8003370:	2204      	movs	r2, #4
 8003372:	4619      	mov	r1, r3
 8003374:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003378:	f000 fc84 	bl	8003c84 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d105      	bne.n	800338e <socket+0x5e>
 8003382:	f06f 0302 	mvn.w	r3, #2
 8003386:	e0db      	b.n	8003540 <socket+0x210>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8003388:	f06f 0304 	mvn.w	r3, #4
 800338c:	e0d8      	b.n	8003540 <socket+0x210>
	    break;
 800338e:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8003390:	78fb      	ldrb	r3, [r7, #3]
 8003392:	f003 0304 	and.w	r3, r3, #4
 8003396:	2b00      	cmp	r3, #0
 8003398:	d002      	beq.n	80033a0 <socket+0x70>
 800339a:	f06f 0305 	mvn.w	r3, #5
 800339e:	e0cf      	b.n	8003540 <socket+0x210>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 80033a0:	78fb      	ldrb	r3, [r7, #3]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d025      	beq.n	80033f2 <socket+0xc2>
	{
   	switch(protocol)
 80033a6:	79bb      	ldrb	r3, [r7, #6]
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d002      	beq.n	80033b2 <socket+0x82>
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d008      	beq.n	80033c2 <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 80033b0:	e024      	b.n	80033fc <socket+0xcc>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 80033b2:	78fb      	ldrb	r3, [r7, #3]
 80033b4:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d11c      	bne.n	80033f6 <socket+0xc6>
 80033bc:	f06f 0305 	mvn.w	r3, #5
 80033c0:	e0be      	b.n	8003540 <socket+0x210>
   	      if(flag & SF_IGMP_VER2)
 80033c2:	78fb      	ldrb	r3, [r7, #3]
 80033c4:	f003 0320 	and.w	r3, r3, #32
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d006      	beq.n	80033da <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 80033cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	db02      	blt.n	80033da <socket+0xaa>
 80033d4:	f06f 0305 	mvn.w	r3, #5
 80033d8:	e0b2      	b.n	8003540 <socket+0x210>
      	      if(flag & SF_UNI_BLOCK)
 80033da:	78fb      	ldrb	r3, [r7, #3]
 80033dc:	f003 0310 	and.w	r3, r3, #16
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d00a      	beq.n	80033fa <socket+0xca>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 80033e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	db06      	blt.n	80033fa <socket+0xca>
 80033ec:	f06f 0305 	mvn.w	r3, #5
 80033f0:	e0a6      	b.n	8003540 <socket+0x210>
   	}
   }
 80033f2:	bf00      	nop
 80033f4:	e002      	b.n	80033fc <socket+0xcc>
   	      break;
 80033f6:	bf00      	nop
 80033f8:	e000      	b.n	80033fc <socket+0xcc>
   	      break;
 80033fa:	bf00      	nop
	close(sn);
 80033fc:	79fb      	ldrb	r3, [r7, #7]
 80033fe:	4618      	mov	r0, r3
 8003400:	f000 f8ac 	bl	800355c <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8003404:	79fb      	ldrb	r3, [r7, #7]
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	3301      	adds	r3, #1
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	4618      	mov	r0, r3
 800340e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003412:	f023 030f 	bic.w	r3, r3, #15
 8003416:	b25a      	sxtb	r2, r3
 8003418:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800341c:	4313      	orrs	r3, r2
 800341e:	b25b      	sxtb	r3, r3
 8003420:	b2db      	uxtb	r3, r3
 8003422:	4619      	mov	r1, r3
 8003424:	f000 fbe0 	bl	8003be8 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8003428:	88bb      	ldrh	r3, [r7, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d110      	bne.n	8003450 <socket+0x120>
	{
	   port = sock_any_port++;
 800342e:	4b46      	ldr	r3, [pc, #280]	; (8003548 <socket+0x218>)
 8003430:	881b      	ldrh	r3, [r3, #0]
 8003432:	1c5a      	adds	r2, r3, #1
 8003434:	b291      	uxth	r1, r2
 8003436:	4a44      	ldr	r2, [pc, #272]	; (8003548 <socket+0x218>)
 8003438:	8011      	strh	r1, [r2, #0]
 800343a:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 800343c:	4b42      	ldr	r3, [pc, #264]	; (8003548 <socket+0x218>)
 800343e:	881b      	ldrh	r3, [r3, #0]
 8003440:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8003444:	4293      	cmp	r3, r2
 8003446:	d103      	bne.n	8003450 <socket+0x120>
 8003448:	4b3f      	ldr	r3, [pc, #252]	; (8003548 <socket+0x218>)
 800344a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800344e:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8003450:	79fb      	ldrb	r3, [r7, #7]
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	3301      	adds	r3, #1
 8003456:	00db      	lsls	r3, r3, #3
 8003458:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800345c:	461a      	mov	r2, r3
 800345e:	88bb      	ldrh	r3, [r7, #4]
 8003460:	0a1b      	lsrs	r3, r3, #8
 8003462:	b29b      	uxth	r3, r3
 8003464:	b2db      	uxtb	r3, r3
 8003466:	4619      	mov	r1, r3
 8003468:	4610      	mov	r0, r2
 800346a:	f000 fbbd 	bl	8003be8 <WIZCHIP_WRITE>
 800346e:	79fb      	ldrb	r3, [r7, #7]
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	3301      	adds	r3, #1
 8003474:	00db      	lsls	r3, r3, #3
 8003476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800347a:	461a      	mov	r2, r3
 800347c:	88bb      	ldrh	r3, [r7, #4]
 800347e:	b2db      	uxtb	r3, r3
 8003480:	4619      	mov	r1, r3
 8003482:	4610      	mov	r0, r2
 8003484:	f000 fbb0 	bl	8003be8 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8003488:	79fb      	ldrb	r3, [r7, #7]
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	3301      	adds	r3, #1
 800348e:	00db      	lsls	r3, r3, #3
 8003490:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003494:	2101      	movs	r1, #1
 8003496:	4618      	mov	r0, r3
 8003498:	f000 fba6 	bl	8003be8 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800349c:	bf00      	nop
 800349e:	79fb      	ldrb	r3, [r7, #7]
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	3301      	adds	r3, #1
 80034a4:	00db      	lsls	r3, r3, #3
 80034a6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80034aa:	4618      	mov	r0, r3
 80034ac:	f000 fb50 	bl	8003b50 <WIZCHIP_READ>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1f3      	bne.n	800349e <socket+0x16e>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 80034b6:	79fb      	ldrb	r3, [r7, #7]
 80034b8:	2201      	movs	r2, #1
 80034ba:	fa02 f303 	lsl.w	r3, r2, r3
 80034be:	b21b      	sxth	r3, r3
 80034c0:	43db      	mvns	r3, r3
 80034c2:	b21a      	sxth	r2, r3
 80034c4:	4b21      	ldr	r3, [pc, #132]	; (800354c <socket+0x21c>)
 80034c6:	881b      	ldrh	r3, [r3, #0]
 80034c8:	b21b      	sxth	r3, r3
 80034ca:	4013      	ands	r3, r2
 80034cc:	b21b      	sxth	r3, r3
 80034ce:	b29a      	uxth	r2, r3
 80034d0:	4b1e      	ldr	r3, [pc, #120]	; (800354c <socket+0x21c>)
 80034d2:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 80034d4:	78fb      	ldrb	r3, [r7, #3]
 80034d6:	f003 0201 	and.w	r2, r3, #1
 80034da:	79fb      	ldrb	r3, [r7, #7]
 80034dc:	fa02 f303 	lsl.w	r3, r2, r3
 80034e0:	b21a      	sxth	r2, r3
 80034e2:	4b1a      	ldr	r3, [pc, #104]	; (800354c <socket+0x21c>)
 80034e4:	881b      	ldrh	r3, [r3, #0]
 80034e6:	b21b      	sxth	r3, r3
 80034e8:	4313      	orrs	r3, r2
 80034ea:	b21b      	sxth	r3, r3
 80034ec:	b29a      	uxth	r2, r3
 80034ee:	4b17      	ldr	r3, [pc, #92]	; (800354c <socket+0x21c>)
 80034f0:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 80034f2:	79fb      	ldrb	r3, [r7, #7]
 80034f4:	2201      	movs	r2, #1
 80034f6:	fa02 f303 	lsl.w	r3, r2, r3
 80034fa:	b21b      	sxth	r3, r3
 80034fc:	43db      	mvns	r3, r3
 80034fe:	b21a      	sxth	r2, r3
 8003500:	4b13      	ldr	r3, [pc, #76]	; (8003550 <socket+0x220>)
 8003502:	881b      	ldrh	r3, [r3, #0]
 8003504:	b21b      	sxth	r3, r3
 8003506:	4013      	ands	r3, r2
 8003508:	b21b      	sxth	r3, r3
 800350a:	b29a      	uxth	r2, r3
 800350c:	4b10      	ldr	r3, [pc, #64]	; (8003550 <socket+0x220>)
 800350e:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8003510:	79fb      	ldrb	r3, [r7, #7]
 8003512:	4a10      	ldr	r2, [pc, #64]	; (8003554 <socket+0x224>)
 8003514:	2100      	movs	r1, #0
 8003516:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 800351a:	79fb      	ldrb	r3, [r7, #7]
 800351c:	4a0e      	ldr	r2, [pc, #56]	; (8003558 <socket+0x228>)
 800351e:	2100      	movs	r1, #0
 8003520:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8003522:	bf00      	nop
 8003524:	79fb      	ldrb	r3, [r7, #7]
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	3301      	adds	r3, #1
 800352a:	00db      	lsls	r3, r3, #3
 800352c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003530:	4618      	mov	r0, r3
 8003532:	f000 fb0d 	bl	8003b50 <WIZCHIP_READ>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d0f3      	beq.n	8003524 <socket+0x1f4>
   return (int8_t)sn;
 800353c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8003540:	4618      	mov	r0, r3
 8003542:	3714      	adds	r7, #20
 8003544:	46bd      	mov	sp, r7
 8003546:	bd90      	pop	{r4, r7, pc}
 8003548:	2000000a 	.word	0x2000000a
 800354c:	20000184 	.word	0x20000184
 8003550:	20000186 	.word	0x20000186
 8003554:	20000188 	.word	0x20000188
 8003558:	20000198 	.word	0x20000198

0800355c <close>:

int8_t close(uint8_t sn)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	4603      	mov	r3, r0
 8003564:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8003566:	79fb      	ldrb	r3, [r7, #7]
 8003568:	2b08      	cmp	r3, #8
 800356a:	d902      	bls.n	8003572 <close+0x16>
 800356c:	f04f 33ff 	mov.w	r3, #4294967295
 8003570:	e055      	b.n	800361e <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8003572:	79fb      	ldrb	r3, [r7, #7]
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	3301      	adds	r3, #1
 8003578:	00db      	lsls	r3, r3, #3
 800357a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800357e:	2110      	movs	r1, #16
 8003580:	4618      	mov	r0, r3
 8003582:	f000 fb31 	bl	8003be8 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8003586:	bf00      	nop
 8003588:	79fb      	ldrb	r3, [r7, #7]
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	3301      	adds	r3, #1
 800358e:	00db      	lsls	r3, r3, #3
 8003590:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003594:	4618      	mov	r0, r3
 8003596:	f000 fadb 	bl	8003b50 <WIZCHIP_READ>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d1f3      	bne.n	8003588 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 80035a0:	79fb      	ldrb	r3, [r7, #7]
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	3301      	adds	r3, #1
 80035a6:	00db      	lsls	r3, r3, #3
 80035a8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80035ac:	211f      	movs	r1, #31
 80035ae:	4618      	mov	r0, r3
 80035b0:	f000 fb1a 	bl	8003be8 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 80035b4:	79fb      	ldrb	r3, [r7, #7]
 80035b6:	2201      	movs	r2, #1
 80035b8:	fa02 f303 	lsl.w	r3, r2, r3
 80035bc:	b21b      	sxth	r3, r3
 80035be:	43db      	mvns	r3, r3
 80035c0:	b21a      	sxth	r2, r3
 80035c2:	4b19      	ldr	r3, [pc, #100]	; (8003628 <close+0xcc>)
 80035c4:	881b      	ldrh	r3, [r3, #0]
 80035c6:	b21b      	sxth	r3, r3
 80035c8:	4013      	ands	r3, r2
 80035ca:	b21b      	sxth	r3, r3
 80035cc:	b29a      	uxth	r2, r3
 80035ce:	4b16      	ldr	r3, [pc, #88]	; (8003628 <close+0xcc>)
 80035d0:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 80035d2:	79fb      	ldrb	r3, [r7, #7]
 80035d4:	2201      	movs	r2, #1
 80035d6:	fa02 f303 	lsl.w	r3, r2, r3
 80035da:	b21b      	sxth	r3, r3
 80035dc:	43db      	mvns	r3, r3
 80035de:	b21a      	sxth	r2, r3
 80035e0:	4b12      	ldr	r3, [pc, #72]	; (800362c <close+0xd0>)
 80035e2:	881b      	ldrh	r3, [r3, #0]
 80035e4:	b21b      	sxth	r3, r3
 80035e6:	4013      	ands	r3, r2
 80035e8:	b21b      	sxth	r3, r3
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	4b0f      	ldr	r3, [pc, #60]	; (800362c <close+0xd0>)
 80035ee:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 80035f0:	79fb      	ldrb	r3, [r7, #7]
 80035f2:	4a0f      	ldr	r2, [pc, #60]	; (8003630 <close+0xd4>)
 80035f4:	2100      	movs	r1, #0
 80035f6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 80035fa:	79fb      	ldrb	r3, [r7, #7]
 80035fc:	4a0d      	ldr	r2, [pc, #52]	; (8003634 <close+0xd8>)
 80035fe:	2100      	movs	r1, #0
 8003600:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8003602:	bf00      	nop
 8003604:	79fb      	ldrb	r3, [r7, #7]
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	3301      	adds	r3, #1
 800360a:	00db      	lsls	r3, r3, #3
 800360c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003610:	4618      	mov	r0, r3
 8003612:	f000 fa9d 	bl	8003b50 <WIZCHIP_READ>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1f3      	bne.n	8003604 <close+0xa8>
	return SOCK_OK;
 800361c:	2301      	movs	r3, #1
}
 800361e:	4618      	mov	r0, r3
 8003620:	3708      	adds	r7, #8
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	20000184 	.word	0x20000184
 800362c:	20000186 	.word	0x20000186
 8003630:	20000188 	.word	0x20000188
 8003634:	20000198 	.word	0x20000198

08003638 <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	4603      	mov	r3, r0
 8003640:	6039      	str	r1, [r7, #0]
 8003642:	71fb      	strb	r3, [r7, #7]
 8003644:	4613      	mov	r3, r2
 8003646:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 8003648:	79fb      	ldrb	r3, [r7, #7]
 800364a:	2b08      	cmp	r3, #8
 800364c:	d902      	bls.n	8003654 <connect+0x1c>
 800364e:	f04f 33ff 	mov.w	r3, #4294967295
 8003652:	e0c6      	b.n	80037e2 <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8003654:	79fb      	ldrb	r3, [r7, #7]
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	3301      	adds	r3, #1
 800365a:	00db      	lsls	r3, r3, #3
 800365c:	4618      	mov	r0, r3
 800365e:	f000 fa77 	bl	8003b50 <WIZCHIP_READ>
 8003662:	4603      	mov	r3, r0
 8003664:	f003 030f 	and.w	r3, r3, #15
 8003668:	2b01      	cmp	r3, #1
 800366a:	d002      	beq.n	8003672 <connect+0x3a>
 800366c:	f06f 0304 	mvn.w	r3, #4
 8003670:	e0b7      	b.n	80037e2 <connect+0x1aa>
   CHECK_SOCKINIT();
 8003672:	79fb      	ldrb	r3, [r7, #7]
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	3301      	adds	r3, #1
 8003678:	00db      	lsls	r3, r3, #3
 800367a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800367e:	4618      	mov	r0, r3
 8003680:	f000 fa66 	bl	8003b50 <WIZCHIP_READ>
 8003684:	4603      	mov	r3, r0
 8003686:	2b13      	cmp	r3, #19
 8003688:	d002      	beq.n	8003690 <connect+0x58>
 800368a:	f06f 0302 	mvn.w	r3, #2
 800368e:	e0a8      	b.n	80037e2 <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	021b      	lsls	r3, r3, #8
 800369a:	683a      	ldr	r2, [r7, #0]
 800369c:	3201      	adds	r2, #1
 800369e:	7812      	ldrb	r2, [r2, #0]
 80036a0:	4413      	add	r3, r2
 80036a2:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	021b      	lsls	r3, r3, #8
 80036a8:	683a      	ldr	r2, [r7, #0]
 80036aa:	3202      	adds	r2, #2
 80036ac:	7812      	ldrb	r2, [r2, #0]
 80036ae:	4413      	add	r3, r2
 80036b0:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	021b      	lsls	r3, r3, #8
 80036b6:	683a      	ldr	r2, [r7, #0]
 80036b8:	3203      	adds	r2, #3
 80036ba:	7812      	ldrb	r2, [r2, #0]
 80036bc:	4413      	add	r3, r2
 80036be:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c6:	d002      	beq.n	80036ce <connect+0x96>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d102      	bne.n	80036d4 <connect+0x9c>
 80036ce:	f06f 030b 	mvn.w	r3, #11
 80036d2:	e086      	b.n	80037e2 <connect+0x1aa>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 80036d4:	88bb      	ldrh	r3, [r7, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d102      	bne.n	80036e0 <connect+0xa8>
 80036da:	f06f 030a 	mvn.w	r3, #10
 80036de:	e080      	b.n	80037e2 <connect+0x1aa>
	setSn_DIPR(sn,addr);
 80036e0:	79fb      	ldrb	r3, [r7, #7]
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	3301      	adds	r3, #1
 80036e6:	00db      	lsls	r3, r3, #3
 80036e8:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80036ec:	2204      	movs	r2, #4
 80036ee:	6839      	ldr	r1, [r7, #0]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f000 fb27 	bl	8003d44 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 80036f6:	79fb      	ldrb	r3, [r7, #7]
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	3301      	adds	r3, #1
 80036fc:	00db      	lsls	r3, r3, #3
 80036fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003702:	461a      	mov	r2, r3
 8003704:	88bb      	ldrh	r3, [r7, #4]
 8003706:	0a1b      	lsrs	r3, r3, #8
 8003708:	b29b      	uxth	r3, r3
 800370a:	b2db      	uxtb	r3, r3
 800370c:	4619      	mov	r1, r3
 800370e:	4610      	mov	r0, r2
 8003710:	f000 fa6a 	bl	8003be8 <WIZCHIP_WRITE>
 8003714:	79fb      	ldrb	r3, [r7, #7]
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	3301      	adds	r3, #1
 800371a:	00db      	lsls	r3, r3, #3
 800371c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003720:	461a      	mov	r2, r3
 8003722:	88bb      	ldrh	r3, [r7, #4]
 8003724:	b2db      	uxtb	r3, r3
 8003726:	4619      	mov	r1, r3
 8003728:	4610      	mov	r0, r2
 800372a:	f000 fa5d 	bl	8003be8 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 800372e:	79fb      	ldrb	r3, [r7, #7]
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	3301      	adds	r3, #1
 8003734:	00db      	lsls	r3, r3, #3
 8003736:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800373a:	2104      	movs	r1, #4
 800373c:	4618      	mov	r0, r3
 800373e:	f000 fa53 	bl	8003be8 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8003742:	bf00      	nop
 8003744:	79fb      	ldrb	r3, [r7, #7]
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	3301      	adds	r3, #1
 800374a:	00db      	lsls	r3, r3, #3
 800374c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003750:	4618      	mov	r0, r3
 8003752:	f000 f9fd 	bl	8003b50 <WIZCHIP_READ>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d1f3      	bne.n	8003744 <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 800375c:	4b23      	ldr	r3, [pc, #140]	; (80037ec <connect+0x1b4>)
 800375e:	881b      	ldrh	r3, [r3, #0]
 8003760:	461a      	mov	r2, r3
 8003762:	79fb      	ldrb	r3, [r7, #7]
 8003764:	fa42 f303 	asr.w	r3, r2, r3
 8003768:	f003 0301 	and.w	r3, r3, #1
 800376c:	2b00      	cmp	r3, #0
 800376e:	d02b      	beq.n	80037c8 <connect+0x190>
 8003770:	2300      	movs	r3, #0
 8003772:	e036      	b.n	80037e2 <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 8003774:	79fb      	ldrb	r3, [r7, #7]
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	3301      	adds	r3, #1
 800377a:	00db      	lsls	r3, r3, #3
 800377c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003780:	4618      	mov	r0, r3
 8003782:	f000 f9e5 	bl	8003b50 <WIZCHIP_READ>
 8003786:	4603      	mov	r3, r0
 8003788:	f003 0308 	and.w	r3, r3, #8
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00c      	beq.n	80037aa <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 8003790:	79fb      	ldrb	r3, [r7, #7]
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	3301      	adds	r3, #1
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800379c:	2108      	movs	r1, #8
 800379e:	4618      	mov	r0, r3
 80037a0:	f000 fa22 	bl	8003be8 <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 80037a4:	f06f 030c 	mvn.w	r3, #12
 80037a8:	e01b      	b.n	80037e2 <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 80037aa:	79fb      	ldrb	r3, [r7, #7]
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	3301      	adds	r3, #1
 80037b0:	00db      	lsls	r3, r3, #3
 80037b2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80037b6:	4618      	mov	r0, r3
 80037b8:	f000 f9ca 	bl	8003b50 <WIZCHIP_READ>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d102      	bne.n	80037c8 <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 80037c2:	f06f 0303 	mvn.w	r3, #3
 80037c6:	e00c      	b.n	80037e2 <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 80037c8:	79fb      	ldrb	r3, [r7, #7]
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	3301      	adds	r3, #1
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80037d4:	4618      	mov	r0, r3
 80037d6:	f000 f9bb 	bl	8003b50 <WIZCHIP_READ>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b17      	cmp	r3, #23
 80037de:	d1c9      	bne.n	8003774 <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 80037e0:	2301      	movs	r3, #1
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3710      	adds	r7, #16
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	20000184 	.word	0x20000184

080037f0 <send>:
	}
	return SOCK_OK;
}

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	4603      	mov	r3, r0
 80037f8:	6039      	str	r1, [r7, #0]
 80037fa:	71fb      	strb	r3, [r7, #7]
 80037fc:	4613      	mov	r3, r2
 80037fe:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8003800:	2300      	movs	r3, #0
 8003802:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8003804:	2300      	movs	r3, #0
 8003806:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8003808:	79fb      	ldrb	r3, [r7, #7]
 800380a:	2b08      	cmp	r3, #8
 800380c:	d902      	bls.n	8003814 <send+0x24>
 800380e:	f04f 33ff 	mov.w	r3, #4294967295
 8003812:	e0de      	b.n	80039d2 <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8003814:	79fb      	ldrb	r3, [r7, #7]
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	3301      	adds	r3, #1
 800381a:	00db      	lsls	r3, r3, #3
 800381c:	4618      	mov	r0, r3
 800381e:	f000 f997 	bl	8003b50 <WIZCHIP_READ>
 8003822:	4603      	mov	r3, r0
 8003824:	f003 030f 	and.w	r3, r3, #15
 8003828:	2b01      	cmp	r3, #1
 800382a:	d002      	beq.n	8003832 <send+0x42>
 800382c:	f06f 0304 	mvn.w	r3, #4
 8003830:	e0cf      	b.n	80039d2 <send+0x1e2>
   CHECK_SOCKDATA();
 8003832:	88bb      	ldrh	r3, [r7, #4]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d102      	bne.n	800383e <send+0x4e>
 8003838:	f06f 030d 	mvn.w	r3, #13
 800383c:	e0c9      	b.n	80039d2 <send+0x1e2>
   tmp = getSn_SR(sn);
 800383e:	79fb      	ldrb	r3, [r7, #7]
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	3301      	adds	r3, #1
 8003844:	00db      	lsls	r3, r3, #3
 8003846:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800384a:	4618      	mov	r0, r3
 800384c:	f000 f980 	bl	8003b50 <WIZCHIP_READ>
 8003850:	4603      	mov	r3, r0
 8003852:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8003854:	7bfb      	ldrb	r3, [r7, #15]
 8003856:	2b17      	cmp	r3, #23
 8003858:	d005      	beq.n	8003866 <send+0x76>
 800385a:	7bfb      	ldrb	r3, [r7, #15]
 800385c:	2b1c      	cmp	r3, #28
 800385e:	d002      	beq.n	8003866 <send+0x76>
 8003860:	f06f 0306 	mvn.w	r3, #6
 8003864:	e0b5      	b.n	80039d2 <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 8003866:	4b5d      	ldr	r3, [pc, #372]	; (80039dc <send+0x1ec>)
 8003868:	881b      	ldrh	r3, [r3, #0]
 800386a:	461a      	mov	r2, r3
 800386c:	79fb      	ldrb	r3, [r7, #7]
 800386e:	fa42 f303 	asr.w	r3, r2, r3
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	2b00      	cmp	r3, #0
 8003878:	d039      	beq.n	80038ee <send+0xfe>
   {
      tmp = getSn_IR(sn);
 800387a:	79fb      	ldrb	r3, [r7, #7]
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	3301      	adds	r3, #1
 8003880:	00db      	lsls	r3, r3, #3
 8003882:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003886:	4618      	mov	r0, r3
 8003888:	f000 f962 	bl	8003b50 <WIZCHIP_READ>
 800388c:	4603      	mov	r3, r0
 800388e:	f003 031f 	and.w	r3, r3, #31
 8003892:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8003894:	7bfb      	ldrb	r3, [r7, #15]
 8003896:	f003 0310 	and.w	r3, r3, #16
 800389a:	2b00      	cmp	r3, #0
 800389c:	d019      	beq.n	80038d2 <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 800389e:	79fb      	ldrb	r3, [r7, #7]
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	3301      	adds	r3, #1
 80038a4:	00db      	lsls	r3, r3, #3
 80038a6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80038aa:	2110      	movs	r1, #16
 80038ac:	4618      	mov	r0, r3
 80038ae:	f000 f99b 	bl	8003be8 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 80038b2:	79fb      	ldrb	r3, [r7, #7]
 80038b4:	2201      	movs	r2, #1
 80038b6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ba:	b21b      	sxth	r3, r3
 80038bc:	43db      	mvns	r3, r3
 80038be:	b21a      	sxth	r2, r3
 80038c0:	4b46      	ldr	r3, [pc, #280]	; (80039dc <send+0x1ec>)
 80038c2:	881b      	ldrh	r3, [r3, #0]
 80038c4:	b21b      	sxth	r3, r3
 80038c6:	4013      	ands	r3, r2
 80038c8:	b21b      	sxth	r3, r3
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	4b43      	ldr	r3, [pc, #268]	; (80039dc <send+0x1ec>)
 80038ce:	801a      	strh	r2, [r3, #0]
 80038d0:	e00d      	b.n	80038ee <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 80038d2:	7bfb      	ldrb	r3, [r7, #15]
 80038d4:	f003 0308 	and.w	r3, r3, #8
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d006      	beq.n	80038ea <send+0xfa>
      {
         close(sn);
 80038dc:	79fb      	ldrb	r3, [r7, #7]
 80038de:	4618      	mov	r0, r3
 80038e0:	f7ff fe3c 	bl	800355c <close>
         return SOCKERR_TIMEOUT;
 80038e4:	f06f 030c 	mvn.w	r3, #12
 80038e8:	e073      	b.n	80039d2 <send+0x1e2>
      }
      else return SOCK_BUSY;
 80038ea:	2300      	movs	r3, #0
 80038ec:	e071      	b.n	80039d2 <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 80038ee:	79fb      	ldrb	r3, [r7, #7]
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	3301      	adds	r3, #1
 80038f4:	00db      	lsls	r3, r3, #3
 80038f6:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80038fa:	4618      	mov	r0, r3
 80038fc:	f000 f928 	bl	8003b50 <WIZCHIP_READ>
 8003900:	4603      	mov	r3, r0
 8003902:	b29b      	uxth	r3, r3
 8003904:	029b      	lsls	r3, r3, #10
 8003906:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8003908:	88ba      	ldrh	r2, [r7, #4]
 800390a:	89bb      	ldrh	r3, [r7, #12]
 800390c:	429a      	cmp	r2, r3
 800390e:	d901      	bls.n	8003914 <send+0x124>
 8003910:	89bb      	ldrh	r3, [r7, #12]
 8003912:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8003914:	79fb      	ldrb	r3, [r7, #7]
 8003916:	4618      	mov	r0, r3
 8003918:	f000 fa74 	bl	8003e04 <getSn_TX_FSR>
 800391c:	4603      	mov	r3, r0
 800391e:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8003920:	79fb      	ldrb	r3, [r7, #7]
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	3301      	adds	r3, #1
 8003926:	00db      	lsls	r3, r3, #3
 8003928:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800392c:	4618      	mov	r0, r3
 800392e:	f000 f90f 	bl	8003b50 <WIZCHIP_READ>
 8003932:	4603      	mov	r3, r0
 8003934:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8003936:	7bfb      	ldrb	r3, [r7, #15]
 8003938:	2b17      	cmp	r3, #23
 800393a:	d009      	beq.n	8003950 <send+0x160>
 800393c:	7bfb      	ldrb	r3, [r7, #15]
 800393e:	2b1c      	cmp	r3, #28
 8003940:	d006      	beq.n	8003950 <send+0x160>
      {
         close(sn);
 8003942:	79fb      	ldrb	r3, [r7, #7]
 8003944:	4618      	mov	r0, r3
 8003946:	f7ff fe09 	bl	800355c <close>
         return SOCKERR_SOCKSTATUS;
 800394a:	f06f 0306 	mvn.w	r3, #6
 800394e:	e040      	b.n	80039d2 <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8003950:	4b23      	ldr	r3, [pc, #140]	; (80039e0 <send+0x1f0>)
 8003952:	881b      	ldrh	r3, [r3, #0]
 8003954:	461a      	mov	r2, r3
 8003956:	79fb      	ldrb	r3, [r7, #7]
 8003958:	fa42 f303 	asr.w	r3, r2, r3
 800395c:	f003 0301 	and.w	r3, r3, #1
 8003960:	2b00      	cmp	r3, #0
 8003962:	d005      	beq.n	8003970 <send+0x180>
 8003964:	88ba      	ldrh	r2, [r7, #4]
 8003966:	89bb      	ldrh	r3, [r7, #12]
 8003968:	429a      	cmp	r2, r3
 800396a:	d901      	bls.n	8003970 <send+0x180>
 800396c:	2300      	movs	r3, #0
 800396e:	e030      	b.n	80039d2 <send+0x1e2>
      if(len <= freesize) break;
 8003970:	88ba      	ldrh	r2, [r7, #4]
 8003972:	89bb      	ldrh	r3, [r7, #12]
 8003974:	429a      	cmp	r2, r3
 8003976:	d900      	bls.n	800397a <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 8003978:	e7cc      	b.n	8003914 <send+0x124>
      if(len <= freesize) break;
 800397a:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 800397c:	88ba      	ldrh	r2, [r7, #4]
 800397e:	79fb      	ldrb	r3, [r7, #7]
 8003980:	6839      	ldr	r1, [r7, #0]
 8003982:	4618      	mov	r0, r3
 8003984:	f000 fad4 	bl	8003f30 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8003988:	79fb      	ldrb	r3, [r7, #7]
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	3301      	adds	r3, #1
 800398e:	00db      	lsls	r3, r3, #3
 8003990:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003994:	2120      	movs	r1, #32
 8003996:	4618      	mov	r0, r3
 8003998:	f000 f926 	bl	8003be8 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 800399c:	bf00      	nop
 800399e:	79fb      	ldrb	r3, [r7, #7]
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	3301      	adds	r3, #1
 80039a4:	00db      	lsls	r3, r3, #3
 80039a6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80039aa:	4618      	mov	r0, r3
 80039ac:	f000 f8d0 	bl	8003b50 <WIZCHIP_READ>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1f3      	bne.n	800399e <send+0x1ae>
   sock_is_sending |= (1 << sn);
 80039b6:	79fb      	ldrb	r3, [r7, #7]
 80039b8:	2201      	movs	r2, #1
 80039ba:	fa02 f303 	lsl.w	r3, r2, r3
 80039be:	b21a      	sxth	r2, r3
 80039c0:	4b06      	ldr	r3, [pc, #24]	; (80039dc <send+0x1ec>)
 80039c2:	881b      	ldrh	r3, [r3, #0]
 80039c4:	b21b      	sxth	r3, r3
 80039c6:	4313      	orrs	r3, r2
 80039c8:	b21b      	sxth	r3, r3
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	4b03      	ldr	r3, [pc, #12]	; (80039dc <send+0x1ec>)
 80039ce:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80039d0:	88bb      	ldrh	r3, [r7, #4]
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3710      	adds	r7, #16
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	20000186 	.word	0x20000186
 80039e0:	20000184 	.word	0x20000184

080039e4 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80039e4:	b590      	push	{r4, r7, lr}
 80039e6:	b085      	sub	sp, #20
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	4603      	mov	r3, r0
 80039ec:	6039      	str	r1, [r7, #0]
 80039ee:	71fb      	strb	r3, [r7, #7]
 80039f0:	4613      	mov	r3, r2
 80039f2:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 80039f4:	2300      	movs	r3, #0
 80039f6:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 80039f8:	2300      	movs	r3, #0
 80039fa:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 80039fc:	79fb      	ldrb	r3, [r7, #7]
 80039fe:	2b08      	cmp	r3, #8
 8003a00:	d902      	bls.n	8003a08 <recv+0x24>
 8003a02:	f04f 33ff 	mov.w	r3, #4294967295
 8003a06:	e09c      	b.n	8003b42 <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8003a08:	79fb      	ldrb	r3, [r7, #7]
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	00db      	lsls	r3, r3, #3
 8003a10:	4618      	mov	r0, r3
 8003a12:	f000 f89d 	bl	8003b50 <WIZCHIP_READ>
 8003a16:	4603      	mov	r3, r0
 8003a18:	f003 030f 	and.w	r3, r3, #15
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d002      	beq.n	8003a26 <recv+0x42>
 8003a20:	f06f 0304 	mvn.w	r3, #4
 8003a24:	e08d      	b.n	8003b42 <recv+0x15e>
   CHECK_SOCKDATA();
 8003a26:	88bb      	ldrh	r3, [r7, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d102      	bne.n	8003a32 <recv+0x4e>
 8003a2c:	f06f 030d 	mvn.w	r3, #13
 8003a30:	e087      	b.n	8003b42 <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 8003a32:	79fb      	ldrb	r3, [r7, #7]
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	3301      	adds	r3, #1
 8003a38:	00db      	lsls	r3, r3, #3
 8003a3a:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f000 f886 	bl	8003b50 <WIZCHIP_READ>
 8003a44:	4603      	mov	r3, r0
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	029b      	lsls	r3, r3, #10
 8003a4a:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8003a4c:	89ba      	ldrh	r2, [r7, #12]
 8003a4e:	88bb      	ldrh	r3, [r7, #4]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d201      	bcs.n	8003a58 <recv+0x74>
 8003a54:	89bb      	ldrh	r3, [r7, #12]
 8003a56:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8003a58:	79fb      	ldrb	r3, [r7, #7]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f000 fa1d 	bl	8003e9a <getSn_RX_RSR>
 8003a60:	4603      	mov	r3, r0
 8003a62:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8003a64:	79fb      	ldrb	r3, [r7, #7]
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	3301      	adds	r3, #1
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003a70:	4618      	mov	r0, r3
 8003a72:	f000 f86d 	bl	8003b50 <WIZCHIP_READ>
 8003a76:	4603      	mov	r3, r0
 8003a78:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 8003a7a:	7bfb      	ldrb	r3, [r7, #15]
 8003a7c:	2b17      	cmp	r3, #23
 8003a7e:	d026      	beq.n	8003ace <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 8003a80:	7bfb      	ldrb	r3, [r7, #15]
 8003a82:	2b1c      	cmp	r3, #28
 8003a84:	d11c      	bne.n	8003ac0 <recv+0xdc>
            {
               if(recvsize != 0) break;
 8003a86:	89bb      	ldrh	r3, [r7, #12]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d133      	bne.n	8003af4 <recv+0x110>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8003a8c:	79fb      	ldrb	r3, [r7, #7]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f000 f9b8 	bl	8003e04 <getSn_TX_FSR>
 8003a94:	4603      	mov	r3, r0
 8003a96:	461c      	mov	r4, r3
 8003a98:	79fb      	ldrb	r3, [r7, #7]
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	00db      	lsls	r3, r3, #3
 8003aa0:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f000 f853 	bl	8003b50 <WIZCHIP_READ>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	029b      	lsls	r3, r3, #10
 8003aae:	429c      	cmp	r4, r3
 8003ab0:	d10d      	bne.n	8003ace <recv+0xea>
               {
                  close(sn);
 8003ab2:	79fb      	ldrb	r3, [r7, #7]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7ff fd51 	bl	800355c <close>
                  return SOCKERR_SOCKSTATUS;
 8003aba:	f06f 0306 	mvn.w	r3, #6
 8003abe:	e040      	b.n	8003b42 <recv+0x15e>
               }
            }
            else
            {
               close(sn);
 8003ac0:	79fb      	ldrb	r3, [r7, #7]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7ff fd4a 	bl	800355c <close>
               return SOCKERR_SOCKSTATUS;
 8003ac8:	f06f 0306 	mvn.w	r3, #6
 8003acc:	e039      	b.n	8003b42 <recv+0x15e>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8003ace:	4b1f      	ldr	r3, [pc, #124]	; (8003b4c <recv+0x168>)
 8003ad0:	881b      	ldrh	r3, [r3, #0]
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	79fb      	ldrb	r3, [r7, #7]
 8003ad6:	fa42 f303 	asr.w	r3, r2, r3
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d004      	beq.n	8003aec <recv+0x108>
 8003ae2:	89bb      	ldrh	r3, [r7, #12]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d101      	bne.n	8003aec <recv+0x108>
 8003ae8:	2300      	movs	r3, #0
 8003aea:	e02a      	b.n	8003b42 <recv+0x15e>
         if(recvsize != 0) break;
 8003aec:	89bb      	ldrh	r3, [r7, #12]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d102      	bne.n	8003af8 <recv+0x114>
         recvsize = getSn_RX_RSR(sn);
 8003af2:	e7b1      	b.n	8003a58 <recv+0x74>
               if(recvsize != 0) break;
 8003af4:	bf00      	nop
 8003af6:	e000      	b.n	8003afa <recv+0x116>
         if(recvsize != 0) break;
 8003af8:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8003afa:	89ba      	ldrh	r2, [r7, #12]
 8003afc:	88bb      	ldrh	r3, [r7, #4]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d201      	bcs.n	8003b06 <recv+0x122>
 8003b02:	89bb      	ldrh	r3, [r7, #12]
 8003b04:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8003b06:	88ba      	ldrh	r2, [r7, #4]
 8003b08:	79fb      	ldrb	r3, [r7, #7]
 8003b0a:	6839      	ldr	r1, [r7, #0]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f000 fa6b 	bl	8003fe8 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 8003b12:	79fb      	ldrb	r3, [r7, #7]
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	3301      	adds	r3, #1
 8003b18:	00db      	lsls	r3, r3, #3
 8003b1a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003b1e:	2140      	movs	r1, #64	; 0x40
 8003b20:	4618      	mov	r0, r3
 8003b22:	f000 f861 	bl	8003be8 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8003b26:	bf00      	nop
 8003b28:	79fb      	ldrb	r3, [r7, #7]
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	00db      	lsls	r3, r3, #3
 8003b30:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003b34:	4618      	mov	r0, r3
 8003b36:	f000 f80b 	bl	8003b50 <WIZCHIP_READ>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d1f3      	bne.n	8003b28 <recv+0x144>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8003b40:	88bb      	ldrh	r3, [r7, #4]
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3714      	adds	r7, #20
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd90      	pop	{r4, r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	20000184 	.word	0x20000184

08003b50 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8003b58:	4b22      	ldr	r3, [pc, #136]	; (8003be4 <WIZCHIP_READ+0x94>)
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	4798      	blx	r3
   WIZCHIP.CS._select();
 8003b5e:	4b21      	ldr	r3, [pc, #132]	; (8003be4 <WIZCHIP_READ+0x94>)
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003b64:	4b1f      	ldr	r3, [pc, #124]	; (8003be4 <WIZCHIP_READ+0x94>)
 8003b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d003      	beq.n	8003b74 <WIZCHIP_READ+0x24>
 8003b6c:	4b1d      	ldr	r3, [pc, #116]	; (8003be4 <WIZCHIP_READ+0x94>)
 8003b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d114      	bne.n	8003b9e <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003b74:	4b1b      	ldr	r3, [pc, #108]	; (8003be4 <WIZCHIP_READ+0x94>)
 8003b76:	6a1b      	ldr	r3, [r3, #32]
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	0c12      	lsrs	r2, r2, #16
 8003b7c:	b2d2      	uxtb	r2, r2
 8003b7e:	4610      	mov	r0, r2
 8003b80:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8003b82:	4b18      	ldr	r3, [pc, #96]	; (8003be4 <WIZCHIP_READ+0x94>)
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	0a12      	lsrs	r2, r2, #8
 8003b8a:	b2d2      	uxtb	r2, r2
 8003b8c:	4610      	mov	r0, r2
 8003b8e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8003b90:	4b14      	ldr	r3, [pc, #80]	; (8003be4 <WIZCHIP_READ+0x94>)
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	b2d2      	uxtb	r2, r2
 8003b98:	4610      	mov	r0, r2
 8003b9a:	4798      	blx	r3
 8003b9c:	e011      	b.n	8003bc2 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	0c1b      	lsrs	r3, r3, #16
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	0a1b      	lsrs	r3, r3, #8
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8003bb4:	4b0b      	ldr	r3, [pc, #44]	; (8003be4 <WIZCHIP_READ+0x94>)
 8003bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb8:	f107 020c 	add.w	r2, r7, #12
 8003bbc:	2103      	movs	r1, #3
 8003bbe:	4610      	mov	r0, r2
 8003bc0:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8003bc2:	4b08      	ldr	r3, [pc, #32]	; (8003be4 <WIZCHIP_READ+0x94>)
 8003bc4:	69db      	ldr	r3, [r3, #28]
 8003bc6:	4798      	blx	r3
 8003bc8:	4603      	mov	r3, r0
 8003bca:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8003bcc:	4b05      	ldr	r3, [pc, #20]	; (8003be4 <WIZCHIP_READ+0x94>)
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003bd2:	4b04      	ldr	r3, [pc, #16]	; (8003be4 <WIZCHIP_READ+0x94>)
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	4798      	blx	r3
   return ret;
 8003bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	2000000c 	.word	0x2000000c

08003be8 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8003bf4:	4b22      	ldr	r3, [pc, #136]	; (8003c80 <WIZCHIP_WRITE+0x98>)
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	4798      	blx	r3
   WIZCHIP.CS._select();
 8003bfa:	4b21      	ldr	r3, [pc, #132]	; (8003c80 <WIZCHIP_WRITE+0x98>)
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f043 0304 	orr.w	r3, r3, #4
 8003c06:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003c08:	4b1d      	ldr	r3, [pc, #116]	; (8003c80 <WIZCHIP_WRITE+0x98>)
 8003c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d119      	bne.n	8003c44 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003c10:	4b1b      	ldr	r3, [pc, #108]	; (8003c80 <WIZCHIP_WRITE+0x98>)
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	0c12      	lsrs	r2, r2, #16
 8003c18:	b2d2      	uxtb	r2, r2
 8003c1a:	4610      	mov	r0, r2
 8003c1c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8003c1e:	4b18      	ldr	r3, [pc, #96]	; (8003c80 <WIZCHIP_WRITE+0x98>)
 8003c20:	6a1b      	ldr	r3, [r3, #32]
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	0a12      	lsrs	r2, r2, #8
 8003c26:	b2d2      	uxtb	r2, r2
 8003c28:	4610      	mov	r0, r2
 8003c2a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8003c2c:	4b14      	ldr	r3, [pc, #80]	; (8003c80 <WIZCHIP_WRITE+0x98>)
 8003c2e:	6a1b      	ldr	r3, [r3, #32]
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	b2d2      	uxtb	r2, r2
 8003c34:	4610      	mov	r0, r2
 8003c36:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8003c38:	4b11      	ldr	r3, [pc, #68]	; (8003c80 <WIZCHIP_WRITE+0x98>)
 8003c3a:	6a1b      	ldr	r3, [r3, #32]
 8003c3c:	78fa      	ldrb	r2, [r7, #3]
 8003c3e:	4610      	mov	r0, r2
 8003c40:	4798      	blx	r3
 8003c42:	e013      	b.n	8003c6c <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	0c1b      	lsrs	r3, r3, #16
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	0a1b      	lsrs	r3, r3, #8
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8003c5a:	78fb      	ldrb	r3, [r7, #3]
 8003c5c:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8003c5e:	4b08      	ldr	r3, [pc, #32]	; (8003c80 <WIZCHIP_WRITE+0x98>)
 8003c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c62:	f107 020c 	add.w	r2, r7, #12
 8003c66:	2104      	movs	r1, #4
 8003c68:	4610      	mov	r0, r2
 8003c6a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8003c6c:	4b04      	ldr	r3, [pc, #16]	; (8003c80 <WIZCHIP_WRITE+0x98>)
 8003c6e:	699b      	ldr	r3, [r3, #24]
 8003c70:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003c72:	4b03      	ldr	r3, [pc, #12]	; (8003c80 <WIZCHIP_WRITE+0x98>)
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	4798      	blx	r3
}
 8003c78:	bf00      	nop
 8003c7a:	3710      	adds	r7, #16
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	2000000c 	.word	0x2000000c

08003c84 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8003c84:	b590      	push	{r4, r7, lr}
 8003c86:	b087      	sub	sp, #28
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8003c92:	4b2b      	ldr	r3, [pc, #172]	; (8003d40 <WIZCHIP_READ_BUF+0xbc>)
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	4798      	blx	r3
   WIZCHIP.CS._select();
 8003c98:	4b29      	ldr	r3, [pc, #164]	; (8003d40 <WIZCHIP_READ_BUF+0xbc>)
 8003c9a:	695b      	ldr	r3, [r3, #20]
 8003c9c:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003c9e:	4b28      	ldr	r3, [pc, #160]	; (8003d40 <WIZCHIP_READ_BUF+0xbc>)
 8003ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d003      	beq.n	8003cae <WIZCHIP_READ_BUF+0x2a>
 8003ca6:	4b26      	ldr	r3, [pc, #152]	; (8003d40 <WIZCHIP_READ_BUF+0xbc>)
 8003ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d126      	bne.n	8003cfc <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003cae:	4b24      	ldr	r3, [pc, #144]	; (8003d40 <WIZCHIP_READ_BUF+0xbc>)
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	0c12      	lsrs	r2, r2, #16
 8003cb6:	b2d2      	uxtb	r2, r2
 8003cb8:	4610      	mov	r0, r2
 8003cba:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8003cbc:	4b20      	ldr	r3, [pc, #128]	; (8003d40 <WIZCHIP_READ_BUF+0xbc>)
 8003cbe:	6a1b      	ldr	r3, [r3, #32]
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	0a12      	lsrs	r2, r2, #8
 8003cc4:	b2d2      	uxtb	r2, r2
 8003cc6:	4610      	mov	r0, r2
 8003cc8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8003cca:	4b1d      	ldr	r3, [pc, #116]	; (8003d40 <WIZCHIP_READ_BUF+0xbc>)
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	b2d2      	uxtb	r2, r2
 8003cd2:	4610      	mov	r0, r2
 8003cd4:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	82fb      	strh	r3, [r7, #22]
 8003cda:	e00a      	b.n	8003cf2 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8003cdc:	4b18      	ldr	r3, [pc, #96]	; (8003d40 <WIZCHIP_READ_BUF+0xbc>)
 8003cde:	69db      	ldr	r3, [r3, #28]
 8003ce0:	8afa      	ldrh	r2, [r7, #22]
 8003ce2:	68b9      	ldr	r1, [r7, #8]
 8003ce4:	188c      	adds	r4, r1, r2
 8003ce6:	4798      	blx	r3
 8003ce8:	4603      	mov	r3, r0
 8003cea:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8003cec:	8afb      	ldrh	r3, [r7, #22]
 8003cee:	3301      	adds	r3, #1
 8003cf0:	82fb      	strh	r3, [r7, #22]
 8003cf2:	8afa      	ldrh	r2, [r7, #22]
 8003cf4:	88fb      	ldrh	r3, [r7, #6]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d3f0      	bcc.n	8003cdc <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003cfa:	e017      	b.n	8003d2c <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	0c1b      	lsrs	r3, r3, #16
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	0a1b      	lsrs	r3, r3, #8
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8003d12:	4b0b      	ldr	r3, [pc, #44]	; (8003d40 <WIZCHIP_READ_BUF+0xbc>)
 8003d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d16:	f107 0210 	add.w	r2, r7, #16
 8003d1a:	2103      	movs	r1, #3
 8003d1c:	4610      	mov	r0, r2
 8003d1e:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8003d20:	4b07      	ldr	r3, [pc, #28]	; (8003d40 <WIZCHIP_READ_BUF+0xbc>)
 8003d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d24:	88fa      	ldrh	r2, [r7, #6]
 8003d26:	4611      	mov	r1, r2
 8003d28:	68b8      	ldr	r0, [r7, #8]
 8003d2a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8003d2c:	4b04      	ldr	r3, [pc, #16]	; (8003d40 <WIZCHIP_READ_BUF+0xbc>)
 8003d2e:	699b      	ldr	r3, [r3, #24]
 8003d30:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003d32:	4b03      	ldr	r3, [pc, #12]	; (8003d40 <WIZCHIP_READ_BUF+0xbc>)
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	4798      	blx	r3
}
 8003d38:	bf00      	nop
 8003d3a:	371c      	adds	r7, #28
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd90      	pop	{r4, r7, pc}
 8003d40:	2000000c 	.word	0x2000000c

08003d44 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b086      	sub	sp, #24
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	4613      	mov	r3, r2
 8003d50:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8003d52:	4b2b      	ldr	r3, [pc, #172]	; (8003e00 <WIZCHIP_WRITE_BUF+0xbc>)
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	4798      	blx	r3
   WIZCHIP.CS._select();
 8003d58:	4b29      	ldr	r3, [pc, #164]	; (8003e00 <WIZCHIP_WRITE_BUF+0xbc>)
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f043 0304 	orr.w	r3, r3, #4
 8003d64:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003d66:	4b26      	ldr	r3, [pc, #152]	; (8003e00 <WIZCHIP_WRITE_BUF+0xbc>)
 8003d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d126      	bne.n	8003dbc <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003d6e:	4b24      	ldr	r3, [pc, #144]	; (8003e00 <WIZCHIP_WRITE_BUF+0xbc>)
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	0c12      	lsrs	r2, r2, #16
 8003d76:	b2d2      	uxtb	r2, r2
 8003d78:	4610      	mov	r0, r2
 8003d7a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8003d7c:	4b20      	ldr	r3, [pc, #128]	; (8003e00 <WIZCHIP_WRITE_BUF+0xbc>)
 8003d7e:	6a1b      	ldr	r3, [r3, #32]
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	0a12      	lsrs	r2, r2, #8
 8003d84:	b2d2      	uxtb	r2, r2
 8003d86:	4610      	mov	r0, r2
 8003d88:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8003d8a:	4b1d      	ldr	r3, [pc, #116]	; (8003e00 <WIZCHIP_WRITE_BUF+0xbc>)
 8003d8c:	6a1b      	ldr	r3, [r3, #32]
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	b2d2      	uxtb	r2, r2
 8003d92:	4610      	mov	r0, r2
 8003d94:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8003d96:	2300      	movs	r3, #0
 8003d98:	82fb      	strh	r3, [r7, #22]
 8003d9a:	e00a      	b.n	8003db2 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8003d9c:	4b18      	ldr	r3, [pc, #96]	; (8003e00 <WIZCHIP_WRITE_BUF+0xbc>)
 8003d9e:	6a1b      	ldr	r3, [r3, #32]
 8003da0:	8afa      	ldrh	r2, [r7, #22]
 8003da2:	68b9      	ldr	r1, [r7, #8]
 8003da4:	440a      	add	r2, r1
 8003da6:	7812      	ldrb	r2, [r2, #0]
 8003da8:	4610      	mov	r0, r2
 8003daa:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8003dac:	8afb      	ldrh	r3, [r7, #22]
 8003dae:	3301      	adds	r3, #1
 8003db0:	82fb      	strh	r3, [r7, #22]
 8003db2:	8afa      	ldrh	r2, [r7, #22]
 8003db4:	88fb      	ldrh	r3, [r7, #6]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d3f0      	bcc.n	8003d9c <WIZCHIP_WRITE_BUF+0x58>
 8003dba:	e017      	b.n	8003dec <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	0c1b      	lsrs	r3, r3, #16
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	0a1b      	lsrs	r3, r3, #8
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8003dd2:	4b0b      	ldr	r3, [pc, #44]	; (8003e00 <WIZCHIP_WRITE_BUF+0xbc>)
 8003dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd6:	f107 0210 	add.w	r2, r7, #16
 8003dda:	2103      	movs	r1, #3
 8003ddc:	4610      	mov	r0, r2
 8003dde:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8003de0:	4b07      	ldr	r3, [pc, #28]	; (8003e00 <WIZCHIP_WRITE_BUF+0xbc>)
 8003de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de4:	88fa      	ldrh	r2, [r7, #6]
 8003de6:	4611      	mov	r1, r2
 8003de8:	68b8      	ldr	r0, [r7, #8]
 8003dea:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8003dec:	4b04      	ldr	r3, [pc, #16]	; (8003e00 <WIZCHIP_WRITE_BUF+0xbc>)
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003df2:	4b03      	ldr	r3, [pc, #12]	; (8003e00 <WIZCHIP_WRITE_BUF+0xbc>)
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	4798      	blx	r3
}
 8003df8:	bf00      	nop
 8003dfa:	3718      	adds	r7, #24
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	2000000c 	.word	0x2000000c

08003e04 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8003e04:	b590      	push	{r4, r7, lr}
 8003e06:	b085      	sub	sp, #20
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	81fb      	strh	r3, [r7, #14]
 8003e12:	2300      	movs	r3, #0
 8003e14:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8003e16:	79fb      	ldrb	r3, [r7, #7]
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	00db      	lsls	r3, r3, #3
 8003e1e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7ff fe94 	bl	8003b50 <WIZCHIP_READ>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8003e2c:	89bb      	ldrh	r3, [r7, #12]
 8003e2e:	021b      	lsls	r3, r3, #8
 8003e30:	b29c      	uxth	r4, r3
 8003e32:	79fb      	ldrb	r3, [r7, #7]
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	3301      	adds	r3, #1
 8003e38:	00db      	lsls	r3, r3, #3
 8003e3a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7ff fe86 	bl	8003b50 <WIZCHIP_READ>
 8003e44:	4603      	mov	r3, r0
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	4423      	add	r3, r4
 8003e4a:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8003e4c:	89bb      	ldrh	r3, [r7, #12]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d01a      	beq.n	8003e88 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8003e52:	79fb      	ldrb	r3, [r7, #7]
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	3301      	adds	r3, #1
 8003e58:	00db      	lsls	r3, r3, #3
 8003e5a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7ff fe76 	bl	8003b50 <WIZCHIP_READ>
 8003e64:	4603      	mov	r3, r0
 8003e66:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8003e68:	89fb      	ldrh	r3, [r7, #14]
 8003e6a:	021b      	lsls	r3, r3, #8
 8003e6c:	b29c      	uxth	r4, r3
 8003e6e:	79fb      	ldrb	r3, [r7, #7]
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	3301      	adds	r3, #1
 8003e74:	00db      	lsls	r3, r3, #3
 8003e76:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7ff fe68 	bl	8003b50 <WIZCHIP_READ>
 8003e80:	4603      	mov	r3, r0
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	4423      	add	r3, r4
 8003e86:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8003e88:	89fa      	ldrh	r2, [r7, #14]
 8003e8a:	89bb      	ldrh	r3, [r7, #12]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d1c2      	bne.n	8003e16 <getSn_TX_FSR+0x12>
   return val;
 8003e90:	89fb      	ldrh	r3, [r7, #14]
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3714      	adds	r7, #20
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd90      	pop	{r4, r7, pc}

08003e9a <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8003e9a:	b590      	push	{r4, r7, lr}
 8003e9c:	b085      	sub	sp, #20
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	81fb      	strh	r3, [r7, #14]
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8003eac:	79fb      	ldrb	r3, [r7, #7]
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	00db      	lsls	r3, r3, #3
 8003eb4:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7ff fe49 	bl	8003b50 <WIZCHIP_READ>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8003ec2:	89bb      	ldrh	r3, [r7, #12]
 8003ec4:	021b      	lsls	r3, r3, #8
 8003ec6:	b29c      	uxth	r4, r3
 8003ec8:	79fb      	ldrb	r3, [r7, #7]
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	3301      	adds	r3, #1
 8003ece:	00db      	lsls	r3, r3, #3
 8003ed0:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7ff fe3b 	bl	8003b50 <WIZCHIP_READ>
 8003eda:	4603      	mov	r3, r0
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	4423      	add	r3, r4
 8003ee0:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8003ee2:	89bb      	ldrh	r3, [r7, #12]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d01a      	beq.n	8003f1e <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8003ee8:	79fb      	ldrb	r3, [r7, #7]
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	3301      	adds	r3, #1
 8003eee:	00db      	lsls	r3, r3, #3
 8003ef0:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f7ff fe2b 	bl	8003b50 <WIZCHIP_READ>
 8003efa:	4603      	mov	r3, r0
 8003efc:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8003efe:	89fb      	ldrh	r3, [r7, #14]
 8003f00:	021b      	lsls	r3, r3, #8
 8003f02:	b29c      	uxth	r4, r3
 8003f04:	79fb      	ldrb	r3, [r7, #7]
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	3301      	adds	r3, #1
 8003f0a:	00db      	lsls	r3, r3, #3
 8003f0c:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7ff fe1d 	bl	8003b50 <WIZCHIP_READ>
 8003f16:	4603      	mov	r3, r0
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	4423      	add	r3, r4
 8003f1c:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8003f1e:	89fa      	ldrh	r2, [r7, #14]
 8003f20:	89bb      	ldrh	r3, [r7, #12]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d1c2      	bne.n	8003eac <getSn_RX_RSR+0x12>
   return val;
 8003f26:	89fb      	ldrh	r3, [r7, #14]
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3714      	adds	r7, #20
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd90      	pop	{r4, r7, pc}

08003f30 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8003f30:	b590      	push	{r4, r7, lr}
 8003f32:	b085      	sub	sp, #20
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	4603      	mov	r3, r0
 8003f38:	6039      	str	r1, [r7, #0]
 8003f3a:	71fb      	strb	r3, [r7, #7]
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8003f40:	2300      	movs	r3, #0
 8003f42:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8003f44:	2300      	movs	r3, #0
 8003f46:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8003f48:	88bb      	ldrh	r3, [r7, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d048      	beq.n	8003fe0 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8003f4e:	79fb      	ldrb	r3, [r7, #7]
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	3301      	adds	r3, #1
 8003f54:	00db      	lsls	r3, r3, #3
 8003f56:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7ff fdf8 	bl	8003b50 <WIZCHIP_READ>
 8003f60:	4603      	mov	r3, r0
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	021b      	lsls	r3, r3, #8
 8003f66:	b29c      	uxth	r4, r3
 8003f68:	79fb      	ldrb	r3, [r7, #7]
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	00db      	lsls	r3, r3, #3
 8003f70:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7ff fdeb 	bl	8003b50 <WIZCHIP_READ>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	4423      	add	r3, r4
 8003f80:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8003f82:	89fb      	ldrh	r3, [r7, #14]
 8003f84:	021b      	lsls	r3, r3, #8
 8003f86:	79fa      	ldrb	r2, [r7, #7]
 8003f88:	0092      	lsls	r2, r2, #2
 8003f8a:	3202      	adds	r2, #2
 8003f8c:	00d2      	lsls	r2, r2, #3
 8003f8e:	4413      	add	r3, r2
 8003f90:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8003f92:	88bb      	ldrh	r3, [r7, #4]
 8003f94:	461a      	mov	r2, r3
 8003f96:	6839      	ldr	r1, [r7, #0]
 8003f98:	68b8      	ldr	r0, [r7, #8]
 8003f9a:	f7ff fed3 	bl	8003d44 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8003f9e:	89fa      	ldrh	r2, [r7, #14]
 8003fa0:	88bb      	ldrh	r3, [r7, #4]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8003fa6:	79fb      	ldrb	r3, [r7, #7]
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	3301      	adds	r3, #1
 8003fac:	00db      	lsls	r3, r3, #3
 8003fae:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	89fb      	ldrh	r3, [r7, #14]
 8003fb6:	0a1b      	lsrs	r3, r3, #8
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	4610      	mov	r0, r2
 8003fc0:	f7ff fe12 	bl	8003be8 <WIZCHIP_WRITE>
 8003fc4:	79fb      	ldrb	r3, [r7, #7]
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	3301      	adds	r3, #1
 8003fca:	00db      	lsls	r3, r3, #3
 8003fcc:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	89fb      	ldrh	r3, [r7, #14]
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	4610      	mov	r0, r2
 8003fda:	f7ff fe05 	bl	8003be8 <WIZCHIP_WRITE>
 8003fde:	e000      	b.n	8003fe2 <wiz_send_data+0xb2>
   if(len == 0)  return;
 8003fe0:	bf00      	nop
}
 8003fe2:	3714      	adds	r7, #20
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd90      	pop	{r4, r7, pc}

08003fe8 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8003fe8:	b590      	push	{r4, r7, lr}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	4603      	mov	r3, r0
 8003ff0:	6039      	str	r1, [r7, #0]
 8003ff2:	71fb      	strb	r3, [r7, #7]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8004000:	88bb      	ldrh	r3, [r7, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d048      	beq.n	8004098 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 8004006:	79fb      	ldrb	r3, [r7, #7]
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	3301      	adds	r3, #1
 800400c:	00db      	lsls	r3, r3, #3
 800400e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8004012:	4618      	mov	r0, r3
 8004014:	f7ff fd9c 	bl	8003b50 <WIZCHIP_READ>
 8004018:	4603      	mov	r3, r0
 800401a:	b29b      	uxth	r3, r3
 800401c:	021b      	lsls	r3, r3, #8
 800401e:	b29c      	uxth	r4, r3
 8004020:	79fb      	ldrb	r3, [r7, #7]
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	3301      	adds	r3, #1
 8004026:	00db      	lsls	r3, r3, #3
 8004028:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 800402c:	4618      	mov	r0, r3
 800402e:	f7ff fd8f 	bl	8003b50 <WIZCHIP_READ>
 8004032:	4603      	mov	r3, r0
 8004034:	b29b      	uxth	r3, r3
 8004036:	4423      	add	r3, r4
 8004038:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 800403a:	89fb      	ldrh	r3, [r7, #14]
 800403c:	021b      	lsls	r3, r3, #8
 800403e:	79fa      	ldrb	r2, [r7, #7]
 8004040:	0092      	lsls	r2, r2, #2
 8004042:	3203      	adds	r2, #3
 8004044:	00d2      	lsls	r2, r2, #3
 8004046:	4413      	add	r3, r2
 8004048:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 800404a:	88bb      	ldrh	r3, [r7, #4]
 800404c:	461a      	mov	r2, r3
 800404e:	6839      	ldr	r1, [r7, #0]
 8004050:	68b8      	ldr	r0, [r7, #8]
 8004052:	f7ff fe17 	bl	8003c84 <WIZCHIP_READ_BUF>
   ptr += len;
 8004056:	89fa      	ldrh	r2, [r7, #14]
 8004058:	88bb      	ldrh	r3, [r7, #4]
 800405a:	4413      	add	r3, r2
 800405c:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 800405e:	79fb      	ldrb	r3, [r7, #7]
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	3301      	adds	r3, #1
 8004064:	00db      	lsls	r3, r3, #3
 8004066:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800406a:	461a      	mov	r2, r3
 800406c:	89fb      	ldrh	r3, [r7, #14]
 800406e:	0a1b      	lsrs	r3, r3, #8
 8004070:	b29b      	uxth	r3, r3
 8004072:	b2db      	uxtb	r3, r3
 8004074:	4619      	mov	r1, r3
 8004076:	4610      	mov	r0, r2
 8004078:	f7ff fdb6 	bl	8003be8 <WIZCHIP_WRITE>
 800407c:	79fb      	ldrb	r3, [r7, #7]
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	3301      	adds	r3, #1
 8004082:	00db      	lsls	r3, r3, #3
 8004084:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8004088:	461a      	mov	r2, r3
 800408a:	89fb      	ldrh	r3, [r7, #14]
 800408c:	b2db      	uxtb	r3, r3
 800408e:	4619      	mov	r1, r3
 8004090:	4610      	mov	r0, r2
 8004092:	f7ff fda9 	bl	8003be8 <WIZCHIP_WRITE>
 8004096:	e000      	b.n	800409a <wiz_recv_data+0xb2>
   if(len == 0) return;
 8004098:	bf00      	nop
}
 800409a:	3714      	adds	r7, #20
 800409c:	46bd      	mov	sp, r7
 800409e:	bd90      	pop	{r4, r7, pc}

080040a0 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 80040a0:	b480      	push	{r7}
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	bf00      	nop
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr

080040ae <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 80040ae:	b480      	push	{r7}
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	bf00      	nop
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 80040bc:	b480      	push	{r7}
 80040be:	af00      	add	r7, sp, #0
 80040c0:	bf00      	nop
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr

080040ca <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 80040ca:	b480      	push	{r7}
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	bf00      	nop
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	4618      	mov	r0, r3
 80040e8:	370c      	adds	r7, #12
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr

080040f2 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 80040f2:	b480      	push	{r7}
 80040f4:	b083      	sub	sp, #12
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
 80040fa:	460b      	mov	r3, r1
 80040fc:	70fb      	strb	r3, [r7, #3]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	78fa      	ldrb	r2, [r7, #3]
 8004102:	701a      	strb	r2, [r3, #0]
 8004104:	bf00      	nop
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8004110:	b480      	push	{r7}
 8004112:	af00      	add	r7, sp, #0
 8004114:	2300      	movs	r3, #0
 8004116:	4618      	mov	r0, r3
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	4603      	mov	r3, r0
 8004128:	71fb      	strb	r3, [r7, #7]
 800412a:	bf00      	nop
 800412c:	370c      	adds	r7, #12
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr
	...

08004138 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d002      	beq.n	800414e <reg_wizchip_cs_cbfunc+0x16>
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d106      	bne.n	800415c <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 800414e:	4b0a      	ldr	r3, [pc, #40]	; (8004178 <reg_wizchip_cs_cbfunc+0x40>)
 8004150:	4a0a      	ldr	r2, [pc, #40]	; (800417c <reg_wizchip_cs_cbfunc+0x44>)
 8004152:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8004154:	4b08      	ldr	r3, [pc, #32]	; (8004178 <reg_wizchip_cs_cbfunc+0x40>)
 8004156:	4a0a      	ldr	r2, [pc, #40]	; (8004180 <reg_wizchip_cs_cbfunc+0x48>)
 8004158:	619a      	str	r2, [r3, #24]
 800415a:	e006      	b.n	800416a <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 800415c:	4a06      	ldr	r2, [pc, #24]	; (8004178 <reg_wizchip_cs_cbfunc+0x40>)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8004162:	4a05      	ldr	r2, [pc, #20]	; (8004178 <reg_wizchip_cs_cbfunc+0x40>)
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	6193      	str	r3, [r2, #24]
   }
}
 8004168:	bf00      	nop
 800416a:	bf00      	nop
 800416c:	370c      	adds	r7, #12
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	2000000c 	.word	0x2000000c
 800417c:	080040bd 	.word	0x080040bd
 8004180:	080040cb 	.word	0x080040cb

08004184 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800418e:	bf00      	nop
 8004190:	4b0f      	ldr	r3, [pc, #60]	; (80041d0 <reg_wizchip_spi_cbfunc+0x4c>)
 8004192:	881b      	ldrh	r3, [r3, #0]
 8004194:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004198:	2b00      	cmp	r3, #0
 800419a:	d0f9      	beq.n	8004190 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d002      	beq.n	80041a8 <reg_wizchip_spi_cbfunc+0x24>
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d106      	bne.n	80041b6 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 80041a8:	4b09      	ldr	r3, [pc, #36]	; (80041d0 <reg_wizchip_spi_cbfunc+0x4c>)
 80041aa:	4a0a      	ldr	r2, [pc, #40]	; (80041d4 <reg_wizchip_spi_cbfunc+0x50>)
 80041ac:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 80041ae:	4b08      	ldr	r3, [pc, #32]	; (80041d0 <reg_wizchip_spi_cbfunc+0x4c>)
 80041b0:	4a09      	ldr	r2, [pc, #36]	; (80041d8 <reg_wizchip_spi_cbfunc+0x54>)
 80041b2:	621a      	str	r2, [r3, #32]
 80041b4:	e006      	b.n	80041c4 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 80041b6:	4a06      	ldr	r2, [pc, #24]	; (80041d0 <reg_wizchip_spi_cbfunc+0x4c>)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 80041bc:	4a04      	ldr	r2, [pc, #16]	; (80041d0 <reg_wizchip_spi_cbfunc+0x4c>)
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	6213      	str	r3, [r2, #32]
   }
}
 80041c2:	bf00      	nop
 80041c4:	bf00      	nop
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr
 80041d0:	2000000c 	.word	0x2000000c
 80041d4:	08004111 	.word	0x08004111
 80041d8:	08004121 	.word	0x08004121

080041dc <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b086      	sub	sp, #24
 80041e0:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 80041e2:	1d3b      	adds	r3, r7, #4
 80041e4:	2206      	movs	r2, #6
 80041e6:	4619      	mov	r1, r3
 80041e8:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80041ec:	f7ff fd4a 	bl	8003c84 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 80041f0:	f107 0314 	add.w	r3, r7, #20
 80041f4:	2204      	movs	r2, #4
 80041f6:	4619      	mov	r1, r3
 80041f8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80041fc:	f7ff fd42 	bl	8003c84 <WIZCHIP_READ_BUF>
 8004200:	f107 0310 	add.w	r3, r7, #16
 8004204:	2204      	movs	r2, #4
 8004206:	4619      	mov	r1, r3
 8004208:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800420c:	f7ff fd3a 	bl	8003c84 <WIZCHIP_READ_BUF>
 8004210:	f107 030c 	add.w	r3, r7, #12
 8004214:	2204      	movs	r2, #4
 8004216:	4619      	mov	r1, r3
 8004218:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800421c:	f7ff fd32 	bl	8003c84 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8004220:	2180      	movs	r1, #128	; 0x80
 8004222:	2000      	movs	r0, #0
 8004224:	f7ff fce0 	bl	8003be8 <WIZCHIP_WRITE>
   getMR(); // for delay
 8004228:	2000      	movs	r0, #0
 800422a:	f7ff fc91 	bl	8003b50 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 800422e:	1d3b      	adds	r3, r7, #4
 8004230:	2206      	movs	r2, #6
 8004232:	4619      	mov	r1, r3
 8004234:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8004238:	f7ff fd84 	bl	8003d44 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 800423c:	f107 0314 	add.w	r3, r7, #20
 8004240:	2204      	movs	r2, #4
 8004242:	4619      	mov	r1, r3
 8004244:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004248:	f7ff fd7c 	bl	8003d44 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 800424c:	f107 0310 	add.w	r3, r7, #16
 8004250:	2204      	movs	r2, #4
 8004252:	4619      	mov	r1, r3
 8004254:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8004258:	f7ff fd74 	bl	8003d44 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 800425c:	f107 030c 	add.w	r3, r7, #12
 8004260:	2204      	movs	r2, #4
 8004262:	4619      	mov	r1, r3
 8004264:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8004268:	f7ff fd6c 	bl	8003d44 <WIZCHIP_WRITE_BUF>
}
 800426c:	bf00      	nop
 800426e:	3718      	adds	r7, #24
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 800427e:	2300      	movs	r3, #0
 8004280:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8004282:	f7ff ffab 	bl	80041dc <wizchip_sw_reset>
   if(txsize)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d03b      	beq.n	8004304 <wizchip_init+0x90>
   {
      tmp = 0;
 800428c:	2300      	movs	r3, #0
 800428e:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004290:	2300      	movs	r3, #0
 8004292:	73fb      	strb	r3, [r7, #15]
 8004294:	e015      	b.n	80042c2 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8004296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	4413      	add	r3, r2
 800429e:	781a      	ldrb	r2, [r3, #0]
 80042a0:	7bbb      	ldrb	r3, [r7, #14]
 80042a2:	4413      	add	r3, r2
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 80042a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80042ac:	2b10      	cmp	r3, #16
 80042ae:	dd02      	ble.n	80042b6 <wizchip_init+0x42>
 80042b0:	f04f 33ff 	mov.w	r3, #4294967295
 80042b4:	e066      	b.n	8004384 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80042b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	3301      	adds	r3, #1
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	73fb      	strb	r3, [r7, #15]
 80042c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042c6:	2b07      	cmp	r3, #7
 80042c8:	dde5      	ble.n	8004296 <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80042ca:	2300      	movs	r3, #0
 80042cc:	73fb      	strb	r3, [r7, #15]
 80042ce:	e015      	b.n	80042fc <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 80042d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	3301      	adds	r3, #1
 80042d8:	00db      	lsls	r3, r3, #3
 80042da:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80042de:	4618      	mov	r0, r3
 80042e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	4413      	add	r3, r2
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	4619      	mov	r1, r3
 80042ec:	f7ff fc7c 	bl	8003be8 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80042f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	3301      	adds	r3, #1
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	73fb      	strb	r3, [r7, #15]
 80042fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004300:	2b07      	cmp	r3, #7
 8004302:	dde5      	ble.n	80042d0 <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d03b      	beq.n	8004382 <wizchip_init+0x10e>
   {
      tmp = 0;
 800430a:	2300      	movs	r3, #0
 800430c:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800430e:	2300      	movs	r3, #0
 8004310:	73fb      	strb	r3, [r7, #15]
 8004312:	e015      	b.n	8004340 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8004314:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004318:	683a      	ldr	r2, [r7, #0]
 800431a:	4413      	add	r3, r2
 800431c:	781a      	ldrb	r2, [r3, #0]
 800431e:	7bbb      	ldrb	r3, [r7, #14]
 8004320:	4413      	add	r3, r2
 8004322:	b2db      	uxtb	r3, r3
 8004324:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8004326:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800432a:	2b10      	cmp	r3, #16
 800432c:	dd02      	ble.n	8004334 <wizchip_init+0xc0>
 800432e:	f04f 33ff 	mov.w	r3, #4294967295
 8004332:	e027      	b.n	8004384 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004334:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004338:	b2db      	uxtb	r3, r3
 800433a:	3301      	adds	r3, #1
 800433c:	b2db      	uxtb	r3, r3
 800433e:	73fb      	strb	r3, [r7, #15]
 8004340:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004344:	2b07      	cmp	r3, #7
 8004346:	dde5      	ble.n	8004314 <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004348:	2300      	movs	r3, #0
 800434a:	73fb      	strb	r3, [r7, #15]
 800434c:	e015      	b.n	800437a <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 800434e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	3301      	adds	r3, #1
 8004356:	00db      	lsls	r3, r3, #3
 8004358:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800435c:	4618      	mov	r0, r3
 800435e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004362:	683a      	ldr	r2, [r7, #0]
 8004364:	4413      	add	r3, r2
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	4619      	mov	r1, r3
 800436a:	f7ff fc3d 	bl	8003be8 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800436e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004372:	b2db      	uxtb	r3, r3
 8004374:	3301      	adds	r3, #1
 8004376:	b2db      	uxtb	r3, r3
 8004378:	73fb      	strb	r3, [r7, #15]
 800437a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800437e:	2b07      	cmp	r3, #7
 8004380:	dde5      	ble.n	800434e <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 8004382:	2300      	movs	r3, #0
}
 8004384:	4618      	mov	r0, r3
 8004386:	3710      	adds	r7, #16
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2206      	movs	r2, #6
 8004398:	4619      	mov	r1, r3
 800439a:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800439e:	f7ff fcd1 	bl	8003d44 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	330e      	adds	r3, #14
 80043a6:	2204      	movs	r2, #4
 80043a8:	4619      	mov	r1, r3
 80043aa:	f44f 7080 	mov.w	r0, #256	; 0x100
 80043ae:	f7ff fcc9 	bl	8003d44 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	330a      	adds	r3, #10
 80043b6:	2204      	movs	r2, #4
 80043b8:	4619      	mov	r1, r3
 80043ba:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80043be:	f7ff fcc1 	bl	8003d44 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	3306      	adds	r3, #6
 80043c6:	2204      	movs	r2, #4
 80043c8:	4619      	mov	r1, r3
 80043ca:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80043ce:	f7ff fcb9 	bl	8003d44 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	7c9a      	ldrb	r2, [r3, #18]
 80043d6:	4b0b      	ldr	r3, [pc, #44]	; (8004404 <wizchip_setnetinfo+0x78>)
 80043d8:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	7cda      	ldrb	r2, [r3, #19]
 80043de:	4b09      	ldr	r3, [pc, #36]	; (8004404 <wizchip_setnetinfo+0x78>)
 80043e0:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	7d1a      	ldrb	r2, [r3, #20]
 80043e6:	4b07      	ldr	r3, [pc, #28]	; (8004404 <wizchip_setnetinfo+0x78>)
 80043e8:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	7d5a      	ldrb	r2, [r3, #21]
 80043ee:	4b05      	ldr	r3, [pc, #20]	; (8004404 <wizchip_setnetinfo+0x78>)
 80043f0:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	7d9a      	ldrb	r2, [r3, #22]
 80043f6:	4b04      	ldr	r3, [pc, #16]	; (8004408 <wizchip_setnetinfo+0x7c>)
 80043f8:	701a      	strb	r2, [r3, #0]
}
 80043fa:	bf00      	nop
 80043fc:	3708      	adds	r7, #8
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	200001a0 	.word	0x200001a0
 8004408:	200001a4 	.word	0x200001a4

0800440c <__errno>:
 800440c:	4b01      	ldr	r3, [pc, #4]	; (8004414 <__errno+0x8>)
 800440e:	6818      	ldr	r0, [r3, #0]
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	20000038 	.word	0x20000038

08004418 <__libc_init_array>:
 8004418:	b570      	push	{r4, r5, r6, lr}
 800441a:	4d0d      	ldr	r5, [pc, #52]	; (8004450 <__libc_init_array+0x38>)
 800441c:	4c0d      	ldr	r4, [pc, #52]	; (8004454 <__libc_init_array+0x3c>)
 800441e:	1b64      	subs	r4, r4, r5
 8004420:	10a4      	asrs	r4, r4, #2
 8004422:	2600      	movs	r6, #0
 8004424:	42a6      	cmp	r6, r4
 8004426:	d109      	bne.n	800443c <__libc_init_array+0x24>
 8004428:	4d0b      	ldr	r5, [pc, #44]	; (8004458 <__libc_init_array+0x40>)
 800442a:	4c0c      	ldr	r4, [pc, #48]	; (800445c <__libc_init_array+0x44>)
 800442c:	f000 fc8e 	bl	8004d4c <_init>
 8004430:	1b64      	subs	r4, r4, r5
 8004432:	10a4      	asrs	r4, r4, #2
 8004434:	2600      	movs	r6, #0
 8004436:	42a6      	cmp	r6, r4
 8004438:	d105      	bne.n	8004446 <__libc_init_array+0x2e>
 800443a:	bd70      	pop	{r4, r5, r6, pc}
 800443c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004440:	4798      	blx	r3
 8004442:	3601      	adds	r6, #1
 8004444:	e7ee      	b.n	8004424 <__libc_init_array+0xc>
 8004446:	f855 3b04 	ldr.w	r3, [r5], #4
 800444a:	4798      	blx	r3
 800444c:	3601      	adds	r6, #1
 800444e:	e7f2      	b.n	8004436 <__libc_init_array+0x1e>
 8004450:	08004e74 	.word	0x08004e74
 8004454:	08004e74 	.word	0x08004e74
 8004458:	08004e74 	.word	0x08004e74
 800445c:	08004e78 	.word	0x08004e78

08004460 <memset>:
 8004460:	4402      	add	r2, r0
 8004462:	4603      	mov	r3, r0
 8004464:	4293      	cmp	r3, r2
 8004466:	d100      	bne.n	800446a <memset+0xa>
 8004468:	4770      	bx	lr
 800446a:	f803 1b01 	strb.w	r1, [r3], #1
 800446e:	e7f9      	b.n	8004464 <memset+0x4>

08004470 <siprintf>:
 8004470:	b40e      	push	{r1, r2, r3}
 8004472:	b500      	push	{lr}
 8004474:	b09c      	sub	sp, #112	; 0x70
 8004476:	ab1d      	add	r3, sp, #116	; 0x74
 8004478:	9002      	str	r0, [sp, #8]
 800447a:	9006      	str	r0, [sp, #24]
 800447c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004480:	4809      	ldr	r0, [pc, #36]	; (80044a8 <siprintf+0x38>)
 8004482:	9107      	str	r1, [sp, #28]
 8004484:	9104      	str	r1, [sp, #16]
 8004486:	4909      	ldr	r1, [pc, #36]	; (80044ac <siprintf+0x3c>)
 8004488:	f853 2b04 	ldr.w	r2, [r3], #4
 800448c:	9105      	str	r1, [sp, #20]
 800448e:	6800      	ldr	r0, [r0, #0]
 8004490:	9301      	str	r3, [sp, #4]
 8004492:	a902      	add	r1, sp, #8
 8004494:	f000 f8fe 	bl	8004694 <_svfiprintf_r>
 8004498:	9b02      	ldr	r3, [sp, #8]
 800449a:	2200      	movs	r2, #0
 800449c:	701a      	strb	r2, [r3, #0]
 800449e:	b01c      	add	sp, #112	; 0x70
 80044a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80044a4:	b003      	add	sp, #12
 80044a6:	4770      	bx	lr
 80044a8:	20000038 	.word	0x20000038
 80044ac:	ffff0208 	.word	0xffff0208

080044b0 <__retarget_lock_acquire_recursive>:
 80044b0:	4770      	bx	lr

080044b2 <__retarget_lock_release_recursive>:
 80044b2:	4770      	bx	lr

080044b4 <sbrk_aligned>:
 80044b4:	b570      	push	{r4, r5, r6, lr}
 80044b6:	4e0e      	ldr	r6, [pc, #56]	; (80044f0 <sbrk_aligned+0x3c>)
 80044b8:	460c      	mov	r4, r1
 80044ba:	6831      	ldr	r1, [r6, #0]
 80044bc:	4605      	mov	r5, r0
 80044be:	b911      	cbnz	r1, 80044c6 <sbrk_aligned+0x12>
 80044c0:	f000 fb7c 	bl	8004bbc <_sbrk_r>
 80044c4:	6030      	str	r0, [r6, #0]
 80044c6:	4621      	mov	r1, r4
 80044c8:	4628      	mov	r0, r5
 80044ca:	f000 fb77 	bl	8004bbc <_sbrk_r>
 80044ce:	1c43      	adds	r3, r0, #1
 80044d0:	d00a      	beq.n	80044e8 <sbrk_aligned+0x34>
 80044d2:	1cc4      	adds	r4, r0, #3
 80044d4:	f024 0403 	bic.w	r4, r4, #3
 80044d8:	42a0      	cmp	r0, r4
 80044da:	d007      	beq.n	80044ec <sbrk_aligned+0x38>
 80044dc:	1a21      	subs	r1, r4, r0
 80044de:	4628      	mov	r0, r5
 80044e0:	f000 fb6c 	bl	8004bbc <_sbrk_r>
 80044e4:	3001      	adds	r0, #1
 80044e6:	d101      	bne.n	80044ec <sbrk_aligned+0x38>
 80044e8:	f04f 34ff 	mov.w	r4, #4294967295
 80044ec:	4620      	mov	r0, r4
 80044ee:	bd70      	pop	{r4, r5, r6, pc}
 80044f0:	200001ac 	.word	0x200001ac

080044f4 <_malloc_r>:
 80044f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044f8:	1ccd      	adds	r5, r1, #3
 80044fa:	f025 0503 	bic.w	r5, r5, #3
 80044fe:	3508      	adds	r5, #8
 8004500:	2d0c      	cmp	r5, #12
 8004502:	bf38      	it	cc
 8004504:	250c      	movcc	r5, #12
 8004506:	2d00      	cmp	r5, #0
 8004508:	4607      	mov	r7, r0
 800450a:	db01      	blt.n	8004510 <_malloc_r+0x1c>
 800450c:	42a9      	cmp	r1, r5
 800450e:	d905      	bls.n	800451c <_malloc_r+0x28>
 8004510:	230c      	movs	r3, #12
 8004512:	603b      	str	r3, [r7, #0]
 8004514:	2600      	movs	r6, #0
 8004516:	4630      	mov	r0, r6
 8004518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800451c:	4e2e      	ldr	r6, [pc, #184]	; (80045d8 <_malloc_r+0xe4>)
 800451e:	f000 fb85 	bl	8004c2c <__malloc_lock>
 8004522:	6833      	ldr	r3, [r6, #0]
 8004524:	461c      	mov	r4, r3
 8004526:	bb34      	cbnz	r4, 8004576 <_malloc_r+0x82>
 8004528:	4629      	mov	r1, r5
 800452a:	4638      	mov	r0, r7
 800452c:	f7ff ffc2 	bl	80044b4 <sbrk_aligned>
 8004530:	1c43      	adds	r3, r0, #1
 8004532:	4604      	mov	r4, r0
 8004534:	d14d      	bne.n	80045d2 <_malloc_r+0xde>
 8004536:	6834      	ldr	r4, [r6, #0]
 8004538:	4626      	mov	r6, r4
 800453a:	2e00      	cmp	r6, #0
 800453c:	d140      	bne.n	80045c0 <_malloc_r+0xcc>
 800453e:	6823      	ldr	r3, [r4, #0]
 8004540:	4631      	mov	r1, r6
 8004542:	4638      	mov	r0, r7
 8004544:	eb04 0803 	add.w	r8, r4, r3
 8004548:	f000 fb38 	bl	8004bbc <_sbrk_r>
 800454c:	4580      	cmp	r8, r0
 800454e:	d13a      	bne.n	80045c6 <_malloc_r+0xd2>
 8004550:	6821      	ldr	r1, [r4, #0]
 8004552:	3503      	adds	r5, #3
 8004554:	1a6d      	subs	r5, r5, r1
 8004556:	f025 0503 	bic.w	r5, r5, #3
 800455a:	3508      	adds	r5, #8
 800455c:	2d0c      	cmp	r5, #12
 800455e:	bf38      	it	cc
 8004560:	250c      	movcc	r5, #12
 8004562:	4629      	mov	r1, r5
 8004564:	4638      	mov	r0, r7
 8004566:	f7ff ffa5 	bl	80044b4 <sbrk_aligned>
 800456a:	3001      	adds	r0, #1
 800456c:	d02b      	beq.n	80045c6 <_malloc_r+0xd2>
 800456e:	6823      	ldr	r3, [r4, #0]
 8004570:	442b      	add	r3, r5
 8004572:	6023      	str	r3, [r4, #0]
 8004574:	e00e      	b.n	8004594 <_malloc_r+0xa0>
 8004576:	6822      	ldr	r2, [r4, #0]
 8004578:	1b52      	subs	r2, r2, r5
 800457a:	d41e      	bmi.n	80045ba <_malloc_r+0xc6>
 800457c:	2a0b      	cmp	r2, #11
 800457e:	d916      	bls.n	80045ae <_malloc_r+0xba>
 8004580:	1961      	adds	r1, r4, r5
 8004582:	42a3      	cmp	r3, r4
 8004584:	6025      	str	r5, [r4, #0]
 8004586:	bf18      	it	ne
 8004588:	6059      	strne	r1, [r3, #4]
 800458a:	6863      	ldr	r3, [r4, #4]
 800458c:	bf08      	it	eq
 800458e:	6031      	streq	r1, [r6, #0]
 8004590:	5162      	str	r2, [r4, r5]
 8004592:	604b      	str	r3, [r1, #4]
 8004594:	4638      	mov	r0, r7
 8004596:	f104 060b 	add.w	r6, r4, #11
 800459a:	f000 fb4d 	bl	8004c38 <__malloc_unlock>
 800459e:	f026 0607 	bic.w	r6, r6, #7
 80045a2:	1d23      	adds	r3, r4, #4
 80045a4:	1af2      	subs	r2, r6, r3
 80045a6:	d0b6      	beq.n	8004516 <_malloc_r+0x22>
 80045a8:	1b9b      	subs	r3, r3, r6
 80045aa:	50a3      	str	r3, [r4, r2]
 80045ac:	e7b3      	b.n	8004516 <_malloc_r+0x22>
 80045ae:	6862      	ldr	r2, [r4, #4]
 80045b0:	42a3      	cmp	r3, r4
 80045b2:	bf0c      	ite	eq
 80045b4:	6032      	streq	r2, [r6, #0]
 80045b6:	605a      	strne	r2, [r3, #4]
 80045b8:	e7ec      	b.n	8004594 <_malloc_r+0xa0>
 80045ba:	4623      	mov	r3, r4
 80045bc:	6864      	ldr	r4, [r4, #4]
 80045be:	e7b2      	b.n	8004526 <_malloc_r+0x32>
 80045c0:	4634      	mov	r4, r6
 80045c2:	6876      	ldr	r6, [r6, #4]
 80045c4:	e7b9      	b.n	800453a <_malloc_r+0x46>
 80045c6:	230c      	movs	r3, #12
 80045c8:	603b      	str	r3, [r7, #0]
 80045ca:	4638      	mov	r0, r7
 80045cc:	f000 fb34 	bl	8004c38 <__malloc_unlock>
 80045d0:	e7a1      	b.n	8004516 <_malloc_r+0x22>
 80045d2:	6025      	str	r5, [r4, #0]
 80045d4:	e7de      	b.n	8004594 <_malloc_r+0xa0>
 80045d6:	bf00      	nop
 80045d8:	200001a8 	.word	0x200001a8

080045dc <__ssputs_r>:
 80045dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045e0:	688e      	ldr	r6, [r1, #8]
 80045e2:	429e      	cmp	r6, r3
 80045e4:	4682      	mov	sl, r0
 80045e6:	460c      	mov	r4, r1
 80045e8:	4690      	mov	r8, r2
 80045ea:	461f      	mov	r7, r3
 80045ec:	d838      	bhi.n	8004660 <__ssputs_r+0x84>
 80045ee:	898a      	ldrh	r2, [r1, #12]
 80045f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80045f4:	d032      	beq.n	800465c <__ssputs_r+0x80>
 80045f6:	6825      	ldr	r5, [r4, #0]
 80045f8:	6909      	ldr	r1, [r1, #16]
 80045fa:	eba5 0901 	sub.w	r9, r5, r1
 80045fe:	6965      	ldr	r5, [r4, #20]
 8004600:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004604:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004608:	3301      	adds	r3, #1
 800460a:	444b      	add	r3, r9
 800460c:	106d      	asrs	r5, r5, #1
 800460e:	429d      	cmp	r5, r3
 8004610:	bf38      	it	cc
 8004612:	461d      	movcc	r5, r3
 8004614:	0553      	lsls	r3, r2, #21
 8004616:	d531      	bpl.n	800467c <__ssputs_r+0xa0>
 8004618:	4629      	mov	r1, r5
 800461a:	f7ff ff6b 	bl	80044f4 <_malloc_r>
 800461e:	4606      	mov	r6, r0
 8004620:	b950      	cbnz	r0, 8004638 <__ssputs_r+0x5c>
 8004622:	230c      	movs	r3, #12
 8004624:	f8ca 3000 	str.w	r3, [sl]
 8004628:	89a3      	ldrh	r3, [r4, #12]
 800462a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800462e:	81a3      	strh	r3, [r4, #12]
 8004630:	f04f 30ff 	mov.w	r0, #4294967295
 8004634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004638:	6921      	ldr	r1, [r4, #16]
 800463a:	464a      	mov	r2, r9
 800463c:	f000 face 	bl	8004bdc <memcpy>
 8004640:	89a3      	ldrh	r3, [r4, #12]
 8004642:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004646:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800464a:	81a3      	strh	r3, [r4, #12]
 800464c:	6126      	str	r6, [r4, #16]
 800464e:	6165      	str	r5, [r4, #20]
 8004650:	444e      	add	r6, r9
 8004652:	eba5 0509 	sub.w	r5, r5, r9
 8004656:	6026      	str	r6, [r4, #0]
 8004658:	60a5      	str	r5, [r4, #8]
 800465a:	463e      	mov	r6, r7
 800465c:	42be      	cmp	r6, r7
 800465e:	d900      	bls.n	8004662 <__ssputs_r+0x86>
 8004660:	463e      	mov	r6, r7
 8004662:	6820      	ldr	r0, [r4, #0]
 8004664:	4632      	mov	r2, r6
 8004666:	4641      	mov	r1, r8
 8004668:	f000 fac6 	bl	8004bf8 <memmove>
 800466c:	68a3      	ldr	r3, [r4, #8]
 800466e:	1b9b      	subs	r3, r3, r6
 8004670:	60a3      	str	r3, [r4, #8]
 8004672:	6823      	ldr	r3, [r4, #0]
 8004674:	4433      	add	r3, r6
 8004676:	6023      	str	r3, [r4, #0]
 8004678:	2000      	movs	r0, #0
 800467a:	e7db      	b.n	8004634 <__ssputs_r+0x58>
 800467c:	462a      	mov	r2, r5
 800467e:	f000 fb2d 	bl	8004cdc <_realloc_r>
 8004682:	4606      	mov	r6, r0
 8004684:	2800      	cmp	r0, #0
 8004686:	d1e1      	bne.n	800464c <__ssputs_r+0x70>
 8004688:	6921      	ldr	r1, [r4, #16]
 800468a:	4650      	mov	r0, sl
 800468c:	f000 fada 	bl	8004c44 <_free_r>
 8004690:	e7c7      	b.n	8004622 <__ssputs_r+0x46>
	...

08004694 <_svfiprintf_r>:
 8004694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004698:	4698      	mov	r8, r3
 800469a:	898b      	ldrh	r3, [r1, #12]
 800469c:	061b      	lsls	r3, r3, #24
 800469e:	b09d      	sub	sp, #116	; 0x74
 80046a0:	4607      	mov	r7, r0
 80046a2:	460d      	mov	r5, r1
 80046a4:	4614      	mov	r4, r2
 80046a6:	d50e      	bpl.n	80046c6 <_svfiprintf_r+0x32>
 80046a8:	690b      	ldr	r3, [r1, #16]
 80046aa:	b963      	cbnz	r3, 80046c6 <_svfiprintf_r+0x32>
 80046ac:	2140      	movs	r1, #64	; 0x40
 80046ae:	f7ff ff21 	bl	80044f4 <_malloc_r>
 80046b2:	6028      	str	r0, [r5, #0]
 80046b4:	6128      	str	r0, [r5, #16]
 80046b6:	b920      	cbnz	r0, 80046c2 <_svfiprintf_r+0x2e>
 80046b8:	230c      	movs	r3, #12
 80046ba:	603b      	str	r3, [r7, #0]
 80046bc:	f04f 30ff 	mov.w	r0, #4294967295
 80046c0:	e0d1      	b.n	8004866 <_svfiprintf_r+0x1d2>
 80046c2:	2340      	movs	r3, #64	; 0x40
 80046c4:	616b      	str	r3, [r5, #20]
 80046c6:	2300      	movs	r3, #0
 80046c8:	9309      	str	r3, [sp, #36]	; 0x24
 80046ca:	2320      	movs	r3, #32
 80046cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80046d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80046d4:	2330      	movs	r3, #48	; 0x30
 80046d6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004880 <_svfiprintf_r+0x1ec>
 80046da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80046de:	f04f 0901 	mov.w	r9, #1
 80046e2:	4623      	mov	r3, r4
 80046e4:	469a      	mov	sl, r3
 80046e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80046ea:	b10a      	cbz	r2, 80046f0 <_svfiprintf_r+0x5c>
 80046ec:	2a25      	cmp	r2, #37	; 0x25
 80046ee:	d1f9      	bne.n	80046e4 <_svfiprintf_r+0x50>
 80046f0:	ebba 0b04 	subs.w	fp, sl, r4
 80046f4:	d00b      	beq.n	800470e <_svfiprintf_r+0x7a>
 80046f6:	465b      	mov	r3, fp
 80046f8:	4622      	mov	r2, r4
 80046fa:	4629      	mov	r1, r5
 80046fc:	4638      	mov	r0, r7
 80046fe:	f7ff ff6d 	bl	80045dc <__ssputs_r>
 8004702:	3001      	adds	r0, #1
 8004704:	f000 80aa 	beq.w	800485c <_svfiprintf_r+0x1c8>
 8004708:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800470a:	445a      	add	r2, fp
 800470c:	9209      	str	r2, [sp, #36]	; 0x24
 800470e:	f89a 3000 	ldrb.w	r3, [sl]
 8004712:	2b00      	cmp	r3, #0
 8004714:	f000 80a2 	beq.w	800485c <_svfiprintf_r+0x1c8>
 8004718:	2300      	movs	r3, #0
 800471a:	f04f 32ff 	mov.w	r2, #4294967295
 800471e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004722:	f10a 0a01 	add.w	sl, sl, #1
 8004726:	9304      	str	r3, [sp, #16]
 8004728:	9307      	str	r3, [sp, #28]
 800472a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800472e:	931a      	str	r3, [sp, #104]	; 0x68
 8004730:	4654      	mov	r4, sl
 8004732:	2205      	movs	r2, #5
 8004734:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004738:	4851      	ldr	r0, [pc, #324]	; (8004880 <_svfiprintf_r+0x1ec>)
 800473a:	f7fb fd51 	bl	80001e0 <memchr>
 800473e:	9a04      	ldr	r2, [sp, #16]
 8004740:	b9d8      	cbnz	r0, 800477a <_svfiprintf_r+0xe6>
 8004742:	06d0      	lsls	r0, r2, #27
 8004744:	bf44      	itt	mi
 8004746:	2320      	movmi	r3, #32
 8004748:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800474c:	0711      	lsls	r1, r2, #28
 800474e:	bf44      	itt	mi
 8004750:	232b      	movmi	r3, #43	; 0x2b
 8004752:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004756:	f89a 3000 	ldrb.w	r3, [sl]
 800475a:	2b2a      	cmp	r3, #42	; 0x2a
 800475c:	d015      	beq.n	800478a <_svfiprintf_r+0xf6>
 800475e:	9a07      	ldr	r2, [sp, #28]
 8004760:	4654      	mov	r4, sl
 8004762:	2000      	movs	r0, #0
 8004764:	f04f 0c0a 	mov.w	ip, #10
 8004768:	4621      	mov	r1, r4
 800476a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800476e:	3b30      	subs	r3, #48	; 0x30
 8004770:	2b09      	cmp	r3, #9
 8004772:	d94e      	bls.n	8004812 <_svfiprintf_r+0x17e>
 8004774:	b1b0      	cbz	r0, 80047a4 <_svfiprintf_r+0x110>
 8004776:	9207      	str	r2, [sp, #28]
 8004778:	e014      	b.n	80047a4 <_svfiprintf_r+0x110>
 800477a:	eba0 0308 	sub.w	r3, r0, r8
 800477e:	fa09 f303 	lsl.w	r3, r9, r3
 8004782:	4313      	orrs	r3, r2
 8004784:	9304      	str	r3, [sp, #16]
 8004786:	46a2      	mov	sl, r4
 8004788:	e7d2      	b.n	8004730 <_svfiprintf_r+0x9c>
 800478a:	9b03      	ldr	r3, [sp, #12]
 800478c:	1d19      	adds	r1, r3, #4
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	9103      	str	r1, [sp, #12]
 8004792:	2b00      	cmp	r3, #0
 8004794:	bfbb      	ittet	lt
 8004796:	425b      	neglt	r3, r3
 8004798:	f042 0202 	orrlt.w	r2, r2, #2
 800479c:	9307      	strge	r3, [sp, #28]
 800479e:	9307      	strlt	r3, [sp, #28]
 80047a0:	bfb8      	it	lt
 80047a2:	9204      	strlt	r2, [sp, #16]
 80047a4:	7823      	ldrb	r3, [r4, #0]
 80047a6:	2b2e      	cmp	r3, #46	; 0x2e
 80047a8:	d10c      	bne.n	80047c4 <_svfiprintf_r+0x130>
 80047aa:	7863      	ldrb	r3, [r4, #1]
 80047ac:	2b2a      	cmp	r3, #42	; 0x2a
 80047ae:	d135      	bne.n	800481c <_svfiprintf_r+0x188>
 80047b0:	9b03      	ldr	r3, [sp, #12]
 80047b2:	1d1a      	adds	r2, r3, #4
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	9203      	str	r2, [sp, #12]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	bfb8      	it	lt
 80047bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80047c0:	3402      	adds	r4, #2
 80047c2:	9305      	str	r3, [sp, #20]
 80047c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004890 <_svfiprintf_r+0x1fc>
 80047c8:	7821      	ldrb	r1, [r4, #0]
 80047ca:	2203      	movs	r2, #3
 80047cc:	4650      	mov	r0, sl
 80047ce:	f7fb fd07 	bl	80001e0 <memchr>
 80047d2:	b140      	cbz	r0, 80047e6 <_svfiprintf_r+0x152>
 80047d4:	2340      	movs	r3, #64	; 0x40
 80047d6:	eba0 000a 	sub.w	r0, r0, sl
 80047da:	fa03 f000 	lsl.w	r0, r3, r0
 80047de:	9b04      	ldr	r3, [sp, #16]
 80047e0:	4303      	orrs	r3, r0
 80047e2:	3401      	adds	r4, #1
 80047e4:	9304      	str	r3, [sp, #16]
 80047e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047ea:	4826      	ldr	r0, [pc, #152]	; (8004884 <_svfiprintf_r+0x1f0>)
 80047ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80047f0:	2206      	movs	r2, #6
 80047f2:	f7fb fcf5 	bl	80001e0 <memchr>
 80047f6:	2800      	cmp	r0, #0
 80047f8:	d038      	beq.n	800486c <_svfiprintf_r+0x1d8>
 80047fa:	4b23      	ldr	r3, [pc, #140]	; (8004888 <_svfiprintf_r+0x1f4>)
 80047fc:	bb1b      	cbnz	r3, 8004846 <_svfiprintf_r+0x1b2>
 80047fe:	9b03      	ldr	r3, [sp, #12]
 8004800:	3307      	adds	r3, #7
 8004802:	f023 0307 	bic.w	r3, r3, #7
 8004806:	3308      	adds	r3, #8
 8004808:	9303      	str	r3, [sp, #12]
 800480a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800480c:	4433      	add	r3, r6
 800480e:	9309      	str	r3, [sp, #36]	; 0x24
 8004810:	e767      	b.n	80046e2 <_svfiprintf_r+0x4e>
 8004812:	fb0c 3202 	mla	r2, ip, r2, r3
 8004816:	460c      	mov	r4, r1
 8004818:	2001      	movs	r0, #1
 800481a:	e7a5      	b.n	8004768 <_svfiprintf_r+0xd4>
 800481c:	2300      	movs	r3, #0
 800481e:	3401      	adds	r4, #1
 8004820:	9305      	str	r3, [sp, #20]
 8004822:	4619      	mov	r1, r3
 8004824:	f04f 0c0a 	mov.w	ip, #10
 8004828:	4620      	mov	r0, r4
 800482a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800482e:	3a30      	subs	r2, #48	; 0x30
 8004830:	2a09      	cmp	r2, #9
 8004832:	d903      	bls.n	800483c <_svfiprintf_r+0x1a8>
 8004834:	2b00      	cmp	r3, #0
 8004836:	d0c5      	beq.n	80047c4 <_svfiprintf_r+0x130>
 8004838:	9105      	str	r1, [sp, #20]
 800483a:	e7c3      	b.n	80047c4 <_svfiprintf_r+0x130>
 800483c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004840:	4604      	mov	r4, r0
 8004842:	2301      	movs	r3, #1
 8004844:	e7f0      	b.n	8004828 <_svfiprintf_r+0x194>
 8004846:	ab03      	add	r3, sp, #12
 8004848:	9300      	str	r3, [sp, #0]
 800484a:	462a      	mov	r2, r5
 800484c:	4b0f      	ldr	r3, [pc, #60]	; (800488c <_svfiprintf_r+0x1f8>)
 800484e:	a904      	add	r1, sp, #16
 8004850:	4638      	mov	r0, r7
 8004852:	f3af 8000 	nop.w
 8004856:	1c42      	adds	r2, r0, #1
 8004858:	4606      	mov	r6, r0
 800485a:	d1d6      	bne.n	800480a <_svfiprintf_r+0x176>
 800485c:	89ab      	ldrh	r3, [r5, #12]
 800485e:	065b      	lsls	r3, r3, #25
 8004860:	f53f af2c 	bmi.w	80046bc <_svfiprintf_r+0x28>
 8004864:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004866:	b01d      	add	sp, #116	; 0x74
 8004868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800486c:	ab03      	add	r3, sp, #12
 800486e:	9300      	str	r3, [sp, #0]
 8004870:	462a      	mov	r2, r5
 8004872:	4b06      	ldr	r3, [pc, #24]	; (800488c <_svfiprintf_r+0x1f8>)
 8004874:	a904      	add	r1, sp, #16
 8004876:	4638      	mov	r0, r7
 8004878:	f000 f87a 	bl	8004970 <_printf_i>
 800487c:	e7eb      	b.n	8004856 <_svfiprintf_r+0x1c2>
 800487e:	bf00      	nop
 8004880:	08004e38 	.word	0x08004e38
 8004884:	08004e42 	.word	0x08004e42
 8004888:	00000000 	.word	0x00000000
 800488c:	080045dd 	.word	0x080045dd
 8004890:	08004e3e 	.word	0x08004e3e

08004894 <_printf_common>:
 8004894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004898:	4616      	mov	r6, r2
 800489a:	4699      	mov	r9, r3
 800489c:	688a      	ldr	r2, [r1, #8]
 800489e:	690b      	ldr	r3, [r1, #16]
 80048a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80048a4:	4293      	cmp	r3, r2
 80048a6:	bfb8      	it	lt
 80048a8:	4613      	movlt	r3, r2
 80048aa:	6033      	str	r3, [r6, #0]
 80048ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80048b0:	4607      	mov	r7, r0
 80048b2:	460c      	mov	r4, r1
 80048b4:	b10a      	cbz	r2, 80048ba <_printf_common+0x26>
 80048b6:	3301      	adds	r3, #1
 80048b8:	6033      	str	r3, [r6, #0]
 80048ba:	6823      	ldr	r3, [r4, #0]
 80048bc:	0699      	lsls	r1, r3, #26
 80048be:	bf42      	ittt	mi
 80048c0:	6833      	ldrmi	r3, [r6, #0]
 80048c2:	3302      	addmi	r3, #2
 80048c4:	6033      	strmi	r3, [r6, #0]
 80048c6:	6825      	ldr	r5, [r4, #0]
 80048c8:	f015 0506 	ands.w	r5, r5, #6
 80048cc:	d106      	bne.n	80048dc <_printf_common+0x48>
 80048ce:	f104 0a19 	add.w	sl, r4, #25
 80048d2:	68e3      	ldr	r3, [r4, #12]
 80048d4:	6832      	ldr	r2, [r6, #0]
 80048d6:	1a9b      	subs	r3, r3, r2
 80048d8:	42ab      	cmp	r3, r5
 80048da:	dc26      	bgt.n	800492a <_printf_common+0x96>
 80048dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80048e0:	1e13      	subs	r3, r2, #0
 80048e2:	6822      	ldr	r2, [r4, #0]
 80048e4:	bf18      	it	ne
 80048e6:	2301      	movne	r3, #1
 80048e8:	0692      	lsls	r2, r2, #26
 80048ea:	d42b      	bmi.n	8004944 <_printf_common+0xb0>
 80048ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048f0:	4649      	mov	r1, r9
 80048f2:	4638      	mov	r0, r7
 80048f4:	47c0      	blx	r8
 80048f6:	3001      	adds	r0, #1
 80048f8:	d01e      	beq.n	8004938 <_printf_common+0xa4>
 80048fa:	6823      	ldr	r3, [r4, #0]
 80048fc:	68e5      	ldr	r5, [r4, #12]
 80048fe:	6832      	ldr	r2, [r6, #0]
 8004900:	f003 0306 	and.w	r3, r3, #6
 8004904:	2b04      	cmp	r3, #4
 8004906:	bf08      	it	eq
 8004908:	1aad      	subeq	r5, r5, r2
 800490a:	68a3      	ldr	r3, [r4, #8]
 800490c:	6922      	ldr	r2, [r4, #16]
 800490e:	bf0c      	ite	eq
 8004910:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004914:	2500      	movne	r5, #0
 8004916:	4293      	cmp	r3, r2
 8004918:	bfc4      	itt	gt
 800491a:	1a9b      	subgt	r3, r3, r2
 800491c:	18ed      	addgt	r5, r5, r3
 800491e:	2600      	movs	r6, #0
 8004920:	341a      	adds	r4, #26
 8004922:	42b5      	cmp	r5, r6
 8004924:	d11a      	bne.n	800495c <_printf_common+0xc8>
 8004926:	2000      	movs	r0, #0
 8004928:	e008      	b.n	800493c <_printf_common+0xa8>
 800492a:	2301      	movs	r3, #1
 800492c:	4652      	mov	r2, sl
 800492e:	4649      	mov	r1, r9
 8004930:	4638      	mov	r0, r7
 8004932:	47c0      	blx	r8
 8004934:	3001      	adds	r0, #1
 8004936:	d103      	bne.n	8004940 <_printf_common+0xac>
 8004938:	f04f 30ff 	mov.w	r0, #4294967295
 800493c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004940:	3501      	adds	r5, #1
 8004942:	e7c6      	b.n	80048d2 <_printf_common+0x3e>
 8004944:	18e1      	adds	r1, r4, r3
 8004946:	1c5a      	adds	r2, r3, #1
 8004948:	2030      	movs	r0, #48	; 0x30
 800494a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800494e:	4422      	add	r2, r4
 8004950:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004954:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004958:	3302      	adds	r3, #2
 800495a:	e7c7      	b.n	80048ec <_printf_common+0x58>
 800495c:	2301      	movs	r3, #1
 800495e:	4622      	mov	r2, r4
 8004960:	4649      	mov	r1, r9
 8004962:	4638      	mov	r0, r7
 8004964:	47c0      	blx	r8
 8004966:	3001      	adds	r0, #1
 8004968:	d0e6      	beq.n	8004938 <_printf_common+0xa4>
 800496a:	3601      	adds	r6, #1
 800496c:	e7d9      	b.n	8004922 <_printf_common+0x8e>
	...

08004970 <_printf_i>:
 8004970:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004974:	7e0f      	ldrb	r7, [r1, #24]
 8004976:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004978:	2f78      	cmp	r7, #120	; 0x78
 800497a:	4691      	mov	r9, r2
 800497c:	4680      	mov	r8, r0
 800497e:	460c      	mov	r4, r1
 8004980:	469a      	mov	sl, r3
 8004982:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004986:	d807      	bhi.n	8004998 <_printf_i+0x28>
 8004988:	2f62      	cmp	r7, #98	; 0x62
 800498a:	d80a      	bhi.n	80049a2 <_printf_i+0x32>
 800498c:	2f00      	cmp	r7, #0
 800498e:	f000 80d8 	beq.w	8004b42 <_printf_i+0x1d2>
 8004992:	2f58      	cmp	r7, #88	; 0x58
 8004994:	f000 80a3 	beq.w	8004ade <_printf_i+0x16e>
 8004998:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800499c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80049a0:	e03a      	b.n	8004a18 <_printf_i+0xa8>
 80049a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80049a6:	2b15      	cmp	r3, #21
 80049a8:	d8f6      	bhi.n	8004998 <_printf_i+0x28>
 80049aa:	a101      	add	r1, pc, #4	; (adr r1, 80049b0 <_printf_i+0x40>)
 80049ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80049b0:	08004a09 	.word	0x08004a09
 80049b4:	08004a1d 	.word	0x08004a1d
 80049b8:	08004999 	.word	0x08004999
 80049bc:	08004999 	.word	0x08004999
 80049c0:	08004999 	.word	0x08004999
 80049c4:	08004999 	.word	0x08004999
 80049c8:	08004a1d 	.word	0x08004a1d
 80049cc:	08004999 	.word	0x08004999
 80049d0:	08004999 	.word	0x08004999
 80049d4:	08004999 	.word	0x08004999
 80049d8:	08004999 	.word	0x08004999
 80049dc:	08004b29 	.word	0x08004b29
 80049e0:	08004a4d 	.word	0x08004a4d
 80049e4:	08004b0b 	.word	0x08004b0b
 80049e8:	08004999 	.word	0x08004999
 80049ec:	08004999 	.word	0x08004999
 80049f0:	08004b4b 	.word	0x08004b4b
 80049f4:	08004999 	.word	0x08004999
 80049f8:	08004a4d 	.word	0x08004a4d
 80049fc:	08004999 	.word	0x08004999
 8004a00:	08004999 	.word	0x08004999
 8004a04:	08004b13 	.word	0x08004b13
 8004a08:	682b      	ldr	r3, [r5, #0]
 8004a0a:	1d1a      	adds	r2, r3, #4
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	602a      	str	r2, [r5, #0]
 8004a10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e0a3      	b.n	8004b64 <_printf_i+0x1f4>
 8004a1c:	6820      	ldr	r0, [r4, #0]
 8004a1e:	6829      	ldr	r1, [r5, #0]
 8004a20:	0606      	lsls	r6, r0, #24
 8004a22:	f101 0304 	add.w	r3, r1, #4
 8004a26:	d50a      	bpl.n	8004a3e <_printf_i+0xce>
 8004a28:	680e      	ldr	r6, [r1, #0]
 8004a2a:	602b      	str	r3, [r5, #0]
 8004a2c:	2e00      	cmp	r6, #0
 8004a2e:	da03      	bge.n	8004a38 <_printf_i+0xc8>
 8004a30:	232d      	movs	r3, #45	; 0x2d
 8004a32:	4276      	negs	r6, r6
 8004a34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a38:	485e      	ldr	r0, [pc, #376]	; (8004bb4 <_printf_i+0x244>)
 8004a3a:	230a      	movs	r3, #10
 8004a3c:	e019      	b.n	8004a72 <_printf_i+0x102>
 8004a3e:	680e      	ldr	r6, [r1, #0]
 8004a40:	602b      	str	r3, [r5, #0]
 8004a42:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004a46:	bf18      	it	ne
 8004a48:	b236      	sxthne	r6, r6
 8004a4a:	e7ef      	b.n	8004a2c <_printf_i+0xbc>
 8004a4c:	682b      	ldr	r3, [r5, #0]
 8004a4e:	6820      	ldr	r0, [r4, #0]
 8004a50:	1d19      	adds	r1, r3, #4
 8004a52:	6029      	str	r1, [r5, #0]
 8004a54:	0601      	lsls	r1, r0, #24
 8004a56:	d501      	bpl.n	8004a5c <_printf_i+0xec>
 8004a58:	681e      	ldr	r6, [r3, #0]
 8004a5a:	e002      	b.n	8004a62 <_printf_i+0xf2>
 8004a5c:	0646      	lsls	r6, r0, #25
 8004a5e:	d5fb      	bpl.n	8004a58 <_printf_i+0xe8>
 8004a60:	881e      	ldrh	r6, [r3, #0]
 8004a62:	4854      	ldr	r0, [pc, #336]	; (8004bb4 <_printf_i+0x244>)
 8004a64:	2f6f      	cmp	r7, #111	; 0x6f
 8004a66:	bf0c      	ite	eq
 8004a68:	2308      	moveq	r3, #8
 8004a6a:	230a      	movne	r3, #10
 8004a6c:	2100      	movs	r1, #0
 8004a6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a72:	6865      	ldr	r5, [r4, #4]
 8004a74:	60a5      	str	r5, [r4, #8]
 8004a76:	2d00      	cmp	r5, #0
 8004a78:	bfa2      	ittt	ge
 8004a7a:	6821      	ldrge	r1, [r4, #0]
 8004a7c:	f021 0104 	bicge.w	r1, r1, #4
 8004a80:	6021      	strge	r1, [r4, #0]
 8004a82:	b90e      	cbnz	r6, 8004a88 <_printf_i+0x118>
 8004a84:	2d00      	cmp	r5, #0
 8004a86:	d04d      	beq.n	8004b24 <_printf_i+0x1b4>
 8004a88:	4615      	mov	r5, r2
 8004a8a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004a8e:	fb03 6711 	mls	r7, r3, r1, r6
 8004a92:	5dc7      	ldrb	r7, [r0, r7]
 8004a94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004a98:	4637      	mov	r7, r6
 8004a9a:	42bb      	cmp	r3, r7
 8004a9c:	460e      	mov	r6, r1
 8004a9e:	d9f4      	bls.n	8004a8a <_printf_i+0x11a>
 8004aa0:	2b08      	cmp	r3, #8
 8004aa2:	d10b      	bne.n	8004abc <_printf_i+0x14c>
 8004aa4:	6823      	ldr	r3, [r4, #0]
 8004aa6:	07de      	lsls	r6, r3, #31
 8004aa8:	d508      	bpl.n	8004abc <_printf_i+0x14c>
 8004aaa:	6923      	ldr	r3, [r4, #16]
 8004aac:	6861      	ldr	r1, [r4, #4]
 8004aae:	4299      	cmp	r1, r3
 8004ab0:	bfde      	ittt	le
 8004ab2:	2330      	movle	r3, #48	; 0x30
 8004ab4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ab8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004abc:	1b52      	subs	r2, r2, r5
 8004abe:	6122      	str	r2, [r4, #16]
 8004ac0:	f8cd a000 	str.w	sl, [sp]
 8004ac4:	464b      	mov	r3, r9
 8004ac6:	aa03      	add	r2, sp, #12
 8004ac8:	4621      	mov	r1, r4
 8004aca:	4640      	mov	r0, r8
 8004acc:	f7ff fee2 	bl	8004894 <_printf_common>
 8004ad0:	3001      	adds	r0, #1
 8004ad2:	d14c      	bne.n	8004b6e <_printf_i+0x1fe>
 8004ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ad8:	b004      	add	sp, #16
 8004ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ade:	4835      	ldr	r0, [pc, #212]	; (8004bb4 <_printf_i+0x244>)
 8004ae0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004ae4:	6829      	ldr	r1, [r5, #0]
 8004ae6:	6823      	ldr	r3, [r4, #0]
 8004ae8:	f851 6b04 	ldr.w	r6, [r1], #4
 8004aec:	6029      	str	r1, [r5, #0]
 8004aee:	061d      	lsls	r5, r3, #24
 8004af0:	d514      	bpl.n	8004b1c <_printf_i+0x1ac>
 8004af2:	07df      	lsls	r7, r3, #31
 8004af4:	bf44      	itt	mi
 8004af6:	f043 0320 	orrmi.w	r3, r3, #32
 8004afa:	6023      	strmi	r3, [r4, #0]
 8004afc:	b91e      	cbnz	r6, 8004b06 <_printf_i+0x196>
 8004afe:	6823      	ldr	r3, [r4, #0]
 8004b00:	f023 0320 	bic.w	r3, r3, #32
 8004b04:	6023      	str	r3, [r4, #0]
 8004b06:	2310      	movs	r3, #16
 8004b08:	e7b0      	b.n	8004a6c <_printf_i+0xfc>
 8004b0a:	6823      	ldr	r3, [r4, #0]
 8004b0c:	f043 0320 	orr.w	r3, r3, #32
 8004b10:	6023      	str	r3, [r4, #0]
 8004b12:	2378      	movs	r3, #120	; 0x78
 8004b14:	4828      	ldr	r0, [pc, #160]	; (8004bb8 <_printf_i+0x248>)
 8004b16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b1a:	e7e3      	b.n	8004ae4 <_printf_i+0x174>
 8004b1c:	0659      	lsls	r1, r3, #25
 8004b1e:	bf48      	it	mi
 8004b20:	b2b6      	uxthmi	r6, r6
 8004b22:	e7e6      	b.n	8004af2 <_printf_i+0x182>
 8004b24:	4615      	mov	r5, r2
 8004b26:	e7bb      	b.n	8004aa0 <_printf_i+0x130>
 8004b28:	682b      	ldr	r3, [r5, #0]
 8004b2a:	6826      	ldr	r6, [r4, #0]
 8004b2c:	6961      	ldr	r1, [r4, #20]
 8004b2e:	1d18      	adds	r0, r3, #4
 8004b30:	6028      	str	r0, [r5, #0]
 8004b32:	0635      	lsls	r5, r6, #24
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	d501      	bpl.n	8004b3c <_printf_i+0x1cc>
 8004b38:	6019      	str	r1, [r3, #0]
 8004b3a:	e002      	b.n	8004b42 <_printf_i+0x1d2>
 8004b3c:	0670      	lsls	r0, r6, #25
 8004b3e:	d5fb      	bpl.n	8004b38 <_printf_i+0x1c8>
 8004b40:	8019      	strh	r1, [r3, #0]
 8004b42:	2300      	movs	r3, #0
 8004b44:	6123      	str	r3, [r4, #16]
 8004b46:	4615      	mov	r5, r2
 8004b48:	e7ba      	b.n	8004ac0 <_printf_i+0x150>
 8004b4a:	682b      	ldr	r3, [r5, #0]
 8004b4c:	1d1a      	adds	r2, r3, #4
 8004b4e:	602a      	str	r2, [r5, #0]
 8004b50:	681d      	ldr	r5, [r3, #0]
 8004b52:	6862      	ldr	r2, [r4, #4]
 8004b54:	2100      	movs	r1, #0
 8004b56:	4628      	mov	r0, r5
 8004b58:	f7fb fb42 	bl	80001e0 <memchr>
 8004b5c:	b108      	cbz	r0, 8004b62 <_printf_i+0x1f2>
 8004b5e:	1b40      	subs	r0, r0, r5
 8004b60:	6060      	str	r0, [r4, #4]
 8004b62:	6863      	ldr	r3, [r4, #4]
 8004b64:	6123      	str	r3, [r4, #16]
 8004b66:	2300      	movs	r3, #0
 8004b68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b6c:	e7a8      	b.n	8004ac0 <_printf_i+0x150>
 8004b6e:	6923      	ldr	r3, [r4, #16]
 8004b70:	462a      	mov	r2, r5
 8004b72:	4649      	mov	r1, r9
 8004b74:	4640      	mov	r0, r8
 8004b76:	47d0      	blx	sl
 8004b78:	3001      	adds	r0, #1
 8004b7a:	d0ab      	beq.n	8004ad4 <_printf_i+0x164>
 8004b7c:	6823      	ldr	r3, [r4, #0]
 8004b7e:	079b      	lsls	r3, r3, #30
 8004b80:	d413      	bmi.n	8004baa <_printf_i+0x23a>
 8004b82:	68e0      	ldr	r0, [r4, #12]
 8004b84:	9b03      	ldr	r3, [sp, #12]
 8004b86:	4298      	cmp	r0, r3
 8004b88:	bfb8      	it	lt
 8004b8a:	4618      	movlt	r0, r3
 8004b8c:	e7a4      	b.n	8004ad8 <_printf_i+0x168>
 8004b8e:	2301      	movs	r3, #1
 8004b90:	4632      	mov	r2, r6
 8004b92:	4649      	mov	r1, r9
 8004b94:	4640      	mov	r0, r8
 8004b96:	47d0      	blx	sl
 8004b98:	3001      	adds	r0, #1
 8004b9a:	d09b      	beq.n	8004ad4 <_printf_i+0x164>
 8004b9c:	3501      	adds	r5, #1
 8004b9e:	68e3      	ldr	r3, [r4, #12]
 8004ba0:	9903      	ldr	r1, [sp, #12]
 8004ba2:	1a5b      	subs	r3, r3, r1
 8004ba4:	42ab      	cmp	r3, r5
 8004ba6:	dcf2      	bgt.n	8004b8e <_printf_i+0x21e>
 8004ba8:	e7eb      	b.n	8004b82 <_printf_i+0x212>
 8004baa:	2500      	movs	r5, #0
 8004bac:	f104 0619 	add.w	r6, r4, #25
 8004bb0:	e7f5      	b.n	8004b9e <_printf_i+0x22e>
 8004bb2:	bf00      	nop
 8004bb4:	08004e49 	.word	0x08004e49
 8004bb8:	08004e5a 	.word	0x08004e5a

08004bbc <_sbrk_r>:
 8004bbc:	b538      	push	{r3, r4, r5, lr}
 8004bbe:	4d06      	ldr	r5, [pc, #24]	; (8004bd8 <_sbrk_r+0x1c>)
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	4604      	mov	r4, r0
 8004bc4:	4608      	mov	r0, r1
 8004bc6:	602b      	str	r3, [r5, #0]
 8004bc8:	f7fc f9f2 	bl	8000fb0 <_sbrk>
 8004bcc:	1c43      	adds	r3, r0, #1
 8004bce:	d102      	bne.n	8004bd6 <_sbrk_r+0x1a>
 8004bd0:	682b      	ldr	r3, [r5, #0]
 8004bd2:	b103      	cbz	r3, 8004bd6 <_sbrk_r+0x1a>
 8004bd4:	6023      	str	r3, [r4, #0]
 8004bd6:	bd38      	pop	{r3, r4, r5, pc}
 8004bd8:	200001b0 	.word	0x200001b0

08004bdc <memcpy>:
 8004bdc:	440a      	add	r2, r1
 8004bde:	4291      	cmp	r1, r2
 8004be0:	f100 33ff 	add.w	r3, r0, #4294967295
 8004be4:	d100      	bne.n	8004be8 <memcpy+0xc>
 8004be6:	4770      	bx	lr
 8004be8:	b510      	push	{r4, lr}
 8004bea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004bee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004bf2:	4291      	cmp	r1, r2
 8004bf4:	d1f9      	bne.n	8004bea <memcpy+0xe>
 8004bf6:	bd10      	pop	{r4, pc}

08004bf8 <memmove>:
 8004bf8:	4288      	cmp	r0, r1
 8004bfa:	b510      	push	{r4, lr}
 8004bfc:	eb01 0402 	add.w	r4, r1, r2
 8004c00:	d902      	bls.n	8004c08 <memmove+0x10>
 8004c02:	4284      	cmp	r4, r0
 8004c04:	4623      	mov	r3, r4
 8004c06:	d807      	bhi.n	8004c18 <memmove+0x20>
 8004c08:	1e43      	subs	r3, r0, #1
 8004c0a:	42a1      	cmp	r1, r4
 8004c0c:	d008      	beq.n	8004c20 <memmove+0x28>
 8004c0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c16:	e7f8      	b.n	8004c0a <memmove+0x12>
 8004c18:	4402      	add	r2, r0
 8004c1a:	4601      	mov	r1, r0
 8004c1c:	428a      	cmp	r2, r1
 8004c1e:	d100      	bne.n	8004c22 <memmove+0x2a>
 8004c20:	bd10      	pop	{r4, pc}
 8004c22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004c2a:	e7f7      	b.n	8004c1c <memmove+0x24>

08004c2c <__malloc_lock>:
 8004c2c:	4801      	ldr	r0, [pc, #4]	; (8004c34 <__malloc_lock+0x8>)
 8004c2e:	f7ff bc3f 	b.w	80044b0 <__retarget_lock_acquire_recursive>
 8004c32:	bf00      	nop
 8004c34:	200001a5 	.word	0x200001a5

08004c38 <__malloc_unlock>:
 8004c38:	4801      	ldr	r0, [pc, #4]	; (8004c40 <__malloc_unlock+0x8>)
 8004c3a:	f7ff bc3a 	b.w	80044b2 <__retarget_lock_release_recursive>
 8004c3e:	bf00      	nop
 8004c40:	200001a5 	.word	0x200001a5

08004c44 <_free_r>:
 8004c44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004c46:	2900      	cmp	r1, #0
 8004c48:	d044      	beq.n	8004cd4 <_free_r+0x90>
 8004c4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c4e:	9001      	str	r0, [sp, #4]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	f1a1 0404 	sub.w	r4, r1, #4
 8004c56:	bfb8      	it	lt
 8004c58:	18e4      	addlt	r4, r4, r3
 8004c5a:	f7ff ffe7 	bl	8004c2c <__malloc_lock>
 8004c5e:	4a1e      	ldr	r2, [pc, #120]	; (8004cd8 <_free_r+0x94>)
 8004c60:	9801      	ldr	r0, [sp, #4]
 8004c62:	6813      	ldr	r3, [r2, #0]
 8004c64:	b933      	cbnz	r3, 8004c74 <_free_r+0x30>
 8004c66:	6063      	str	r3, [r4, #4]
 8004c68:	6014      	str	r4, [r2, #0]
 8004c6a:	b003      	add	sp, #12
 8004c6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c70:	f7ff bfe2 	b.w	8004c38 <__malloc_unlock>
 8004c74:	42a3      	cmp	r3, r4
 8004c76:	d908      	bls.n	8004c8a <_free_r+0x46>
 8004c78:	6825      	ldr	r5, [r4, #0]
 8004c7a:	1961      	adds	r1, r4, r5
 8004c7c:	428b      	cmp	r3, r1
 8004c7e:	bf01      	itttt	eq
 8004c80:	6819      	ldreq	r1, [r3, #0]
 8004c82:	685b      	ldreq	r3, [r3, #4]
 8004c84:	1949      	addeq	r1, r1, r5
 8004c86:	6021      	streq	r1, [r4, #0]
 8004c88:	e7ed      	b.n	8004c66 <_free_r+0x22>
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	b10b      	cbz	r3, 8004c94 <_free_r+0x50>
 8004c90:	42a3      	cmp	r3, r4
 8004c92:	d9fa      	bls.n	8004c8a <_free_r+0x46>
 8004c94:	6811      	ldr	r1, [r2, #0]
 8004c96:	1855      	adds	r5, r2, r1
 8004c98:	42a5      	cmp	r5, r4
 8004c9a:	d10b      	bne.n	8004cb4 <_free_r+0x70>
 8004c9c:	6824      	ldr	r4, [r4, #0]
 8004c9e:	4421      	add	r1, r4
 8004ca0:	1854      	adds	r4, r2, r1
 8004ca2:	42a3      	cmp	r3, r4
 8004ca4:	6011      	str	r1, [r2, #0]
 8004ca6:	d1e0      	bne.n	8004c6a <_free_r+0x26>
 8004ca8:	681c      	ldr	r4, [r3, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	6053      	str	r3, [r2, #4]
 8004cae:	4421      	add	r1, r4
 8004cb0:	6011      	str	r1, [r2, #0]
 8004cb2:	e7da      	b.n	8004c6a <_free_r+0x26>
 8004cb4:	d902      	bls.n	8004cbc <_free_r+0x78>
 8004cb6:	230c      	movs	r3, #12
 8004cb8:	6003      	str	r3, [r0, #0]
 8004cba:	e7d6      	b.n	8004c6a <_free_r+0x26>
 8004cbc:	6825      	ldr	r5, [r4, #0]
 8004cbe:	1961      	adds	r1, r4, r5
 8004cc0:	428b      	cmp	r3, r1
 8004cc2:	bf04      	itt	eq
 8004cc4:	6819      	ldreq	r1, [r3, #0]
 8004cc6:	685b      	ldreq	r3, [r3, #4]
 8004cc8:	6063      	str	r3, [r4, #4]
 8004cca:	bf04      	itt	eq
 8004ccc:	1949      	addeq	r1, r1, r5
 8004cce:	6021      	streq	r1, [r4, #0]
 8004cd0:	6054      	str	r4, [r2, #4]
 8004cd2:	e7ca      	b.n	8004c6a <_free_r+0x26>
 8004cd4:	b003      	add	sp, #12
 8004cd6:	bd30      	pop	{r4, r5, pc}
 8004cd8:	200001a8 	.word	0x200001a8

08004cdc <_realloc_r>:
 8004cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ce0:	4680      	mov	r8, r0
 8004ce2:	4614      	mov	r4, r2
 8004ce4:	460e      	mov	r6, r1
 8004ce6:	b921      	cbnz	r1, 8004cf2 <_realloc_r+0x16>
 8004ce8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004cec:	4611      	mov	r1, r2
 8004cee:	f7ff bc01 	b.w	80044f4 <_malloc_r>
 8004cf2:	b92a      	cbnz	r2, 8004d00 <_realloc_r+0x24>
 8004cf4:	f7ff ffa6 	bl	8004c44 <_free_r>
 8004cf8:	4625      	mov	r5, r4
 8004cfa:	4628      	mov	r0, r5
 8004cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d00:	f000 f81b 	bl	8004d3a <_malloc_usable_size_r>
 8004d04:	4284      	cmp	r4, r0
 8004d06:	4607      	mov	r7, r0
 8004d08:	d802      	bhi.n	8004d10 <_realloc_r+0x34>
 8004d0a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004d0e:	d812      	bhi.n	8004d36 <_realloc_r+0x5a>
 8004d10:	4621      	mov	r1, r4
 8004d12:	4640      	mov	r0, r8
 8004d14:	f7ff fbee 	bl	80044f4 <_malloc_r>
 8004d18:	4605      	mov	r5, r0
 8004d1a:	2800      	cmp	r0, #0
 8004d1c:	d0ed      	beq.n	8004cfa <_realloc_r+0x1e>
 8004d1e:	42bc      	cmp	r4, r7
 8004d20:	4622      	mov	r2, r4
 8004d22:	4631      	mov	r1, r6
 8004d24:	bf28      	it	cs
 8004d26:	463a      	movcs	r2, r7
 8004d28:	f7ff ff58 	bl	8004bdc <memcpy>
 8004d2c:	4631      	mov	r1, r6
 8004d2e:	4640      	mov	r0, r8
 8004d30:	f7ff ff88 	bl	8004c44 <_free_r>
 8004d34:	e7e1      	b.n	8004cfa <_realloc_r+0x1e>
 8004d36:	4635      	mov	r5, r6
 8004d38:	e7df      	b.n	8004cfa <_realloc_r+0x1e>

08004d3a <_malloc_usable_size_r>:
 8004d3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d3e:	1f18      	subs	r0, r3, #4
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	bfbc      	itt	lt
 8004d44:	580b      	ldrlt	r3, [r1, r0]
 8004d46:	18c0      	addlt	r0, r0, r3
 8004d48:	4770      	bx	lr
	...

08004d4c <_init>:
 8004d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d4e:	bf00      	nop
 8004d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d52:	bc08      	pop	{r3}
 8004d54:	469e      	mov	lr, r3
 8004d56:	4770      	bx	lr

08004d58 <_fini>:
 8004d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d5a:	bf00      	nop
 8004d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d5e:	bc08      	pop	{r3}
 8004d60:	469e      	mov	lr, r3
 8004d62:	4770      	bx	lr
