
001Modbus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003558  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  080036e0  080036e0  000136e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800375c  0800375c  00020038  2**0
                  CONTENTS
  4 .ARM          00000008  0800375c  0800375c  0001375c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003764  08003764  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003764  08003764  00013764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003768  08003768  00013768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  0800376c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020038  2**0
                  CONTENTS
 10 .bss          0000009c  20000038  20000038  00020038  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000d4  200000d4  00020038  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007e27  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001993  00000000  00000000  00027e8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000860  00000000  00000000  00029828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000007b0  00000000  00000000  0002a088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e9d8  00000000  00000000  0002a838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008c2e  00000000  00000000  00049210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c580d  00000000  00000000  00051e3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011764b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002128  00000000  00000000  0011769c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000038 	.word	0x20000038
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080036c8 	.word	0x080036c8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000003c 	.word	0x2000003c
 80001c4:	080036c8 	.word	0x080036c8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <cs_sel>:
void W5500_WriteByte(uint8_t byte)
{
	W5500_WriteBuff(&byte, sizeof(byte));
}

void cs_sel() {
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET); //CS LOW
 80004d0:	2200      	movs	r2, #0
 80004d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004d6:	4802      	ldr	r0, [pc, #8]	; (80004e0 <cs_sel+0x14>)
 80004d8:	f000 fdf6 	bl	80010c8 <HAL_GPIO_WritePin>
}
 80004dc:	bf00      	nop
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	40020000 	.word	0x40020000

080004e4 <cs_desel>:

void cs_desel() {
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET); //CS HIGH
 80004e8:	2201      	movs	r2, #1
 80004ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004ee:	4802      	ldr	r0, [pc, #8]	; (80004f8 <cs_desel+0x14>)
 80004f0:	f000 fdea 	bl	80010c8 <HAL_GPIO_WritePin>
}
 80004f4:	bf00      	nop
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	40020400 	.word	0x40020400

080004fc <spi_rb>:

uint8_t spi_rb(void) {
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
	uint8_t rbuf;
	HAL_SPI_Receive(&hspi1, &rbuf, 1, 0xFFFFFFFF);
 8000502:	1df9      	adds	r1, r7, #7
 8000504:	f04f 33ff 	mov.w	r3, #4294967295
 8000508:	2201      	movs	r2, #1
 800050a:	4804      	ldr	r0, [pc, #16]	; (800051c <spi_rb+0x20>)
 800050c:	f001 fc1f 	bl	8001d4e <HAL_SPI_Receive>
	return rbuf;
 8000510:	79fb      	ldrb	r3, [r7, #7]
}
 8000512:	4618      	mov	r0, r3
 8000514:	3708      	adds	r7, #8
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	20000054 	.word	0x20000054

08000520 <spi_wb>:

void spi_wb(uint8_t b) {
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	4603      	mov	r3, r0
 8000528:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &b, 1, 0xFFFFFFFF);
 800052a:	1df9      	adds	r1, r7, #7
 800052c:	f04f 33ff 	mov.w	r3, #4294967295
 8000530:	2201      	movs	r2, #1
 8000532:	4803      	ldr	r0, [pc, #12]	; (8000540 <spi_wb+0x20>)
 8000534:	f001 facf 	bl	8001ad6 <HAL_SPI_Transmit>
}
 8000538:	bf00      	nop
 800053a:	3708      	adds	r7, #8
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	20000054 	.word	0x20000054

08000544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b096      	sub	sp, #88	; 0x58
 8000548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint8_t retVal, sockStatus;
  uint8_t bufSize[] = {2, 2, 2, 2};
 800054a:	f04f 3302 	mov.w	r3, #33686018	; 0x2020202
 800054e:	64fb      	str	r3, [r7, #76]	; 0x4c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000550:	f000 faa2 	bl	8000a98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000554:	f000 f8b6 	bl	80006c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000558:	f000 f954 	bl	8000804 <MX_GPIO_Init>
  MX_SPI1_Init();
 800055c:	f000 f91c 	bl	8000798 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  reg_wizchip_cs_cbfunc(cs_sel, cs_desel);
 8000560:	494e      	ldr	r1, [pc, #312]	; (800069c <main+0x158>)
 8000562:	484f      	ldr	r0, [pc, #316]	; (80006a0 <main+0x15c>)
 8000564:	f002 feda 	bl	800331c <reg_wizchip_cs_cbfunc>
  reg_wizchip_spi_cbfunc(spi_rb, spi_wb);
 8000568:	494e      	ldr	r1, [pc, #312]	; (80006a4 <main+0x160>)
 800056a:	484f      	ldr	r0, [pc, #316]	; (80006a8 <main+0x164>)
 800056c:	f002 fefc 	bl	8003368 <reg_wizchip_spi_cbfunc>

  wizchip_init(bufSize, bufSize);
 8000570:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8000574:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000578:	4611      	mov	r1, r2
 800057a:	4618      	mov	r0, r3
 800057c:	f002 ff6c 	bl	8003458 <wizchip_init>
   wiz_NetInfo netInfo = { .mac = {0x00, 0x08, 0xdc, 0xab, 0xcd, 0xef},	// Mac address
 8000580:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]
 8000590:	f8c3 2013 	str.w	r2, [r3, #19]
 8000594:	4a45      	ldr	r2, [pc, #276]	; (80006ac <main+0x168>)
 8000596:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800059a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800059e:	6018      	str	r0, [r3, #0]
 80005a0:	3304      	adds	r3, #4
 80005a2:	8019      	strh	r1, [r3, #0]
 80005a4:	4a42      	ldr	r2, [pc, #264]	; (80006b0 <main+0x16c>)
 80005a6:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 80005aa:	6810      	ldr	r0, [r2, #0]
 80005ac:	6018      	str	r0, [r3, #0]
 80005ae:	4a41      	ldr	r2, [pc, #260]	; (80006b4 <main+0x170>)
 80005b0:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 80005b4:	6810      	ldr	r0, [r2, #0]
 80005b6:	6018      	str	r0, [r3, #0]
 80005b8:	4a3f      	ldr	r2, [pc, #252]	; (80006b8 <main+0x174>)
 80005ba:	f107 0342 	add.w	r3, r7, #66	; 0x42
 80005be:	6810      	ldr	r0, [r2, #0]
 80005c0:	6018      	str	r0, [r3, #0]
                           .ip 	= {192, 168, 0, 45},					// IP address
                           .sn 	= {255, 255, 255, 0},					// Subnet mask
                           .gw 	= {192, 168, 2, 1}};					// Gateway address
   wizchip_setnetinfo(&netInfo);
 80005c2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80005c6:	4618      	mov	r0, r3
 80005c8:	f002 ffd2 	bl	8003570 <wizchip_setnetinfo>
   wizchip_getnetinfo(&netInfo);
 80005cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80005d0:	4618      	mov	r0, r3
 80005d2:	f003 f80d 	bl	80035f0 <wizchip_getnetinfo>

   uint8_t s=0;
 80005d6:	2300      	movs	r3, #0
 80005d8:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
//    /* We close the socket and start a connection again */
//    //disconnect(0);
//    //close(0);
//    //goto reconnect;

   uint8_t server_ip[4] = {192,168,0,54};
 80005dc:	4b37      	ldr	r3, [pc, #220]	; (80006bc <main+0x178>)
 80005de:	633b      	str	r3, [r7, #48]	; 0x30
   uint8_t baglan;
   uint8_t rcvBuf[] = "Ilker Keser";
 80005e0:	4a37      	ldr	r2, [pc, #220]	; (80006c0 <main+0x17c>)
 80005e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005e6:	ca07      	ldmia	r2, {r0, r1, r2}
 80005e8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  socket(s, Sn_MR_TCP, 502, SF_TCP_NODELAY);
 80005ec:	f897 0054 	ldrb.w	r0, [r7, #84]	; 0x54
 80005f0:	2320      	movs	r3, #32
 80005f2:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 80005f6:	2101      	movs	r1, #1
 80005f8:	f001 ff8c 	bl	8002514 <socket>
	  while(baglan != SOCK_OK){
 80005fc:	e00b      	b.n	8000616 <main+0xd2>
		  baglan=connect(s, server_ip, 502);
 80005fe:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000602:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8000606:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 800060a:	4618      	mov	r0, r3
 800060c:	f002 f906 	bl	800281c <connect>
 8000610:	4603      	mov	r3, r0
 8000612:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	  while(baglan != SOCK_OK){
 8000616:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800061a:	2b01      	cmp	r3, #1
 800061c:	d1ef      	bne.n	80005fe <main+0xba>
	  }
	  baglan =0;
 800061e:	2300      	movs	r3, #0
 8000620:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	  send(s, rcvBuf, sizeof(rcvBuf));
 8000624:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000628:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800062c:	220c      	movs	r2, #12
 800062e:	4618      	mov	r0, r3
 8000630:	f002 f9d0 	bl	80029d4 <send>

	  while(received_len == 0){
 8000634:	e015      	b.n	8000662 <main+0x11e>
		  if((RSR_len = getSn_RX_RSR(s)) > 0)
 8000636:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800063a:	4618      	mov	r0, r3
 800063c:	f002 fd1f 	bl	800307e <getSn_RX_RSR>
 8000640:	4603      	mov	r3, r0
 8000642:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 8000646:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800064a:	2b00      	cmp	r3, #0
 800064c:	d009      	beq.n	8000662 <main+0x11e>
			  received_len = recv(s,data_buf, sizeof(data_buf));
 800064e:	1d39      	adds	r1, r7, #4
 8000650:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8000654:	221e      	movs	r2, #30
 8000656:	4618      	mov	r0, r3
 8000658:	f002 fab6 	bl	8002bc8 <recv>
 800065c:	4603      	mov	r3, r0
 800065e:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	  while(received_len == 0){
 8000662:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8000666:	2b00      	cmp	r3, #0
 8000668:	d0e5      	beq.n	8000636 <main+0xf2>
	  }
	  while(Kop != SOCK_OK){
 800066a:	e007      	b.n	800067c <main+0x138>
		  Kop = close(s);
 800066c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8000670:	4618      	mov	r0, r3
 8000672:	f002 f865 	bl	8002740 <close>
 8000676:	4603      	mov	r3, r0
 8000678:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	  while(Kop != SOCK_OK){
 800067c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8000680:	2b01      	cmp	r3, #1
 8000682:	d1f3      	bne.n	800066c <main+0x128>
	  }
	  Kop =0;
 8000684:	2300      	movs	r3, #0
 8000686:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

	  HAL_Delay(500);
 800068a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800068e:	f000 fa75 	bl	8000b7c <HAL_Delay>
	  received_len = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	  socket(s, Sn_MR_TCP, 502, SF_TCP_NODELAY);
 8000698:	e7a8      	b.n	80005ec <main+0xa8>
 800069a:	bf00      	nop
 800069c:	080004e5 	.word	0x080004e5
 80006a0:	080004cd 	.word	0x080004cd
 80006a4:	08000521 	.word	0x08000521
 80006a8:	080004fd 	.word	0x080004fd
 80006ac:	0800372c 	.word	0x0800372c
 80006b0:	08003734 	.word	0x08003734
 80006b4:	08003738 	.word	0x08003738
 80006b8:	0800373c 	.word	0x0800373c
 80006bc:	3600a8c0 	.word	0x3600a8c0
 80006c0:	08003740 	.word	0x08003740

080006c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b094      	sub	sp, #80	; 0x50
 80006c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	f107 0320 	add.w	r3, r7, #32
 80006ce:	2230      	movs	r2, #48	; 0x30
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f002 fff0 	bl	80036b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e8:	2300      	movs	r3, #0
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	4b28      	ldr	r3, [pc, #160]	; (8000790 <SystemClock_Config+0xcc>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f0:	4a27      	ldr	r2, [pc, #156]	; (8000790 <SystemClock_Config+0xcc>)
 80006f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f6:	6413      	str	r3, [r2, #64]	; 0x40
 80006f8:	4b25      	ldr	r3, [pc, #148]	; (8000790 <SystemClock_Config+0xcc>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000704:	2300      	movs	r3, #0
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	4b22      	ldr	r3, [pc, #136]	; (8000794 <SystemClock_Config+0xd0>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a21      	ldr	r2, [pc, #132]	; (8000794 <SystemClock_Config+0xd0>)
 800070e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000712:	6013      	str	r3, [r2, #0]
 8000714:	4b1f      	ldr	r3, [pc, #124]	; (8000794 <SystemClock_Config+0xd0>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000720:	2301      	movs	r3, #1
 8000722:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000724:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000728:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072a:	2302      	movs	r3, #2
 800072c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800072e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000732:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000734:	2304      	movs	r3, #4
 8000736:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 82;
 8000738:	2352      	movs	r3, #82	; 0x52
 800073a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800073c:	2302      	movs	r3, #2
 800073e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000740:	2307      	movs	r3, #7
 8000742:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000744:	f107 0320 	add.w	r3, r7, #32
 8000748:	4618      	mov	r0, r3
 800074a:	f000 fcd7 	bl	80010fc <HAL_RCC_OscConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000754:	f000 f8c4 	bl	80008e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000758:	230f      	movs	r3, #15
 800075a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075c:	2302      	movs	r3, #2
 800075e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000768:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800076a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800076e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000770:	f107 030c 	add.w	r3, r7, #12
 8000774:	2102      	movs	r1, #2
 8000776:	4618      	mov	r0, r3
 8000778:	f000 ff38 	bl	80015ec <HAL_RCC_ClockConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000782:	f000 f8ad 	bl	80008e0 <Error_Handler>
  }
}
 8000786:	bf00      	nop
 8000788:	3750      	adds	r7, #80	; 0x50
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40023800 	.word	0x40023800
 8000794:	40007000 	.word	0x40007000

08000798 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800079c:	4b17      	ldr	r3, [pc, #92]	; (80007fc <MX_SPI1_Init+0x64>)
 800079e:	4a18      	ldr	r2, [pc, #96]	; (8000800 <MX_SPI1_Init+0x68>)
 80007a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007a2:	4b16      	ldr	r3, [pc, #88]	; (80007fc <MX_SPI1_Init+0x64>)
 80007a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007aa:	4b14      	ldr	r3, [pc, #80]	; (80007fc <MX_SPI1_Init+0x64>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007b0:	4b12      	ldr	r3, [pc, #72]	; (80007fc <MX_SPI1_Init+0x64>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007b6:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_SPI1_Init+0x64>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007bc:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <MX_SPI1_Init+0x64>)
 80007be:	2200      	movs	r2, #0
 80007c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MX_SPI1_Init+0x64>)
 80007c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80007ca:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <MX_SPI1_Init+0x64>)
 80007cc:	2228      	movs	r2, #40	; 0x28
 80007ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007d0:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <MX_SPI1_Init+0x64>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007d6:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_SPI1_Init+0x64>)
 80007d8:	2200      	movs	r2, #0
 80007da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007dc:	4b07      	ldr	r3, [pc, #28]	; (80007fc <MX_SPI1_Init+0x64>)
 80007de:	2200      	movs	r2, #0
 80007e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007e2:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_SPI1_Init+0x64>)
 80007e4:	220a      	movs	r2, #10
 80007e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007e8:	4804      	ldr	r0, [pc, #16]	; (80007fc <MX_SPI1_Init+0x64>)
 80007ea:	f001 f8eb 	bl	80019c4 <HAL_SPI_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007f4:	f000 f874 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007f8:	bf00      	nop
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20000054 	.word	0x20000054
 8000800:	40013000 	.word	0x40013000

08000804 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08a      	sub	sp, #40	; 0x28
 8000808:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080a:	f107 0314 	add.w	r3, r7, #20
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
 8000818:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	613b      	str	r3, [r7, #16]
 800081e:	4b2d      	ldr	r3, [pc, #180]	; (80008d4 <MX_GPIO_Init+0xd0>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a2c      	ldr	r2, [pc, #176]	; (80008d4 <MX_GPIO_Init+0xd0>)
 8000824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b2a      	ldr	r3, [pc, #168]	; (80008d4 <MX_GPIO_Init+0xd0>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000832:	613b      	str	r3, [r7, #16]
 8000834:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	60fb      	str	r3, [r7, #12]
 800083a:	4b26      	ldr	r3, [pc, #152]	; (80008d4 <MX_GPIO_Init+0xd0>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a25      	ldr	r2, [pc, #148]	; (80008d4 <MX_GPIO_Init+0xd0>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b23      	ldr	r3, [pc, #140]	; (80008d4 <MX_GPIO_Init+0xd0>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	4b1f      	ldr	r3, [pc, #124]	; (80008d4 <MX_GPIO_Init+0xd0>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a1e      	ldr	r2, [pc, #120]	; (80008d4 <MX_GPIO_Init+0xd0>)
 800085c:	f043 0308 	orr.w	r3, r3, #8
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b1c      	ldr	r3, [pc, #112]	; (80008d4 <MX_GPIO_Init+0xd0>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0308 	and.w	r3, r3, #8
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	4b18      	ldr	r3, [pc, #96]	; (80008d4 <MX_GPIO_Init+0xd0>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a17      	ldr	r2, [pc, #92]	; (80008d4 <MX_GPIO_Init+0xd0>)
 8000878:	f043 0302 	orr.w	r3, r3, #2
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b15      	ldr	r3, [pc, #84]	; (80008d4 <MX_GPIO_Init+0xd0>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0302 	and.w	r3, r3, #2
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, yesil_led_Pin|sari_led_Pin|Kirmizi_led_Pin|CS_Pin_Pin, GPIO_PIN_RESET);
 800088a:	2200      	movs	r2, #0
 800088c:	f24e 0180 	movw	r1, #57472	; 0xe080
 8000890:	4811      	ldr	r0, [pc, #68]	; (80008d8 <MX_GPIO_Init+0xd4>)
 8000892:	f000 fc19 	bl	80010c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000896:	2301      	movs	r3, #1
 8000898:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800089a:	2300      	movs	r3, #0
 800089c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80008a2:	f107 0314 	add.w	r3, r7, #20
 80008a6:	4619      	mov	r1, r3
 80008a8:	480c      	ldr	r0, [pc, #48]	; (80008dc <MX_GPIO_Init+0xd8>)
 80008aa:	f000 fa71 	bl	8000d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : yesil_led_Pin sari_led_Pin Kirmizi_led_Pin CS_Pin_Pin */
  GPIO_InitStruct.Pin = yesil_led_Pin|sari_led_Pin|Kirmizi_led_Pin|CS_Pin_Pin;
 80008ae:	f24e 0380 	movw	r3, #57472	; 0xe080
 80008b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b4:	2301      	movs	r3, #1
 80008b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008bc:	2300      	movs	r3, #0
 80008be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008c0:	f107 0314 	add.w	r3, r7, #20
 80008c4:	4619      	mov	r1, r3
 80008c6:	4804      	ldr	r0, [pc, #16]	; (80008d8 <MX_GPIO_Init+0xd4>)
 80008c8:	f000 fa62 	bl	8000d90 <HAL_GPIO_Init>

}
 80008cc:	bf00      	nop
 80008ce:	3728      	adds	r7, #40	; 0x28
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40023800 	.word	0x40023800
 80008d8:	40020c00 	.word	0x40020c00
 80008dc:	40020000 	.word	0x40020000

080008e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e4:	b672      	cpsid	i
}
 80008e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <Error_Handler+0x8>
	...

080008ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	607b      	str	r3, [r7, #4]
 80008f6:	4b10      	ldr	r3, [pc, #64]	; (8000938 <HAL_MspInit+0x4c>)
 80008f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008fa:	4a0f      	ldr	r2, [pc, #60]	; (8000938 <HAL_MspInit+0x4c>)
 80008fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000900:	6453      	str	r3, [r2, #68]	; 0x44
 8000902:	4b0d      	ldr	r3, [pc, #52]	; (8000938 <HAL_MspInit+0x4c>)
 8000904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000906:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	603b      	str	r3, [r7, #0]
 8000912:	4b09      	ldr	r3, [pc, #36]	; (8000938 <HAL_MspInit+0x4c>)
 8000914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000916:	4a08      	ldr	r2, [pc, #32]	; (8000938 <HAL_MspInit+0x4c>)
 8000918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800091c:	6413      	str	r3, [r2, #64]	; 0x40
 800091e:	4b06      	ldr	r3, [pc, #24]	; (8000938 <HAL_MspInit+0x4c>)
 8000920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000926:	603b      	str	r3, [r7, #0]
 8000928:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800092a:	2007      	movs	r0, #7
 800092c:	f000 f9fc 	bl	8000d28 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000930:	bf00      	nop
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40023800 	.word	0x40023800

0800093c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08a      	sub	sp, #40	; 0x28
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000944:	f107 0314 	add.w	r3, r7, #20
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]
 8000952:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a19      	ldr	r2, [pc, #100]	; (80009c0 <HAL_SPI_MspInit+0x84>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d12b      	bne.n	80009b6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	613b      	str	r3, [r7, #16]
 8000962:	4b18      	ldr	r3, [pc, #96]	; (80009c4 <HAL_SPI_MspInit+0x88>)
 8000964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000966:	4a17      	ldr	r2, [pc, #92]	; (80009c4 <HAL_SPI_MspInit+0x88>)
 8000968:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800096c:	6453      	str	r3, [r2, #68]	; 0x44
 800096e:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <HAL_SPI_MspInit+0x88>)
 8000970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000972:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000976:	613b      	str	r3, [r7, #16]
 8000978:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	60fb      	str	r3, [r7, #12]
 800097e:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <HAL_SPI_MspInit+0x88>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a10      	ldr	r2, [pc, #64]	; (80009c4 <HAL_SPI_MspInit+0x88>)
 8000984:	f043 0302 	orr.w	r3, r3, #2
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <HAL_SPI_MspInit+0x88>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f003 0302 	and.w	r3, r3, #2
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000996:	2338      	movs	r3, #56	; 0x38
 8000998:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099a:	2302      	movs	r3, #2
 800099c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a2:	2303      	movs	r3, #3
 80009a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009a6:	2305      	movs	r3, #5
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009aa:	f107 0314 	add.w	r3, r7, #20
 80009ae:	4619      	mov	r1, r3
 80009b0:	4805      	ldr	r0, [pc, #20]	; (80009c8 <HAL_SPI_MspInit+0x8c>)
 80009b2:	f000 f9ed 	bl	8000d90 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80009b6:	bf00      	nop
 80009b8:	3728      	adds	r7, #40	; 0x28
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40013000 	.word	0x40013000
 80009c4:	40023800 	.word	0x40023800
 80009c8:	40020400 	.word	0x40020400

080009cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <NMI_Handler+0x4>

080009d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d6:	e7fe      	b.n	80009d6 <HardFault_Handler+0x4>

080009d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009dc:	e7fe      	b.n	80009dc <MemManage_Handler+0x4>

080009de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009e2:	e7fe      	b.n	80009e2 <BusFault_Handler+0x4>

080009e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <UsageFault_Handler+0x4>

080009ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr

080009f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr

08000a06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a06:	b480      	push	{r7}
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr

08000a14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a18:	f000 f890 	bl	8000b3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <SystemInit+0x20>)
 8000a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a2a:	4a05      	ldr	r2, [pc, #20]	; (8000a40 <SystemInit+0x20>)
 8000a2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a7c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a48:	480d      	ldr	r0, [pc, #52]	; (8000a80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a4a:	490e      	ldr	r1, [pc, #56]	; (8000a84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a4c:	4a0e      	ldr	r2, [pc, #56]	; (8000a88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a50:	e002      	b.n	8000a58 <LoopCopyDataInit>

08000a52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a56:	3304      	adds	r3, #4

08000a58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a5c:	d3f9      	bcc.n	8000a52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a5e:	4a0b      	ldr	r2, [pc, #44]	; (8000a8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a60:	4c0b      	ldr	r4, [pc, #44]	; (8000a90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a64:	e001      	b.n	8000a6a <LoopFillZerobss>

08000a66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a68:	3204      	adds	r2, #4

08000a6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a6c:	d3fb      	bcc.n	8000a66 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a6e:	f7ff ffd7 	bl	8000a20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a72:	f002 fdfd 	bl	8003670 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a76:	f7ff fd65 	bl	8000544 <main>
  bx  lr    
 8000a7a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a84:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 8000a88:	0800376c 	.word	0x0800376c
  ldr r2, =_sbss
 8000a8c:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 8000a90:	200000d4 	.word	0x200000d4

08000a94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a94:	e7fe      	b.n	8000a94 <ADC_IRQHandler>
	...

08000a98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a9c:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <HAL_Init+0x40>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a0d      	ldr	r2, [pc, #52]	; (8000ad8 <HAL_Init+0x40>)
 8000aa2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aa6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000aa8:	4b0b      	ldr	r3, [pc, #44]	; (8000ad8 <HAL_Init+0x40>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a0a      	ldr	r2, [pc, #40]	; (8000ad8 <HAL_Init+0x40>)
 8000aae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ab2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab4:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <HAL_Init+0x40>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a07      	ldr	r2, [pc, #28]	; (8000ad8 <HAL_Init+0x40>)
 8000aba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000abe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac0:	2003      	movs	r0, #3
 8000ac2:	f000 f931 	bl	8000d28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ac6:	2000      	movs	r0, #0
 8000ac8:	f000 f808 	bl	8000adc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000acc:	f7ff ff0e 	bl	80008ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ad0:	2300      	movs	r3, #0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40023c00 	.word	0x40023c00

08000adc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ae4:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <HAL_InitTick+0x54>)
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <HAL_InitTick+0x58>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	4619      	mov	r1, r3
 8000aee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000af2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000afa:	4618      	mov	r0, r3
 8000afc:	f000 f93b 	bl	8000d76 <HAL_SYSTICK_Config>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
 8000b08:	e00e      	b.n	8000b28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2b0f      	cmp	r3, #15
 8000b0e:	d80a      	bhi.n	8000b26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b10:	2200      	movs	r2, #0
 8000b12:	6879      	ldr	r1, [r7, #4]
 8000b14:	f04f 30ff 	mov.w	r0, #4294967295
 8000b18:	f000 f911 	bl	8000d3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b1c:	4a06      	ldr	r2, [pc, #24]	; (8000b38 <HAL_InitTick+0x5c>)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b22:	2300      	movs	r3, #0
 8000b24:	e000      	b.n	8000b28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b26:	2301      	movs	r3, #1
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20000000 	.word	0x20000000
 8000b34:	20000008 	.word	0x20000008
 8000b38:	20000004 	.word	0x20000004

08000b3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <HAL_IncTick+0x20>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	461a      	mov	r2, r3
 8000b46:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <HAL_IncTick+0x24>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	4a04      	ldr	r2, [pc, #16]	; (8000b60 <HAL_IncTick+0x24>)
 8000b4e:	6013      	str	r3, [r2, #0]
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	20000008 	.word	0x20000008
 8000b60:	200000ac 	.word	0x200000ac

08000b64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  return uwTick;
 8000b68:	4b03      	ldr	r3, [pc, #12]	; (8000b78 <HAL_GetTick+0x14>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	200000ac 	.word	0x200000ac

08000b7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b84:	f7ff ffee 	bl	8000b64 <HAL_GetTick>
 8000b88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b94:	d005      	beq.n	8000ba2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b96:	4b0a      	ldr	r3, [pc, #40]	; (8000bc0 <HAL_Delay+0x44>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ba2:	bf00      	nop
 8000ba4:	f7ff ffde 	bl	8000b64 <HAL_GetTick>
 8000ba8:	4602      	mov	r2, r0
 8000baa:	68bb      	ldr	r3, [r7, #8]
 8000bac:	1ad3      	subs	r3, r2, r3
 8000bae:	68fa      	ldr	r2, [r7, #12]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	d8f7      	bhi.n	8000ba4 <HAL_Delay+0x28>
  {
  }
}
 8000bb4:	bf00      	nop
 8000bb6:	bf00      	nop
 8000bb8:	3710      	adds	r7, #16
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000008 	.word	0x20000008

08000bc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f003 0307 	and.w	r3, r3, #7
 8000bd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bd4:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bda:	68ba      	ldr	r2, [r7, #8]
 8000bdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000be0:	4013      	ands	r3, r2
 8000be2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bf6:	4a04      	ldr	r2, [pc, #16]	; (8000c08 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	60d3      	str	r3, [r2, #12]
}
 8000bfc:	bf00      	nop
 8000bfe:	3714      	adds	r7, #20
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c10:	4b04      	ldr	r3, [pc, #16]	; (8000c24 <__NVIC_GetPriorityGrouping+0x18>)
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	0a1b      	lsrs	r3, r3, #8
 8000c16:	f003 0307 	and.w	r3, r3, #7
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	6039      	str	r1, [r7, #0]
 8000c32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	db0a      	blt.n	8000c52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	b2da      	uxtb	r2, r3
 8000c40:	490c      	ldr	r1, [pc, #48]	; (8000c74 <__NVIC_SetPriority+0x4c>)
 8000c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c46:	0112      	lsls	r2, r2, #4
 8000c48:	b2d2      	uxtb	r2, r2
 8000c4a:	440b      	add	r3, r1
 8000c4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c50:	e00a      	b.n	8000c68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	b2da      	uxtb	r2, r3
 8000c56:	4908      	ldr	r1, [pc, #32]	; (8000c78 <__NVIC_SetPriority+0x50>)
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	f003 030f 	and.w	r3, r3, #15
 8000c5e:	3b04      	subs	r3, #4
 8000c60:	0112      	lsls	r2, r2, #4
 8000c62:	b2d2      	uxtb	r2, r2
 8000c64:	440b      	add	r3, r1
 8000c66:	761a      	strb	r2, [r3, #24]
}
 8000c68:	bf00      	nop
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	e000e100 	.word	0xe000e100
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b089      	sub	sp, #36	; 0x24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	60f8      	str	r0, [r7, #12]
 8000c84:	60b9      	str	r1, [r7, #8]
 8000c86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	f003 0307 	and.w	r3, r3, #7
 8000c8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c90:	69fb      	ldr	r3, [r7, #28]
 8000c92:	f1c3 0307 	rsb	r3, r3, #7
 8000c96:	2b04      	cmp	r3, #4
 8000c98:	bf28      	it	cs
 8000c9a:	2304      	movcs	r3, #4
 8000c9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	3304      	adds	r3, #4
 8000ca2:	2b06      	cmp	r3, #6
 8000ca4:	d902      	bls.n	8000cac <NVIC_EncodePriority+0x30>
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	3b03      	subs	r3, #3
 8000caa:	e000      	b.n	8000cae <NVIC_EncodePriority+0x32>
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000cb4:	69bb      	ldr	r3, [r7, #24]
 8000cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cba:	43da      	mvns	r2, r3
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	401a      	ands	r2, r3
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cc4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	fa01 f303 	lsl.w	r3, r1, r3
 8000cce:	43d9      	mvns	r1, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd4:	4313      	orrs	r3, r2
         );
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3724      	adds	r7, #36	; 0x24
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
	...

08000ce4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cf4:	d301      	bcc.n	8000cfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e00f      	b.n	8000d1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cfa:	4a0a      	ldr	r2, [pc, #40]	; (8000d24 <SysTick_Config+0x40>)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	3b01      	subs	r3, #1
 8000d00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d02:	210f      	movs	r1, #15
 8000d04:	f04f 30ff 	mov.w	r0, #4294967295
 8000d08:	f7ff ff8e 	bl	8000c28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d0c:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <SysTick_Config+0x40>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d12:	4b04      	ldr	r3, [pc, #16]	; (8000d24 <SysTick_Config+0x40>)
 8000d14:	2207      	movs	r2, #7
 8000d16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d18:	2300      	movs	r3, #0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	e000e010 	.word	0xe000e010

08000d28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	f7ff ff47 	bl	8000bc4 <__NVIC_SetPriorityGrouping>
}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b086      	sub	sp, #24
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	4603      	mov	r3, r0
 8000d46:	60b9      	str	r1, [r7, #8]
 8000d48:	607a      	str	r2, [r7, #4]
 8000d4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d50:	f7ff ff5c 	bl	8000c0c <__NVIC_GetPriorityGrouping>
 8000d54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	68b9      	ldr	r1, [r7, #8]
 8000d5a:	6978      	ldr	r0, [r7, #20]
 8000d5c:	f7ff ff8e 	bl	8000c7c <NVIC_EncodePriority>
 8000d60:	4602      	mov	r2, r0
 8000d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d66:	4611      	mov	r1, r2
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff ff5d 	bl	8000c28 <__NVIC_SetPriority>
}
 8000d6e:	bf00      	nop
 8000d70:	3718      	adds	r7, #24
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b082      	sub	sp, #8
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f7ff ffb0 	bl	8000ce4 <SysTick_Config>
 8000d84:	4603      	mov	r3, r0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
	...

08000d90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b089      	sub	sp, #36	; 0x24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000da6:	2300      	movs	r3, #0
 8000da8:	61fb      	str	r3, [r7, #28]
 8000daa:	e16b      	b.n	8001084 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dac:	2201      	movs	r2, #1
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	697a      	ldr	r2, [r7, #20]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dc0:	693a      	ldr	r2, [r7, #16]
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	f040 815a 	bne.w	800107e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	f003 0303 	and.w	r3, r3, #3
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d005      	beq.n	8000de2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dde:	2b02      	cmp	r3, #2
 8000de0:	d130      	bne.n	8000e44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	689b      	ldr	r3, [r3, #8]
 8000de6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	2203      	movs	r2, #3
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	43db      	mvns	r3, r3
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	4013      	ands	r3, r2
 8000df8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	68da      	ldr	r2, [r3, #12]
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e18:	2201      	movs	r2, #1
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	43db      	mvns	r3, r3
 8000e22:	69ba      	ldr	r2, [r7, #24]
 8000e24:	4013      	ands	r3, r2
 8000e26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	091b      	lsrs	r3, r3, #4
 8000e2e:	f003 0201 	and.w	r2, r3, #1
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f003 0303 	and.w	r3, r3, #3
 8000e4c:	2b03      	cmp	r3, #3
 8000e4e:	d017      	beq.n	8000e80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	2203      	movs	r2, #3
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	43db      	mvns	r3, r3
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	4013      	ands	r3, r2
 8000e66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	689a      	ldr	r2, [r3, #8]
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f003 0303 	and.w	r3, r3, #3
 8000e88:	2b02      	cmp	r3, #2
 8000e8a:	d123      	bne.n	8000ed4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	08da      	lsrs	r2, r3, #3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	3208      	adds	r2, #8
 8000e94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	f003 0307 	and.w	r3, r3, #7
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	220f      	movs	r2, #15
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	4013      	ands	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	691a      	ldr	r2, [r3, #16]
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	f003 0307 	and.w	r3, r3, #7
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	08da      	lsrs	r2, r3, #3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	3208      	adds	r2, #8
 8000ece:	69b9      	ldr	r1, [r7, #24]
 8000ed0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	2203      	movs	r2, #3
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f003 0203 	and.w	r2, r3, #3
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	f000 80b4 	beq.w	800107e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	4b60      	ldr	r3, [pc, #384]	; (800109c <HAL_GPIO_Init+0x30c>)
 8000f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1e:	4a5f      	ldr	r2, [pc, #380]	; (800109c <HAL_GPIO_Init+0x30c>)
 8000f20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f24:	6453      	str	r3, [r2, #68]	; 0x44
 8000f26:	4b5d      	ldr	r3, [pc, #372]	; (800109c <HAL_GPIO_Init+0x30c>)
 8000f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f32:	4a5b      	ldr	r2, [pc, #364]	; (80010a0 <HAL_GPIO_Init+0x310>)
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	089b      	lsrs	r3, r3, #2
 8000f38:	3302      	adds	r3, #2
 8000f3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	f003 0303 	and.w	r3, r3, #3
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	220f      	movs	r2, #15
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	4013      	ands	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a52      	ldr	r2, [pc, #328]	; (80010a4 <HAL_GPIO_Init+0x314>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d02b      	beq.n	8000fb6 <HAL_GPIO_Init+0x226>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a51      	ldr	r2, [pc, #324]	; (80010a8 <HAL_GPIO_Init+0x318>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d025      	beq.n	8000fb2 <HAL_GPIO_Init+0x222>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a50      	ldr	r2, [pc, #320]	; (80010ac <HAL_GPIO_Init+0x31c>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d01f      	beq.n	8000fae <HAL_GPIO_Init+0x21e>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a4f      	ldr	r2, [pc, #316]	; (80010b0 <HAL_GPIO_Init+0x320>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d019      	beq.n	8000faa <HAL_GPIO_Init+0x21a>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a4e      	ldr	r2, [pc, #312]	; (80010b4 <HAL_GPIO_Init+0x324>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d013      	beq.n	8000fa6 <HAL_GPIO_Init+0x216>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a4d      	ldr	r2, [pc, #308]	; (80010b8 <HAL_GPIO_Init+0x328>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d00d      	beq.n	8000fa2 <HAL_GPIO_Init+0x212>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a4c      	ldr	r2, [pc, #304]	; (80010bc <HAL_GPIO_Init+0x32c>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d007      	beq.n	8000f9e <HAL_GPIO_Init+0x20e>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a4b      	ldr	r2, [pc, #300]	; (80010c0 <HAL_GPIO_Init+0x330>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d101      	bne.n	8000f9a <HAL_GPIO_Init+0x20a>
 8000f96:	2307      	movs	r3, #7
 8000f98:	e00e      	b.n	8000fb8 <HAL_GPIO_Init+0x228>
 8000f9a:	2308      	movs	r3, #8
 8000f9c:	e00c      	b.n	8000fb8 <HAL_GPIO_Init+0x228>
 8000f9e:	2306      	movs	r3, #6
 8000fa0:	e00a      	b.n	8000fb8 <HAL_GPIO_Init+0x228>
 8000fa2:	2305      	movs	r3, #5
 8000fa4:	e008      	b.n	8000fb8 <HAL_GPIO_Init+0x228>
 8000fa6:	2304      	movs	r3, #4
 8000fa8:	e006      	b.n	8000fb8 <HAL_GPIO_Init+0x228>
 8000faa:	2303      	movs	r3, #3
 8000fac:	e004      	b.n	8000fb8 <HAL_GPIO_Init+0x228>
 8000fae:	2302      	movs	r3, #2
 8000fb0:	e002      	b.n	8000fb8 <HAL_GPIO_Init+0x228>
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e000      	b.n	8000fb8 <HAL_GPIO_Init+0x228>
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	69fa      	ldr	r2, [r7, #28]
 8000fba:	f002 0203 	and.w	r2, r2, #3
 8000fbe:	0092      	lsls	r2, r2, #2
 8000fc0:	4093      	lsls	r3, r2
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fc8:	4935      	ldr	r1, [pc, #212]	; (80010a0 <HAL_GPIO_Init+0x310>)
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	089b      	lsrs	r3, r3, #2
 8000fce:	3302      	adds	r3, #2
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fd6:	4b3b      	ldr	r3, [pc, #236]	; (80010c4 <HAL_GPIO_Init+0x334>)
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d003      	beq.n	8000ffa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ffa:	4a32      	ldr	r2, [pc, #200]	; (80010c4 <HAL_GPIO_Init+0x334>)
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001000:	4b30      	ldr	r3, [pc, #192]	; (80010c4 <HAL_GPIO_Init+0x334>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	43db      	mvns	r3, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4013      	ands	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d003      	beq.n	8001024 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	4313      	orrs	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001024:	4a27      	ldr	r2, [pc, #156]	; (80010c4 <HAL_GPIO_Init+0x334>)
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800102a:	4b26      	ldr	r3, [pc, #152]	; (80010c4 <HAL_GPIO_Init+0x334>)
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	43db      	mvns	r3, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4013      	ands	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d003      	beq.n	800104e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	4313      	orrs	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800104e:	4a1d      	ldr	r2, [pc, #116]	; (80010c4 <HAL_GPIO_Init+0x334>)
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001054:	4b1b      	ldr	r3, [pc, #108]	; (80010c4 <HAL_GPIO_Init+0x334>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	43db      	mvns	r3, r3
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4013      	ands	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800106c:	2b00      	cmp	r3, #0
 800106e:	d003      	beq.n	8001078 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	4313      	orrs	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001078:	4a12      	ldr	r2, [pc, #72]	; (80010c4 <HAL_GPIO_Init+0x334>)
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3301      	adds	r3, #1
 8001082:	61fb      	str	r3, [r7, #28]
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	2b0f      	cmp	r3, #15
 8001088:	f67f ae90 	bls.w	8000dac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800108c:	bf00      	nop
 800108e:	bf00      	nop
 8001090:	3724      	adds	r7, #36	; 0x24
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	40023800 	.word	0x40023800
 80010a0:	40013800 	.word	0x40013800
 80010a4:	40020000 	.word	0x40020000
 80010a8:	40020400 	.word	0x40020400
 80010ac:	40020800 	.word	0x40020800
 80010b0:	40020c00 	.word	0x40020c00
 80010b4:	40021000 	.word	0x40021000
 80010b8:	40021400 	.word	0x40021400
 80010bc:	40021800 	.word	0x40021800
 80010c0:	40021c00 	.word	0x40021c00
 80010c4:	40013c00 	.word	0x40013c00

080010c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	460b      	mov	r3, r1
 80010d2:	807b      	strh	r3, [r7, #2]
 80010d4:	4613      	mov	r3, r2
 80010d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010d8:	787b      	ldrb	r3, [r7, #1]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d003      	beq.n	80010e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010de:	887a      	ldrh	r2, [r7, #2]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010e4:	e003      	b.n	80010ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010e6:	887b      	ldrh	r3, [r7, #2]
 80010e8:	041a      	lsls	r2, r3, #16
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	619a      	str	r2, [r3, #24]
}
 80010ee:	bf00      	nop
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
	...

080010fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d101      	bne.n	800110e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e267      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	2b00      	cmp	r3, #0
 8001118:	d075      	beq.n	8001206 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800111a:	4b88      	ldr	r3, [pc, #544]	; (800133c <HAL_RCC_OscConfig+0x240>)
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	f003 030c 	and.w	r3, r3, #12
 8001122:	2b04      	cmp	r3, #4
 8001124:	d00c      	beq.n	8001140 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001126:	4b85      	ldr	r3, [pc, #532]	; (800133c <HAL_RCC_OscConfig+0x240>)
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800112e:	2b08      	cmp	r3, #8
 8001130:	d112      	bne.n	8001158 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001132:	4b82      	ldr	r3, [pc, #520]	; (800133c <HAL_RCC_OscConfig+0x240>)
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800113a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800113e:	d10b      	bne.n	8001158 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001140:	4b7e      	ldr	r3, [pc, #504]	; (800133c <HAL_RCC_OscConfig+0x240>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d05b      	beq.n	8001204 <HAL_RCC_OscConfig+0x108>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d157      	bne.n	8001204 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e242      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001160:	d106      	bne.n	8001170 <HAL_RCC_OscConfig+0x74>
 8001162:	4b76      	ldr	r3, [pc, #472]	; (800133c <HAL_RCC_OscConfig+0x240>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a75      	ldr	r2, [pc, #468]	; (800133c <HAL_RCC_OscConfig+0x240>)
 8001168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800116c:	6013      	str	r3, [r2, #0]
 800116e:	e01d      	b.n	80011ac <HAL_RCC_OscConfig+0xb0>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001178:	d10c      	bne.n	8001194 <HAL_RCC_OscConfig+0x98>
 800117a:	4b70      	ldr	r3, [pc, #448]	; (800133c <HAL_RCC_OscConfig+0x240>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a6f      	ldr	r2, [pc, #444]	; (800133c <HAL_RCC_OscConfig+0x240>)
 8001180:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001184:	6013      	str	r3, [r2, #0]
 8001186:	4b6d      	ldr	r3, [pc, #436]	; (800133c <HAL_RCC_OscConfig+0x240>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a6c      	ldr	r2, [pc, #432]	; (800133c <HAL_RCC_OscConfig+0x240>)
 800118c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001190:	6013      	str	r3, [r2, #0]
 8001192:	e00b      	b.n	80011ac <HAL_RCC_OscConfig+0xb0>
 8001194:	4b69      	ldr	r3, [pc, #420]	; (800133c <HAL_RCC_OscConfig+0x240>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a68      	ldr	r2, [pc, #416]	; (800133c <HAL_RCC_OscConfig+0x240>)
 800119a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800119e:	6013      	str	r3, [r2, #0]
 80011a0:	4b66      	ldr	r3, [pc, #408]	; (800133c <HAL_RCC_OscConfig+0x240>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a65      	ldr	r2, [pc, #404]	; (800133c <HAL_RCC_OscConfig+0x240>)
 80011a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d013      	beq.n	80011dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b4:	f7ff fcd6 	bl	8000b64 <HAL_GetTick>
 80011b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ba:	e008      	b.n	80011ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011bc:	f7ff fcd2 	bl	8000b64 <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	2b64      	cmp	r3, #100	; 0x64
 80011c8:	d901      	bls.n	80011ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e207      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ce:	4b5b      	ldr	r3, [pc, #364]	; (800133c <HAL_RCC_OscConfig+0x240>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d0f0      	beq.n	80011bc <HAL_RCC_OscConfig+0xc0>
 80011da:	e014      	b.n	8001206 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011dc:	f7ff fcc2 	bl	8000b64 <HAL_GetTick>
 80011e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011e2:	e008      	b.n	80011f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011e4:	f7ff fcbe 	bl	8000b64 <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	2b64      	cmp	r3, #100	; 0x64
 80011f0:	d901      	bls.n	80011f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e1f3      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011f6:	4b51      	ldr	r3, [pc, #324]	; (800133c <HAL_RCC_OscConfig+0x240>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d1f0      	bne.n	80011e4 <HAL_RCC_OscConfig+0xe8>
 8001202:	e000      	b.n	8001206 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001204:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d063      	beq.n	80012da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001212:	4b4a      	ldr	r3, [pc, #296]	; (800133c <HAL_RCC_OscConfig+0x240>)
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	f003 030c 	and.w	r3, r3, #12
 800121a:	2b00      	cmp	r3, #0
 800121c:	d00b      	beq.n	8001236 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800121e:	4b47      	ldr	r3, [pc, #284]	; (800133c <HAL_RCC_OscConfig+0x240>)
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001226:	2b08      	cmp	r3, #8
 8001228:	d11c      	bne.n	8001264 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800122a:	4b44      	ldr	r3, [pc, #272]	; (800133c <HAL_RCC_OscConfig+0x240>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d116      	bne.n	8001264 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001236:	4b41      	ldr	r3, [pc, #260]	; (800133c <HAL_RCC_OscConfig+0x240>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	2b00      	cmp	r3, #0
 8001240:	d005      	beq.n	800124e <HAL_RCC_OscConfig+0x152>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d001      	beq.n	800124e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e1c7      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800124e:	4b3b      	ldr	r3, [pc, #236]	; (800133c <HAL_RCC_OscConfig+0x240>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	691b      	ldr	r3, [r3, #16]
 800125a:	00db      	lsls	r3, r3, #3
 800125c:	4937      	ldr	r1, [pc, #220]	; (800133c <HAL_RCC_OscConfig+0x240>)
 800125e:	4313      	orrs	r3, r2
 8001260:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001262:	e03a      	b.n	80012da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d020      	beq.n	80012ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800126c:	4b34      	ldr	r3, [pc, #208]	; (8001340 <HAL_RCC_OscConfig+0x244>)
 800126e:	2201      	movs	r2, #1
 8001270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001272:	f7ff fc77 	bl	8000b64 <HAL_GetTick>
 8001276:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001278:	e008      	b.n	800128c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800127a:	f7ff fc73 	bl	8000b64 <HAL_GetTick>
 800127e:	4602      	mov	r2, r0
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	2b02      	cmp	r3, #2
 8001286:	d901      	bls.n	800128c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e1a8      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800128c:	4b2b      	ldr	r3, [pc, #172]	; (800133c <HAL_RCC_OscConfig+0x240>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f003 0302 	and.w	r3, r3, #2
 8001294:	2b00      	cmp	r3, #0
 8001296:	d0f0      	beq.n	800127a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001298:	4b28      	ldr	r3, [pc, #160]	; (800133c <HAL_RCC_OscConfig+0x240>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	691b      	ldr	r3, [r3, #16]
 80012a4:	00db      	lsls	r3, r3, #3
 80012a6:	4925      	ldr	r1, [pc, #148]	; (800133c <HAL_RCC_OscConfig+0x240>)
 80012a8:	4313      	orrs	r3, r2
 80012aa:	600b      	str	r3, [r1, #0]
 80012ac:	e015      	b.n	80012da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012ae:	4b24      	ldr	r3, [pc, #144]	; (8001340 <HAL_RCC_OscConfig+0x244>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012b4:	f7ff fc56 	bl	8000b64 <HAL_GetTick>
 80012b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ba:	e008      	b.n	80012ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012bc:	f7ff fc52 	bl	8000b64 <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d901      	bls.n	80012ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e187      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ce:	4b1b      	ldr	r3, [pc, #108]	; (800133c <HAL_RCC_OscConfig+0x240>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1f0      	bne.n	80012bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0308 	and.w	r3, r3, #8
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d036      	beq.n	8001354 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	695b      	ldr	r3, [r3, #20]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d016      	beq.n	800131c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012ee:	4b15      	ldr	r3, [pc, #84]	; (8001344 <HAL_RCC_OscConfig+0x248>)
 80012f0:	2201      	movs	r2, #1
 80012f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012f4:	f7ff fc36 	bl	8000b64 <HAL_GetTick>
 80012f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012fa:	e008      	b.n	800130e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012fc:	f7ff fc32 	bl	8000b64 <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	2b02      	cmp	r3, #2
 8001308:	d901      	bls.n	800130e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e167      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800130e:	4b0b      	ldr	r3, [pc, #44]	; (800133c <HAL_RCC_OscConfig+0x240>)
 8001310:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	2b00      	cmp	r3, #0
 8001318:	d0f0      	beq.n	80012fc <HAL_RCC_OscConfig+0x200>
 800131a:	e01b      	b.n	8001354 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800131c:	4b09      	ldr	r3, [pc, #36]	; (8001344 <HAL_RCC_OscConfig+0x248>)
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001322:	f7ff fc1f 	bl	8000b64 <HAL_GetTick>
 8001326:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001328:	e00e      	b.n	8001348 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800132a:	f7ff fc1b 	bl	8000b64 <HAL_GetTick>
 800132e:	4602      	mov	r2, r0
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	2b02      	cmp	r3, #2
 8001336:	d907      	bls.n	8001348 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001338:	2303      	movs	r3, #3
 800133a:	e150      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
 800133c:	40023800 	.word	0x40023800
 8001340:	42470000 	.word	0x42470000
 8001344:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001348:	4b88      	ldr	r3, [pc, #544]	; (800156c <HAL_RCC_OscConfig+0x470>)
 800134a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800134c:	f003 0302 	and.w	r3, r3, #2
 8001350:	2b00      	cmp	r3, #0
 8001352:	d1ea      	bne.n	800132a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 0304 	and.w	r3, r3, #4
 800135c:	2b00      	cmp	r3, #0
 800135e:	f000 8097 	beq.w	8001490 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001362:	2300      	movs	r3, #0
 8001364:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001366:	4b81      	ldr	r3, [pc, #516]	; (800156c <HAL_RCC_OscConfig+0x470>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d10f      	bne.n	8001392 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	60bb      	str	r3, [r7, #8]
 8001376:	4b7d      	ldr	r3, [pc, #500]	; (800156c <HAL_RCC_OscConfig+0x470>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	4a7c      	ldr	r2, [pc, #496]	; (800156c <HAL_RCC_OscConfig+0x470>)
 800137c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001380:	6413      	str	r3, [r2, #64]	; 0x40
 8001382:	4b7a      	ldr	r3, [pc, #488]	; (800156c <HAL_RCC_OscConfig+0x470>)
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138a:	60bb      	str	r3, [r7, #8]
 800138c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800138e:	2301      	movs	r3, #1
 8001390:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001392:	4b77      	ldr	r3, [pc, #476]	; (8001570 <HAL_RCC_OscConfig+0x474>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800139a:	2b00      	cmp	r3, #0
 800139c:	d118      	bne.n	80013d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800139e:	4b74      	ldr	r3, [pc, #464]	; (8001570 <HAL_RCC_OscConfig+0x474>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a73      	ldr	r2, [pc, #460]	; (8001570 <HAL_RCC_OscConfig+0x474>)
 80013a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013aa:	f7ff fbdb 	bl	8000b64 <HAL_GetTick>
 80013ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b0:	e008      	b.n	80013c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013b2:	f7ff fbd7 	bl	8000b64 <HAL_GetTick>
 80013b6:	4602      	mov	r2, r0
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d901      	bls.n	80013c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80013c0:	2303      	movs	r3, #3
 80013c2:	e10c      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013c4:	4b6a      	ldr	r3, [pc, #424]	; (8001570 <HAL_RCC_OscConfig+0x474>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d0f0      	beq.n	80013b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d106      	bne.n	80013e6 <HAL_RCC_OscConfig+0x2ea>
 80013d8:	4b64      	ldr	r3, [pc, #400]	; (800156c <HAL_RCC_OscConfig+0x470>)
 80013da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013dc:	4a63      	ldr	r2, [pc, #396]	; (800156c <HAL_RCC_OscConfig+0x470>)
 80013de:	f043 0301 	orr.w	r3, r3, #1
 80013e2:	6713      	str	r3, [r2, #112]	; 0x70
 80013e4:	e01c      	b.n	8001420 <HAL_RCC_OscConfig+0x324>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	2b05      	cmp	r3, #5
 80013ec:	d10c      	bne.n	8001408 <HAL_RCC_OscConfig+0x30c>
 80013ee:	4b5f      	ldr	r3, [pc, #380]	; (800156c <HAL_RCC_OscConfig+0x470>)
 80013f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013f2:	4a5e      	ldr	r2, [pc, #376]	; (800156c <HAL_RCC_OscConfig+0x470>)
 80013f4:	f043 0304 	orr.w	r3, r3, #4
 80013f8:	6713      	str	r3, [r2, #112]	; 0x70
 80013fa:	4b5c      	ldr	r3, [pc, #368]	; (800156c <HAL_RCC_OscConfig+0x470>)
 80013fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013fe:	4a5b      	ldr	r2, [pc, #364]	; (800156c <HAL_RCC_OscConfig+0x470>)
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	6713      	str	r3, [r2, #112]	; 0x70
 8001406:	e00b      	b.n	8001420 <HAL_RCC_OscConfig+0x324>
 8001408:	4b58      	ldr	r3, [pc, #352]	; (800156c <HAL_RCC_OscConfig+0x470>)
 800140a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800140c:	4a57      	ldr	r2, [pc, #348]	; (800156c <HAL_RCC_OscConfig+0x470>)
 800140e:	f023 0301 	bic.w	r3, r3, #1
 8001412:	6713      	str	r3, [r2, #112]	; 0x70
 8001414:	4b55      	ldr	r3, [pc, #340]	; (800156c <HAL_RCC_OscConfig+0x470>)
 8001416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001418:	4a54      	ldr	r2, [pc, #336]	; (800156c <HAL_RCC_OscConfig+0x470>)
 800141a:	f023 0304 	bic.w	r3, r3, #4
 800141e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d015      	beq.n	8001454 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001428:	f7ff fb9c 	bl	8000b64 <HAL_GetTick>
 800142c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800142e:	e00a      	b.n	8001446 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001430:	f7ff fb98 	bl	8000b64 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	f241 3288 	movw	r2, #5000	; 0x1388
 800143e:	4293      	cmp	r3, r2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e0cb      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001446:	4b49      	ldr	r3, [pc, #292]	; (800156c <HAL_RCC_OscConfig+0x470>)
 8001448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d0ee      	beq.n	8001430 <HAL_RCC_OscConfig+0x334>
 8001452:	e014      	b.n	800147e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001454:	f7ff fb86 	bl	8000b64 <HAL_GetTick>
 8001458:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800145a:	e00a      	b.n	8001472 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800145c:	f7ff fb82 	bl	8000b64 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	f241 3288 	movw	r2, #5000	; 0x1388
 800146a:	4293      	cmp	r3, r2
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e0b5      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001472:	4b3e      	ldr	r3, [pc, #248]	; (800156c <HAL_RCC_OscConfig+0x470>)
 8001474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d1ee      	bne.n	800145c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800147e:	7dfb      	ldrb	r3, [r7, #23]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d105      	bne.n	8001490 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001484:	4b39      	ldr	r3, [pc, #228]	; (800156c <HAL_RCC_OscConfig+0x470>)
 8001486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001488:	4a38      	ldr	r2, [pc, #224]	; (800156c <HAL_RCC_OscConfig+0x470>)
 800148a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800148e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	2b00      	cmp	r3, #0
 8001496:	f000 80a1 	beq.w	80015dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800149a:	4b34      	ldr	r3, [pc, #208]	; (800156c <HAL_RCC_OscConfig+0x470>)
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	f003 030c 	and.w	r3, r3, #12
 80014a2:	2b08      	cmp	r3, #8
 80014a4:	d05c      	beq.n	8001560 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	699b      	ldr	r3, [r3, #24]
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d141      	bne.n	8001532 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014ae:	4b31      	ldr	r3, [pc, #196]	; (8001574 <HAL_RCC_OscConfig+0x478>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b4:	f7ff fb56 	bl	8000b64 <HAL_GetTick>
 80014b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ba:	e008      	b.n	80014ce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014bc:	f7ff fb52 	bl	8000b64 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e087      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ce:	4b27      	ldr	r3, [pc, #156]	; (800156c <HAL_RCC_OscConfig+0x470>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d1f0      	bne.n	80014bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	69da      	ldr	r2, [r3, #28]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6a1b      	ldr	r3, [r3, #32]
 80014e2:	431a      	orrs	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e8:	019b      	lsls	r3, r3, #6
 80014ea:	431a      	orrs	r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f0:	085b      	lsrs	r3, r3, #1
 80014f2:	3b01      	subs	r3, #1
 80014f4:	041b      	lsls	r3, r3, #16
 80014f6:	431a      	orrs	r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014fc:	061b      	lsls	r3, r3, #24
 80014fe:	491b      	ldr	r1, [pc, #108]	; (800156c <HAL_RCC_OscConfig+0x470>)
 8001500:	4313      	orrs	r3, r2
 8001502:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001504:	4b1b      	ldr	r3, [pc, #108]	; (8001574 <HAL_RCC_OscConfig+0x478>)
 8001506:	2201      	movs	r2, #1
 8001508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800150a:	f7ff fb2b 	bl	8000b64 <HAL_GetTick>
 800150e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001510:	e008      	b.n	8001524 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001512:	f7ff fb27 	bl	8000b64 <HAL_GetTick>
 8001516:	4602      	mov	r2, r0
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	2b02      	cmp	r3, #2
 800151e:	d901      	bls.n	8001524 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e05c      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001524:	4b11      	ldr	r3, [pc, #68]	; (800156c <HAL_RCC_OscConfig+0x470>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d0f0      	beq.n	8001512 <HAL_RCC_OscConfig+0x416>
 8001530:	e054      	b.n	80015dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001532:	4b10      	ldr	r3, [pc, #64]	; (8001574 <HAL_RCC_OscConfig+0x478>)
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001538:	f7ff fb14 	bl	8000b64 <HAL_GetTick>
 800153c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800153e:	e008      	b.n	8001552 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001540:	f7ff fb10 	bl	8000b64 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b02      	cmp	r3, #2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e045      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001552:	4b06      	ldr	r3, [pc, #24]	; (800156c <HAL_RCC_OscConfig+0x470>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1f0      	bne.n	8001540 <HAL_RCC_OscConfig+0x444>
 800155e:	e03d      	b.n	80015dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d107      	bne.n	8001578 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e038      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
 800156c:	40023800 	.word	0x40023800
 8001570:	40007000 	.word	0x40007000
 8001574:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001578:	4b1b      	ldr	r3, [pc, #108]	; (80015e8 <HAL_RCC_OscConfig+0x4ec>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	699b      	ldr	r3, [r3, #24]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d028      	beq.n	80015d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001590:	429a      	cmp	r2, r3
 8001592:	d121      	bne.n	80015d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800159e:	429a      	cmp	r2, r3
 80015a0:	d11a      	bne.n	80015d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015a2:	68fa      	ldr	r2, [r7, #12]
 80015a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015a8:	4013      	ands	r3, r2
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80015ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d111      	bne.n	80015d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015be:	085b      	lsrs	r3, r3, #1
 80015c0:	3b01      	subs	r3, #1
 80015c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d107      	bne.n	80015d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d001      	beq.n	80015dc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e000      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3718      	adds	r7, #24
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40023800 	.word	0x40023800

080015ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d101      	bne.n	8001600 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e0cc      	b.n	800179a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001600:	4b68      	ldr	r3, [pc, #416]	; (80017a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0307 	and.w	r3, r3, #7
 8001608:	683a      	ldr	r2, [r7, #0]
 800160a:	429a      	cmp	r2, r3
 800160c:	d90c      	bls.n	8001628 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800160e:	4b65      	ldr	r3, [pc, #404]	; (80017a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001610:	683a      	ldr	r2, [r7, #0]
 8001612:	b2d2      	uxtb	r2, r2
 8001614:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001616:	4b63      	ldr	r3, [pc, #396]	; (80017a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0307 	and.w	r3, r3, #7
 800161e:	683a      	ldr	r2, [r7, #0]
 8001620:	429a      	cmp	r2, r3
 8001622:	d001      	beq.n	8001628 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e0b8      	b.n	800179a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0302 	and.w	r3, r3, #2
 8001630:	2b00      	cmp	r3, #0
 8001632:	d020      	beq.n	8001676 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0304 	and.w	r3, r3, #4
 800163c:	2b00      	cmp	r3, #0
 800163e:	d005      	beq.n	800164c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001640:	4b59      	ldr	r3, [pc, #356]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	4a58      	ldr	r2, [pc, #352]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001646:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800164a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0308 	and.w	r3, r3, #8
 8001654:	2b00      	cmp	r3, #0
 8001656:	d005      	beq.n	8001664 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001658:	4b53      	ldr	r3, [pc, #332]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	4a52      	ldr	r2, [pc, #328]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 800165e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001662:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001664:	4b50      	ldr	r3, [pc, #320]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	494d      	ldr	r1, [pc, #308]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001672:	4313      	orrs	r3, r2
 8001674:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	2b00      	cmp	r3, #0
 8001680:	d044      	beq.n	800170c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d107      	bne.n	800169a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800168a:	4b47      	ldr	r3, [pc, #284]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d119      	bne.n	80016ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e07f      	b.n	800179a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d003      	beq.n	80016aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016a6:	2b03      	cmp	r3, #3
 80016a8:	d107      	bne.n	80016ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016aa:	4b3f      	ldr	r3, [pc, #252]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d109      	bne.n	80016ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e06f      	b.n	800179a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ba:	4b3b      	ldr	r3, [pc, #236]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d101      	bne.n	80016ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e067      	b.n	800179a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016ca:	4b37      	ldr	r3, [pc, #220]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f023 0203 	bic.w	r2, r3, #3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	4934      	ldr	r1, [pc, #208]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 80016d8:	4313      	orrs	r3, r2
 80016da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016dc:	f7ff fa42 	bl	8000b64 <HAL_GetTick>
 80016e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016e2:	e00a      	b.n	80016fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016e4:	f7ff fa3e 	bl	8000b64 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e04f      	b.n	800179a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016fa:	4b2b      	ldr	r3, [pc, #172]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	f003 020c 	and.w	r2, r3, #12
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	429a      	cmp	r2, r3
 800170a:	d1eb      	bne.n	80016e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800170c:	4b25      	ldr	r3, [pc, #148]	; (80017a4 <HAL_RCC_ClockConfig+0x1b8>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0307 	and.w	r3, r3, #7
 8001714:	683a      	ldr	r2, [r7, #0]
 8001716:	429a      	cmp	r2, r3
 8001718:	d20c      	bcs.n	8001734 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800171a:	4b22      	ldr	r3, [pc, #136]	; (80017a4 <HAL_RCC_ClockConfig+0x1b8>)
 800171c:	683a      	ldr	r2, [r7, #0]
 800171e:	b2d2      	uxtb	r2, r2
 8001720:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001722:	4b20      	ldr	r3, [pc, #128]	; (80017a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	683a      	ldr	r2, [r7, #0]
 800172c:	429a      	cmp	r2, r3
 800172e:	d001      	beq.n	8001734 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e032      	b.n	800179a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0304 	and.w	r3, r3, #4
 800173c:	2b00      	cmp	r3, #0
 800173e:	d008      	beq.n	8001752 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001740:	4b19      	ldr	r3, [pc, #100]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	4916      	ldr	r1, [pc, #88]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 800174e:	4313      	orrs	r3, r2
 8001750:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0308 	and.w	r3, r3, #8
 800175a:	2b00      	cmp	r3, #0
 800175c:	d009      	beq.n	8001772 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800175e:	4b12      	ldr	r3, [pc, #72]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	691b      	ldr	r3, [r3, #16]
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	490e      	ldr	r1, [pc, #56]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 800176e:	4313      	orrs	r3, r2
 8001770:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001772:	f000 f821 	bl	80017b8 <HAL_RCC_GetSysClockFreq>
 8001776:	4602      	mov	r2, r0
 8001778:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	091b      	lsrs	r3, r3, #4
 800177e:	f003 030f 	and.w	r3, r3, #15
 8001782:	490a      	ldr	r1, [pc, #40]	; (80017ac <HAL_RCC_ClockConfig+0x1c0>)
 8001784:	5ccb      	ldrb	r3, [r1, r3]
 8001786:	fa22 f303 	lsr.w	r3, r2, r3
 800178a:	4a09      	ldr	r2, [pc, #36]	; (80017b0 <HAL_RCC_ClockConfig+0x1c4>)
 800178c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800178e:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <HAL_RCC_ClockConfig+0x1c8>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff f9a2 	bl	8000adc <HAL_InitTick>

  return HAL_OK;
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40023c00 	.word	0x40023c00
 80017a8:	40023800 	.word	0x40023800
 80017ac:	0800374c 	.word	0x0800374c
 80017b0:	20000000 	.word	0x20000000
 80017b4:	20000004 	.word	0x20000004

080017b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017bc:	b094      	sub	sp, #80	; 0x50
 80017be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80017c0:	2300      	movs	r3, #0
 80017c2:	647b      	str	r3, [r7, #68]	; 0x44
 80017c4:	2300      	movs	r3, #0
 80017c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80017c8:	2300      	movs	r3, #0
 80017ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80017cc:	2300      	movs	r3, #0
 80017ce:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017d0:	4b79      	ldr	r3, [pc, #484]	; (80019b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f003 030c 	and.w	r3, r3, #12
 80017d8:	2b08      	cmp	r3, #8
 80017da:	d00d      	beq.n	80017f8 <HAL_RCC_GetSysClockFreq+0x40>
 80017dc:	2b08      	cmp	r3, #8
 80017de:	f200 80e1 	bhi.w	80019a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d002      	beq.n	80017ec <HAL_RCC_GetSysClockFreq+0x34>
 80017e6:	2b04      	cmp	r3, #4
 80017e8:	d003      	beq.n	80017f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80017ea:	e0db      	b.n	80019a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017ec:	4b73      	ldr	r3, [pc, #460]	; (80019bc <HAL_RCC_GetSysClockFreq+0x204>)
 80017ee:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80017f0:	e0db      	b.n	80019aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017f2:	4b73      	ldr	r3, [pc, #460]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x208>)
 80017f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80017f6:	e0d8      	b.n	80019aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017f8:	4b6f      	ldr	r3, [pc, #444]	; (80019b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001800:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001802:	4b6d      	ldr	r3, [pc, #436]	; (80019b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d063      	beq.n	80018d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800180e:	4b6a      	ldr	r3, [pc, #424]	; (80019b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	099b      	lsrs	r3, r3, #6
 8001814:	2200      	movs	r2, #0
 8001816:	63bb      	str	r3, [r7, #56]	; 0x38
 8001818:	63fa      	str	r2, [r7, #60]	; 0x3c
 800181a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800181c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001820:	633b      	str	r3, [r7, #48]	; 0x30
 8001822:	2300      	movs	r3, #0
 8001824:	637b      	str	r3, [r7, #52]	; 0x34
 8001826:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800182a:	4622      	mov	r2, r4
 800182c:	462b      	mov	r3, r5
 800182e:	f04f 0000 	mov.w	r0, #0
 8001832:	f04f 0100 	mov.w	r1, #0
 8001836:	0159      	lsls	r1, r3, #5
 8001838:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800183c:	0150      	lsls	r0, r2, #5
 800183e:	4602      	mov	r2, r0
 8001840:	460b      	mov	r3, r1
 8001842:	4621      	mov	r1, r4
 8001844:	1a51      	subs	r1, r2, r1
 8001846:	6139      	str	r1, [r7, #16]
 8001848:	4629      	mov	r1, r5
 800184a:	eb63 0301 	sbc.w	r3, r3, r1
 800184e:	617b      	str	r3, [r7, #20]
 8001850:	f04f 0200 	mov.w	r2, #0
 8001854:	f04f 0300 	mov.w	r3, #0
 8001858:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800185c:	4659      	mov	r1, fp
 800185e:	018b      	lsls	r3, r1, #6
 8001860:	4651      	mov	r1, sl
 8001862:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001866:	4651      	mov	r1, sl
 8001868:	018a      	lsls	r2, r1, #6
 800186a:	4651      	mov	r1, sl
 800186c:	ebb2 0801 	subs.w	r8, r2, r1
 8001870:	4659      	mov	r1, fp
 8001872:	eb63 0901 	sbc.w	r9, r3, r1
 8001876:	f04f 0200 	mov.w	r2, #0
 800187a:	f04f 0300 	mov.w	r3, #0
 800187e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001882:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001886:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800188a:	4690      	mov	r8, r2
 800188c:	4699      	mov	r9, r3
 800188e:	4623      	mov	r3, r4
 8001890:	eb18 0303 	adds.w	r3, r8, r3
 8001894:	60bb      	str	r3, [r7, #8]
 8001896:	462b      	mov	r3, r5
 8001898:	eb49 0303 	adc.w	r3, r9, r3
 800189c:	60fb      	str	r3, [r7, #12]
 800189e:	f04f 0200 	mov.w	r2, #0
 80018a2:	f04f 0300 	mov.w	r3, #0
 80018a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80018aa:	4629      	mov	r1, r5
 80018ac:	024b      	lsls	r3, r1, #9
 80018ae:	4621      	mov	r1, r4
 80018b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80018b4:	4621      	mov	r1, r4
 80018b6:	024a      	lsls	r2, r1, #9
 80018b8:	4610      	mov	r0, r2
 80018ba:	4619      	mov	r1, r3
 80018bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018be:	2200      	movs	r2, #0
 80018c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80018c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80018c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80018c8:	f7fe fc7e 	bl	80001c8 <__aeabi_uldivmod>
 80018cc:	4602      	mov	r2, r0
 80018ce:	460b      	mov	r3, r1
 80018d0:	4613      	mov	r3, r2
 80018d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018d4:	e058      	b.n	8001988 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018d6:	4b38      	ldr	r3, [pc, #224]	; (80019b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	099b      	lsrs	r3, r3, #6
 80018dc:	2200      	movs	r2, #0
 80018de:	4618      	mov	r0, r3
 80018e0:	4611      	mov	r1, r2
 80018e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80018e6:	623b      	str	r3, [r7, #32]
 80018e8:	2300      	movs	r3, #0
 80018ea:	627b      	str	r3, [r7, #36]	; 0x24
 80018ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80018f0:	4642      	mov	r2, r8
 80018f2:	464b      	mov	r3, r9
 80018f4:	f04f 0000 	mov.w	r0, #0
 80018f8:	f04f 0100 	mov.w	r1, #0
 80018fc:	0159      	lsls	r1, r3, #5
 80018fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001902:	0150      	lsls	r0, r2, #5
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	4641      	mov	r1, r8
 800190a:	ebb2 0a01 	subs.w	sl, r2, r1
 800190e:	4649      	mov	r1, r9
 8001910:	eb63 0b01 	sbc.w	fp, r3, r1
 8001914:	f04f 0200 	mov.w	r2, #0
 8001918:	f04f 0300 	mov.w	r3, #0
 800191c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001920:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001924:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001928:	ebb2 040a 	subs.w	r4, r2, sl
 800192c:	eb63 050b 	sbc.w	r5, r3, fp
 8001930:	f04f 0200 	mov.w	r2, #0
 8001934:	f04f 0300 	mov.w	r3, #0
 8001938:	00eb      	lsls	r3, r5, #3
 800193a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800193e:	00e2      	lsls	r2, r4, #3
 8001940:	4614      	mov	r4, r2
 8001942:	461d      	mov	r5, r3
 8001944:	4643      	mov	r3, r8
 8001946:	18e3      	adds	r3, r4, r3
 8001948:	603b      	str	r3, [r7, #0]
 800194a:	464b      	mov	r3, r9
 800194c:	eb45 0303 	adc.w	r3, r5, r3
 8001950:	607b      	str	r3, [r7, #4]
 8001952:	f04f 0200 	mov.w	r2, #0
 8001956:	f04f 0300 	mov.w	r3, #0
 800195a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800195e:	4629      	mov	r1, r5
 8001960:	028b      	lsls	r3, r1, #10
 8001962:	4621      	mov	r1, r4
 8001964:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001968:	4621      	mov	r1, r4
 800196a:	028a      	lsls	r2, r1, #10
 800196c:	4610      	mov	r0, r2
 800196e:	4619      	mov	r1, r3
 8001970:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001972:	2200      	movs	r2, #0
 8001974:	61bb      	str	r3, [r7, #24]
 8001976:	61fa      	str	r2, [r7, #28]
 8001978:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800197c:	f7fe fc24 	bl	80001c8 <__aeabi_uldivmod>
 8001980:	4602      	mov	r2, r0
 8001982:	460b      	mov	r3, r1
 8001984:	4613      	mov	r3, r2
 8001986:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001988:	4b0b      	ldr	r3, [pc, #44]	; (80019b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	0c1b      	lsrs	r3, r3, #16
 800198e:	f003 0303 	and.w	r3, r3, #3
 8001992:	3301      	adds	r3, #1
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001998:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800199a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800199c:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019a2:	e002      	b.n	80019aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019a4:	4b05      	ldr	r3, [pc, #20]	; (80019bc <HAL_RCC_GetSysClockFreq+0x204>)
 80019a6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3750      	adds	r7, #80	; 0x50
 80019b0:	46bd      	mov	sp, r7
 80019b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019b6:	bf00      	nop
 80019b8:	40023800 	.word	0x40023800
 80019bc:	00f42400 	.word	0x00f42400
 80019c0:	007a1200 	.word	0x007a1200

080019c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d101      	bne.n	80019d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e07b      	b.n	8001ace <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d108      	bne.n	80019f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80019e6:	d009      	beq.n	80019fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	61da      	str	r2, [r3, #28]
 80019ee:	e005      	b.n	80019fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d106      	bne.n	8001a1c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f7fe ff90 	bl	800093c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2202      	movs	r2, #2
 8001a20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a32:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001a44:	431a      	orrs	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	691b      	ldr	r3, [r3, #16]
 8001a54:	f003 0302 	and.w	r3, r3, #2
 8001a58:	431a      	orrs	r2, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	695b      	ldr	r3, [r3, #20]
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	431a      	orrs	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a6c:	431a      	orrs	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	69db      	ldr	r3, [r3, #28]
 8001a72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a76:	431a      	orrs	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a1b      	ldr	r3, [r3, #32]
 8001a7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a80:	ea42 0103 	orr.w	r1, r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a88:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	430a      	orrs	r2, r1
 8001a92:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	0c1b      	lsrs	r3, r3, #16
 8001a9a:	f003 0104 	and.w	r1, r3, #4
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa2:	f003 0210 	and.w	r2, r3, #16
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	69da      	ldr	r2, [r3, #28]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001abc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b088      	sub	sp, #32
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	60f8      	str	r0, [r7, #12]
 8001ade:	60b9      	str	r1, [r7, #8]
 8001ae0:	603b      	str	r3, [r7, #0]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d101      	bne.n	8001af8 <HAL_SPI_Transmit+0x22>
 8001af4:	2302      	movs	r3, #2
 8001af6:	e126      	b.n	8001d46 <HAL_SPI_Transmit+0x270>
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001b00:	f7ff f830 	bl	8000b64 <HAL_GetTick>
 8001b04:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001b06:	88fb      	ldrh	r3, [r7, #6]
 8001b08:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d002      	beq.n	8001b1c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001b16:	2302      	movs	r3, #2
 8001b18:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001b1a:	e10b      	b.n	8001d34 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d002      	beq.n	8001b28 <HAL_SPI_Transmit+0x52>
 8001b22:	88fb      	ldrh	r3, [r7, #6]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d102      	bne.n	8001b2e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001b2c:	e102      	b.n	8001d34 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2203      	movs	r2, #3
 8001b32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	68ba      	ldr	r2, [r7, #8]
 8001b40:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	88fa      	ldrh	r2, [r7, #6]
 8001b46:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	88fa      	ldrh	r2, [r7, #6]
 8001b4c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2200      	movs	r2, #0
 8001b52:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2200      	movs	r2, #0
 8001b58:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2200      	movs	r2, #0
 8001b64:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b74:	d10f      	bne.n	8001b96 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b84:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b94:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ba0:	2b40      	cmp	r3, #64	; 0x40
 8001ba2:	d007      	beq.n	8001bb4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bb2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001bbc:	d14b      	bne.n	8001c56 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d002      	beq.n	8001bcc <HAL_SPI_Transmit+0xf6>
 8001bc6:	8afb      	ldrh	r3, [r7, #22]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d13e      	bne.n	8001c4a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd0:	881a      	ldrh	r2, [r3, #0]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bdc:	1c9a      	adds	r2, r3, #2
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	3b01      	subs	r3, #1
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001bf0:	e02b      	b.n	8001c4a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f003 0302 	and.w	r3, r3, #2
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d112      	bne.n	8001c26 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c04:	881a      	ldrh	r2, [r3, #0]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c10:	1c9a      	adds	r2, r3, #2
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	86da      	strh	r2, [r3, #54]	; 0x36
 8001c24:	e011      	b.n	8001c4a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001c26:	f7fe ff9d 	bl	8000b64 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d803      	bhi.n	8001c3e <HAL_SPI_Transmit+0x168>
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c3c:	d102      	bne.n	8001c44 <HAL_SPI_Transmit+0x16e>
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d102      	bne.n	8001c4a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001c48:	e074      	b.n	8001d34 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d1ce      	bne.n	8001bf2 <HAL_SPI_Transmit+0x11c>
 8001c54:	e04c      	b.n	8001cf0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d002      	beq.n	8001c64 <HAL_SPI_Transmit+0x18e>
 8001c5e:	8afb      	ldrh	r3, [r7, #22]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d140      	bne.n	8001ce6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	330c      	adds	r3, #12
 8001c6e:	7812      	ldrb	r2, [r2, #0]
 8001c70:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c76:	1c5a      	adds	r2, r3, #1
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	3b01      	subs	r3, #1
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001c8a:	e02c      	b.n	8001ce6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d113      	bne.n	8001cc2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	330c      	adds	r3, #12
 8001ca4:	7812      	ldrb	r2, [r2, #0]
 8001ca6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cac:	1c5a      	adds	r2, r3, #1
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	3b01      	subs	r3, #1
 8001cba:	b29a      	uxth	r2, r3
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	86da      	strh	r2, [r3, #54]	; 0x36
 8001cc0:	e011      	b.n	8001ce6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001cc2:	f7fe ff4f 	bl	8000b64 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	683a      	ldr	r2, [r7, #0]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d803      	bhi.n	8001cda <HAL_SPI_Transmit+0x204>
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cd8:	d102      	bne.n	8001ce0 <HAL_SPI_Transmit+0x20a>
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d102      	bne.n	8001ce6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001ce4:	e026      	b.n	8001d34 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1cd      	bne.n	8001c8c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	6839      	ldr	r1, [r7, #0]
 8001cf4:	68f8      	ldr	r0, [r7, #12]
 8001cf6:	f000 fbcb 	bl	8002490 <SPI_EndRxTxTransaction>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d002      	beq.n	8001d06 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2220      	movs	r2, #32
 8001d04:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d10a      	bne.n	8001d24 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001d0e:	2300      	movs	r3, #0
 8001d10:	613b      	str	r3, [r7, #16]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	613b      	str	r3, [r7, #16]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	613b      	str	r3, [r7, #16]
 8001d22:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d002      	beq.n	8001d32 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	77fb      	strb	r3, [r7, #31]
 8001d30:	e000      	b.n	8001d34 <HAL_SPI_Transmit+0x25e>
  }

error:
 8001d32:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001d44:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3720      	adds	r7, #32
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b088      	sub	sp, #32
 8001d52:	af02      	add	r7, sp, #8
 8001d54:	60f8      	str	r0, [r7, #12]
 8001d56:	60b9      	str	r1, [r7, #8]
 8001d58:	603b      	str	r3, [r7, #0]
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d6a:	d112      	bne.n	8001d92 <HAL_SPI_Receive+0x44>
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d10e      	bne.n	8001d92 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2204      	movs	r2, #4
 8001d78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001d7c:	88fa      	ldrh	r2, [r7, #6]
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	9300      	str	r3, [sp, #0]
 8001d82:	4613      	mov	r3, r2
 8001d84:	68ba      	ldr	r2, [r7, #8]
 8001d86:	68b9      	ldr	r1, [r7, #8]
 8001d88:	68f8      	ldr	r0, [r7, #12]
 8001d8a:	f000 f8f1 	bl	8001f70 <HAL_SPI_TransmitReceive>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	e0ea      	b.n	8001f68 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d101      	bne.n	8001da0 <HAL_SPI_Receive+0x52>
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	e0e3      	b.n	8001f68 <HAL_SPI_Receive+0x21a>
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001da8:	f7fe fedc 	bl	8000b64 <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d002      	beq.n	8001dc0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8001dba:	2302      	movs	r3, #2
 8001dbc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001dbe:	e0ca      	b.n	8001f56 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d002      	beq.n	8001dcc <HAL_SPI_Receive+0x7e>
 8001dc6:	88fb      	ldrh	r3, [r7, #6]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d102      	bne.n	8001dd2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001dd0:	e0c1      	b.n	8001f56 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2204      	movs	r2, #4
 8001dd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	68ba      	ldr	r2, [r7, #8]
 8001de4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	88fa      	ldrh	r2, [r7, #6]
 8001dea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	88fa      	ldrh	r2, [r7, #6]
 8001df0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2200      	movs	r2, #0
 8001df6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2200      	movs	r2, #0
 8001e02:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2200      	movs	r2, #0
 8001e08:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e18:	d10f      	bne.n	8001e3a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e28:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001e38:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e44:	2b40      	cmp	r3, #64	; 0x40
 8001e46:	d007      	beq.n	8001e58 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e56:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d162      	bne.n	8001f26 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001e60:	e02e      	b.n	8001ec0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d115      	bne.n	8001e9c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f103 020c 	add.w	r2, r3, #12
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e7c:	7812      	ldrb	r2, [r2, #0]
 8001e7e:	b2d2      	uxtb	r2, r2
 8001e80:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e86:	1c5a      	adds	r2, r3, #1
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	3b01      	subs	r3, #1
 8001e94:	b29a      	uxth	r2, r3
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001e9a:	e011      	b.n	8001ec0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e9c:	f7fe fe62 	bl	8000b64 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d803      	bhi.n	8001eb4 <HAL_SPI_Receive+0x166>
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eb2:	d102      	bne.n	8001eba <HAL_SPI_Receive+0x16c>
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d102      	bne.n	8001ec0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001ebe:	e04a      	b.n	8001f56 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1cb      	bne.n	8001e62 <HAL_SPI_Receive+0x114>
 8001eca:	e031      	b.n	8001f30 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d113      	bne.n	8001f02 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68da      	ldr	r2, [r3, #12]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ee4:	b292      	uxth	r2, r2
 8001ee6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eec:	1c9a      	adds	r2, r3, #2
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	b29a      	uxth	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001f00:	e011      	b.n	8001f26 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f02:	f7fe fe2f 	bl	8000b64 <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	683a      	ldr	r2, [r7, #0]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d803      	bhi.n	8001f1a <HAL_SPI_Receive+0x1cc>
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f18:	d102      	bne.n	8001f20 <HAL_SPI_Receive+0x1d2>
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d102      	bne.n	8001f26 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001f24:	e017      	b.n	8001f56 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d1cd      	bne.n	8001ecc <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	6839      	ldr	r1, [r7, #0]
 8001f34:	68f8      	ldr	r0, [r7, #12]
 8001f36:	f000 fa45 	bl	80023c4 <SPI_EndRxTransaction>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d002      	beq.n	8001f46 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2220      	movs	r2, #32
 8001f44:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d002      	beq.n	8001f54 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	75fb      	strb	r3, [r7, #23]
 8001f52:	e000      	b.n	8001f56 <HAL_SPI_Receive+0x208>
  }

error :
 8001f54:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001f66:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3718      	adds	r7, #24
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b08c      	sub	sp, #48	; 0x30
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
 8001f7c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001f82:	2300      	movs	r3, #0
 8001f84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d101      	bne.n	8001f96 <HAL_SPI_TransmitReceive+0x26>
 8001f92:	2302      	movs	r3, #2
 8001f94:	e18a      	b.n	80022ac <HAL_SPI_TransmitReceive+0x33c>
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f9e:	f7fe fde1 	bl	8000b64 <HAL_GetTick>
 8001fa2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001faa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001fb4:	887b      	ldrh	r3, [r7, #2]
 8001fb6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001fb8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d00f      	beq.n	8001fe0 <HAL_SPI_TransmitReceive+0x70>
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001fc6:	d107      	bne.n	8001fd8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d103      	bne.n	8001fd8 <HAL_SPI_TransmitReceive+0x68>
 8001fd0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001fd4:	2b04      	cmp	r3, #4
 8001fd6:	d003      	beq.n	8001fe0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001fd8:	2302      	movs	r3, #2
 8001fda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001fde:	e15b      	b.n	8002298 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d005      	beq.n	8001ff2 <HAL_SPI_TransmitReceive+0x82>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d002      	beq.n	8001ff2 <HAL_SPI_TransmitReceive+0x82>
 8001fec:	887b      	ldrh	r3, [r7, #2]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d103      	bne.n	8001ffa <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001ff8:	e14e      	b.n	8002298 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b04      	cmp	r3, #4
 8002004:	d003      	beq.n	800200e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2205      	movs	r2, #5
 800200a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2200      	movs	r2, #0
 8002012:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	887a      	ldrh	r2, [r7, #2]
 800201e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	887a      	ldrh	r2, [r7, #2]
 8002024:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	68ba      	ldr	r2, [r7, #8]
 800202a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	887a      	ldrh	r2, [r7, #2]
 8002030:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	887a      	ldrh	r2, [r7, #2]
 8002036:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2200      	movs	r2, #0
 800203c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2200      	movs	r2, #0
 8002042:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800204e:	2b40      	cmp	r3, #64	; 0x40
 8002050:	d007      	beq.n	8002062 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002060:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800206a:	d178      	bne.n	800215e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d002      	beq.n	800207a <HAL_SPI_TransmitReceive+0x10a>
 8002074:	8b7b      	ldrh	r3, [r7, #26]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d166      	bne.n	8002148 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	881a      	ldrh	r2, [r3, #0]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208a:	1c9a      	adds	r2, r3, #2
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002094:	b29b      	uxth	r3, r3
 8002096:	3b01      	subs	r3, #1
 8002098:	b29a      	uxth	r2, r3
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800209e:	e053      	b.n	8002148 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d11b      	bne.n	80020e6 <HAL_SPI_TransmitReceive+0x176>
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d016      	beq.n	80020e6 <HAL_SPI_TransmitReceive+0x176>
 80020b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d113      	bne.n	80020e6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	881a      	ldrh	r2, [r3, #0]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	1c9a      	adds	r2, r3, #2
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020d8:	b29b      	uxth	r3, r3
 80020da:	3b01      	subs	r3, #1
 80020dc:	b29a      	uxth	r2, r3
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80020e2:	2300      	movs	r3, #0
 80020e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f003 0301 	and.w	r3, r3, #1
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d119      	bne.n	8002128 <HAL_SPI_TransmitReceive+0x1b8>
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d014      	beq.n	8002128 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	68da      	ldr	r2, [r3, #12]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002108:	b292      	uxth	r2, r2
 800210a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002110:	1c9a      	adds	r2, r3, #2
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800211a:	b29b      	uxth	r3, r3
 800211c:	3b01      	subs	r3, #1
 800211e:	b29a      	uxth	r2, r3
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002124:	2301      	movs	r3, #1
 8002126:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002128:	f7fe fd1c 	bl	8000b64 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002134:	429a      	cmp	r2, r3
 8002136:	d807      	bhi.n	8002148 <HAL_SPI_TransmitReceive+0x1d8>
 8002138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800213a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800213e:	d003      	beq.n	8002148 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002146:	e0a7      	b.n	8002298 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800214c:	b29b      	uxth	r3, r3
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1a6      	bne.n	80020a0 <HAL_SPI_TransmitReceive+0x130>
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002156:	b29b      	uxth	r3, r3
 8002158:	2b00      	cmp	r3, #0
 800215a:	d1a1      	bne.n	80020a0 <HAL_SPI_TransmitReceive+0x130>
 800215c:	e07c      	b.n	8002258 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d002      	beq.n	800216c <HAL_SPI_TransmitReceive+0x1fc>
 8002166:	8b7b      	ldrh	r3, [r7, #26]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d16b      	bne.n	8002244 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	330c      	adds	r3, #12
 8002176:	7812      	ldrb	r2, [r2, #0]
 8002178:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	1c5a      	adds	r2, r3, #1
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002188:	b29b      	uxth	r3, r3
 800218a:	3b01      	subs	r3, #1
 800218c:	b29a      	uxth	r2, r3
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002192:	e057      	b.n	8002244 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d11c      	bne.n	80021dc <HAL_SPI_TransmitReceive+0x26c>
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d017      	beq.n	80021dc <HAL_SPI_TransmitReceive+0x26c>
 80021ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d114      	bne.n	80021dc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	330c      	adds	r3, #12
 80021bc:	7812      	ldrb	r2, [r2, #0]
 80021be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c4:	1c5a      	adds	r2, r3, #1
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	3b01      	subs	r3, #1
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80021d8:	2300      	movs	r3, #0
 80021da:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d119      	bne.n	800221e <HAL_SPI_TransmitReceive+0x2ae>
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d014      	beq.n	800221e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	68da      	ldr	r2, [r3, #12]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021fe:	b2d2      	uxtb	r2, r2
 8002200:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002206:	1c5a      	adds	r2, r3, #1
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002210:	b29b      	uxth	r3, r3
 8002212:	3b01      	subs	r3, #1
 8002214:	b29a      	uxth	r2, r3
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800221a:	2301      	movs	r3, #1
 800221c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800221e:	f7fe fca1 	bl	8000b64 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800222a:	429a      	cmp	r2, r3
 800222c:	d803      	bhi.n	8002236 <HAL_SPI_TransmitReceive+0x2c6>
 800222e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002234:	d102      	bne.n	800223c <HAL_SPI_TransmitReceive+0x2cc>
 8002236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002238:	2b00      	cmp	r3, #0
 800223a:	d103      	bne.n	8002244 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002242:	e029      	b.n	8002298 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002248:	b29b      	uxth	r3, r3
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1a2      	bne.n	8002194 <HAL_SPI_TransmitReceive+0x224>
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002252:	b29b      	uxth	r3, r3
 8002254:	2b00      	cmp	r3, #0
 8002256:	d19d      	bne.n	8002194 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800225a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800225c:	68f8      	ldr	r0, [r7, #12]
 800225e:	f000 f917 	bl	8002490 <SPI_EndRxTxTransaction>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d006      	beq.n	8002276 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2220      	movs	r2, #32
 8002272:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002274:	e010      	b.n	8002298 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d10b      	bne.n	8002296 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800227e:	2300      	movs	r3, #0
 8002280:	617b      	str	r3, [r7, #20]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	617b      	str	r3, [r7, #20]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	617b      	str	r3, [r7, #20]
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	e000      	b.n	8002298 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002296:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80022a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3730      	adds	r7, #48	; 0x30
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b088      	sub	sp, #32
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	603b      	str	r3, [r7, #0]
 80022c0:	4613      	mov	r3, r2
 80022c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80022c4:	f7fe fc4e 	bl	8000b64 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022cc:	1a9b      	subs	r3, r3, r2
 80022ce:	683a      	ldr	r2, [r7, #0]
 80022d0:	4413      	add	r3, r2
 80022d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80022d4:	f7fe fc46 	bl	8000b64 <HAL_GetTick>
 80022d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80022da:	4b39      	ldr	r3, [pc, #228]	; (80023c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	015b      	lsls	r3, r3, #5
 80022e0:	0d1b      	lsrs	r3, r3, #20
 80022e2:	69fa      	ldr	r2, [r7, #28]
 80022e4:	fb02 f303 	mul.w	r3, r2, r3
 80022e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80022ea:	e054      	b.n	8002396 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f2:	d050      	beq.n	8002396 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80022f4:	f7fe fc36 	bl	8000b64 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	69fa      	ldr	r2, [r7, #28]
 8002300:	429a      	cmp	r2, r3
 8002302:	d902      	bls.n	800230a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d13d      	bne.n	8002386 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	685a      	ldr	r2, [r3, #4]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002318:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002322:	d111      	bne.n	8002348 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800232c:	d004      	beq.n	8002338 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002336:	d107      	bne.n	8002348 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002346:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800234c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002350:	d10f      	bne.n	8002372 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002360:	601a      	str	r2, [r3, #0]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002370:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2201      	movs	r2, #1
 8002376:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e017      	b.n	80023b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d101      	bne.n	8002390 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800238c:	2300      	movs	r3, #0
 800238e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	3b01      	subs	r3, #1
 8002394:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	4013      	ands	r3, r2
 80023a0:	68ba      	ldr	r2, [r7, #8]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	bf0c      	ite	eq
 80023a6:	2301      	moveq	r3, #1
 80023a8:	2300      	movne	r3, #0
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	461a      	mov	r2, r3
 80023ae:	79fb      	ldrb	r3, [r7, #7]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d19b      	bne.n	80022ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3720      	adds	r7, #32
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	20000000 	.word	0x20000000

080023c4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af02      	add	r7, sp, #8
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023d8:	d111      	bne.n	80023fe <SPI_EndRxTransaction+0x3a>
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023e2:	d004      	beq.n	80023ee <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023ec:	d107      	bne.n	80023fe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023fc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002406:	d12a      	bne.n	800245e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002410:	d012      	beq.n	8002438 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	9300      	str	r3, [sp, #0]
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	2200      	movs	r2, #0
 800241a:	2180      	movs	r1, #128	; 0x80
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	f7ff ff49 	bl	80022b4 <SPI_WaitFlagStateUntilTimeout>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d02d      	beq.n	8002484 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800242c:	f043 0220 	orr.w	r2, r3, #32
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e026      	b.n	8002486 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	2200      	movs	r2, #0
 8002440:	2101      	movs	r1, #1
 8002442:	68f8      	ldr	r0, [r7, #12]
 8002444:	f7ff ff36 	bl	80022b4 <SPI_WaitFlagStateUntilTimeout>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d01a      	beq.n	8002484 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002452:	f043 0220 	orr.w	r2, r3, #32
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e013      	b.n	8002486 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	9300      	str	r3, [sp, #0]
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	2200      	movs	r2, #0
 8002466:	2101      	movs	r1, #1
 8002468:	68f8      	ldr	r0, [r7, #12]
 800246a:	f7ff ff23 	bl	80022b4 <SPI_WaitFlagStateUntilTimeout>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d007      	beq.n	8002484 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002478:	f043 0220 	orr.w	r2, r3, #32
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e000      	b.n	8002486 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
	...

08002490 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b088      	sub	sp, #32
 8002494:	af02      	add	r7, sp, #8
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800249c:	4b1b      	ldr	r3, [pc, #108]	; (800250c <SPI_EndRxTxTransaction+0x7c>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a1b      	ldr	r2, [pc, #108]	; (8002510 <SPI_EndRxTxTransaction+0x80>)
 80024a2:	fba2 2303 	umull	r2, r3, r2, r3
 80024a6:	0d5b      	lsrs	r3, r3, #21
 80024a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80024ac:	fb02 f303 	mul.w	r3, r2, r3
 80024b0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024ba:	d112      	bne.n	80024e2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	9300      	str	r3, [sp, #0]
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	2200      	movs	r2, #0
 80024c4:	2180      	movs	r1, #128	; 0x80
 80024c6:	68f8      	ldr	r0, [r7, #12]
 80024c8:	f7ff fef4 	bl	80022b4 <SPI_WaitFlagStateUntilTimeout>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d016      	beq.n	8002500 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d6:	f043 0220 	orr.w	r2, r3, #32
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e00f      	b.n	8002502 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d00a      	beq.n	80024fe <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	3b01      	subs	r3, #1
 80024ec:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024f8:	2b80      	cmp	r3, #128	; 0x80
 80024fa:	d0f2      	beq.n	80024e2 <SPI_EndRxTxTransaction+0x52>
 80024fc:	e000      	b.n	8002500 <SPI_EndRxTxTransaction+0x70>
        break;
 80024fe:	bf00      	nop
  }

  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3718      	adds	r7, #24
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	20000000 	.word	0x20000000
 8002510:	165e9f81 	.word	0x165e9f81

08002514 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8002514:	b590      	push	{r4, r7, lr}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
 800251a:	4604      	mov	r4, r0
 800251c:	4608      	mov	r0, r1
 800251e:	4611      	mov	r1, r2
 8002520:	461a      	mov	r2, r3
 8002522:	4623      	mov	r3, r4
 8002524:	71fb      	strb	r3, [r7, #7]
 8002526:	4603      	mov	r3, r0
 8002528:	71bb      	strb	r3, [r7, #6]
 800252a:	460b      	mov	r3, r1
 800252c:	80bb      	strh	r3, [r7, #4]
 800252e:	4613      	mov	r3, r2
 8002530:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8002532:	79fb      	ldrb	r3, [r7, #7]
 8002534:	2b08      	cmp	r3, #8
 8002536:	d902      	bls.n	800253e <socket+0x2a>
 8002538:	f04f 33ff 	mov.w	r3, #4294967295
 800253c:	e0f2      	b.n	8002724 <socket+0x210>
	switch(protocol)
 800253e:	79bb      	ldrb	r3, [r7, #6]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d005      	beq.n	8002550 <socket+0x3c>
 8002544:	2b00      	cmp	r3, #0
 8002546:	dd11      	ble.n	800256c <socket+0x58>
 8002548:	3b02      	subs	r3, #2
 800254a:	2b02      	cmp	r3, #2
 800254c:	d80e      	bhi.n	800256c <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 800254e:	e011      	b.n	8002574 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8002550:	f107 030c 	add.w	r3, r7, #12
 8002554:	2204      	movs	r2, #4
 8002556:	4619      	mov	r1, r3
 8002558:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800255c:	f000 fc84 	bl	8002e68 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d105      	bne.n	8002572 <socket+0x5e>
 8002566:	f06f 0302 	mvn.w	r3, #2
 800256a:	e0db      	b.n	8002724 <socket+0x210>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 800256c:	f06f 0304 	mvn.w	r3, #4
 8002570:	e0d8      	b.n	8002724 <socket+0x210>
	    break;
 8002572:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8002574:	78fb      	ldrb	r3, [r7, #3]
 8002576:	f003 0304 	and.w	r3, r3, #4
 800257a:	2b00      	cmp	r3, #0
 800257c:	d002      	beq.n	8002584 <socket+0x70>
 800257e:	f06f 0305 	mvn.w	r3, #5
 8002582:	e0cf      	b.n	8002724 <socket+0x210>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8002584:	78fb      	ldrb	r3, [r7, #3]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d025      	beq.n	80025d6 <socket+0xc2>
	{
   	switch(protocol)
 800258a:	79bb      	ldrb	r3, [r7, #6]
 800258c:	2b01      	cmp	r3, #1
 800258e:	d002      	beq.n	8002596 <socket+0x82>
 8002590:	2b02      	cmp	r3, #2
 8002592:	d008      	beq.n	80025a6 <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8002594:	e024      	b.n	80025e0 <socket+0xcc>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8002596:	78fb      	ldrb	r3, [r7, #3]
 8002598:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800259c:	2b00      	cmp	r3, #0
 800259e:	d11c      	bne.n	80025da <socket+0xc6>
 80025a0:	f06f 0305 	mvn.w	r3, #5
 80025a4:	e0be      	b.n	8002724 <socket+0x210>
   	      if(flag & SF_IGMP_VER2)
 80025a6:	78fb      	ldrb	r3, [r7, #3]
 80025a8:	f003 0320 	and.w	r3, r3, #32
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d006      	beq.n	80025be <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 80025b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	db02      	blt.n	80025be <socket+0xaa>
 80025b8:	f06f 0305 	mvn.w	r3, #5
 80025bc:	e0b2      	b.n	8002724 <socket+0x210>
      	      if(flag & SF_UNI_BLOCK)
 80025be:	78fb      	ldrb	r3, [r7, #3]
 80025c0:	f003 0310 	and.w	r3, r3, #16
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d00a      	beq.n	80025de <socket+0xca>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 80025c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	db06      	blt.n	80025de <socket+0xca>
 80025d0:	f06f 0305 	mvn.w	r3, #5
 80025d4:	e0a6      	b.n	8002724 <socket+0x210>
   	}
   }
 80025d6:	bf00      	nop
 80025d8:	e002      	b.n	80025e0 <socket+0xcc>
   	      break;
 80025da:	bf00      	nop
 80025dc:	e000      	b.n	80025e0 <socket+0xcc>
   	      break;
 80025de:	bf00      	nop
	close(sn);
 80025e0:	79fb      	ldrb	r3, [r7, #7]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f000 f8ac 	bl	8002740 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 80025e8:	79fb      	ldrb	r3, [r7, #7]
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	3301      	adds	r3, #1
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	4618      	mov	r0, r3
 80025f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025f6:	f023 030f 	bic.w	r3, r3, #15
 80025fa:	b25a      	sxtb	r2, r3
 80025fc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002600:	4313      	orrs	r3, r2
 8002602:	b25b      	sxtb	r3, r3
 8002604:	b2db      	uxtb	r3, r3
 8002606:	4619      	mov	r1, r3
 8002608:	f000 fbe0 	bl	8002dcc <WIZCHIP_WRITE>
    #endif
	if(!port)
 800260c:	88bb      	ldrh	r3, [r7, #4]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d110      	bne.n	8002634 <socket+0x120>
	{
	   port = sock_any_port++;
 8002612:	4b46      	ldr	r3, [pc, #280]	; (800272c <socket+0x218>)
 8002614:	881b      	ldrh	r3, [r3, #0]
 8002616:	1c5a      	adds	r2, r3, #1
 8002618:	b291      	uxth	r1, r2
 800261a:	4a44      	ldr	r2, [pc, #272]	; (800272c <socket+0x218>)
 800261c:	8011      	strh	r1, [r2, #0]
 800261e:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8002620:	4b42      	ldr	r3, [pc, #264]	; (800272c <socket+0x218>)
 8002622:	881b      	ldrh	r3, [r3, #0]
 8002624:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8002628:	4293      	cmp	r3, r2
 800262a:	d103      	bne.n	8002634 <socket+0x120>
 800262c:	4b3f      	ldr	r3, [pc, #252]	; (800272c <socket+0x218>)
 800262e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8002632:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8002634:	79fb      	ldrb	r3, [r7, #7]
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	3301      	adds	r3, #1
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002640:	461a      	mov	r2, r3
 8002642:	88bb      	ldrh	r3, [r7, #4]
 8002644:	0a1b      	lsrs	r3, r3, #8
 8002646:	b29b      	uxth	r3, r3
 8002648:	b2db      	uxtb	r3, r3
 800264a:	4619      	mov	r1, r3
 800264c:	4610      	mov	r0, r2
 800264e:	f000 fbbd 	bl	8002dcc <WIZCHIP_WRITE>
 8002652:	79fb      	ldrb	r3, [r7, #7]
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	3301      	adds	r3, #1
 8002658:	00db      	lsls	r3, r3, #3
 800265a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800265e:	461a      	mov	r2, r3
 8002660:	88bb      	ldrh	r3, [r7, #4]
 8002662:	b2db      	uxtb	r3, r3
 8002664:	4619      	mov	r1, r3
 8002666:	4610      	mov	r0, r2
 8002668:	f000 fbb0 	bl	8002dcc <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 800266c:	79fb      	ldrb	r3, [r7, #7]
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	3301      	adds	r3, #1
 8002672:	00db      	lsls	r3, r3, #3
 8002674:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002678:	2101      	movs	r1, #1
 800267a:	4618      	mov	r0, r3
 800267c:	f000 fba6 	bl	8002dcc <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8002680:	bf00      	nop
 8002682:	79fb      	ldrb	r3, [r7, #7]
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	3301      	adds	r3, #1
 8002688:	00db      	lsls	r3, r3, #3
 800268a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800268e:	4618      	mov	r0, r3
 8002690:	f000 fb50 	bl	8002d34 <WIZCHIP_READ>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1f3      	bne.n	8002682 <socket+0x16e>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 800269a:	79fb      	ldrb	r3, [r7, #7]
 800269c:	2201      	movs	r2, #1
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	b21b      	sxth	r3, r3
 80026a4:	43db      	mvns	r3, r3
 80026a6:	b21a      	sxth	r2, r3
 80026a8:	4b21      	ldr	r3, [pc, #132]	; (8002730 <socket+0x21c>)
 80026aa:	881b      	ldrh	r3, [r3, #0]
 80026ac:	b21b      	sxth	r3, r3
 80026ae:	4013      	ands	r3, r2
 80026b0:	b21b      	sxth	r3, r3
 80026b2:	b29a      	uxth	r2, r3
 80026b4:	4b1e      	ldr	r3, [pc, #120]	; (8002730 <socket+0x21c>)
 80026b6:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 80026b8:	78fb      	ldrb	r3, [r7, #3]
 80026ba:	f003 0201 	and.w	r2, r3, #1
 80026be:	79fb      	ldrb	r3, [r7, #7]
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	b21a      	sxth	r2, r3
 80026c6:	4b1a      	ldr	r3, [pc, #104]	; (8002730 <socket+0x21c>)
 80026c8:	881b      	ldrh	r3, [r3, #0]
 80026ca:	b21b      	sxth	r3, r3
 80026cc:	4313      	orrs	r3, r2
 80026ce:	b21b      	sxth	r3, r3
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	4b17      	ldr	r3, [pc, #92]	; (8002730 <socket+0x21c>)
 80026d4:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 80026d6:	79fb      	ldrb	r3, [r7, #7]
 80026d8:	2201      	movs	r2, #1
 80026da:	fa02 f303 	lsl.w	r3, r2, r3
 80026de:	b21b      	sxth	r3, r3
 80026e0:	43db      	mvns	r3, r3
 80026e2:	b21a      	sxth	r2, r3
 80026e4:	4b13      	ldr	r3, [pc, #76]	; (8002734 <socket+0x220>)
 80026e6:	881b      	ldrh	r3, [r3, #0]
 80026e8:	b21b      	sxth	r3, r3
 80026ea:	4013      	ands	r3, r2
 80026ec:	b21b      	sxth	r3, r3
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	4b10      	ldr	r3, [pc, #64]	; (8002734 <socket+0x220>)
 80026f2:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 80026f4:	79fb      	ldrb	r3, [r7, #7]
 80026f6:	4a10      	ldr	r2, [pc, #64]	; (8002738 <socket+0x224>)
 80026f8:	2100      	movs	r1, #0
 80026fa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 80026fe:	79fb      	ldrb	r3, [r7, #7]
 8002700:	4a0e      	ldr	r2, [pc, #56]	; (800273c <socket+0x228>)
 8002702:	2100      	movs	r1, #0
 8002704:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8002706:	bf00      	nop
 8002708:	79fb      	ldrb	r3, [r7, #7]
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	3301      	adds	r3, #1
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002714:	4618      	mov	r0, r3
 8002716:	f000 fb0d 	bl	8002d34 <WIZCHIP_READ>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d0f3      	beq.n	8002708 <socket+0x1f4>
   return (int8_t)sn;
 8002720:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8002724:	4618      	mov	r0, r3
 8002726:	3714      	adds	r7, #20
 8002728:	46bd      	mov	sp, r7
 800272a:	bd90      	pop	{r4, r7, pc}
 800272c:	2000000a 	.word	0x2000000a
 8002730:	200000b0 	.word	0x200000b0
 8002734:	200000b2 	.word	0x200000b2
 8002738:	200000b4 	.word	0x200000b4
 800273c:	200000c4 	.word	0x200000c4

08002740 <close>:

int8_t close(uint8_t sn)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	4603      	mov	r3, r0
 8002748:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 800274a:	79fb      	ldrb	r3, [r7, #7]
 800274c:	2b08      	cmp	r3, #8
 800274e:	d902      	bls.n	8002756 <close+0x16>
 8002750:	f04f 33ff 	mov.w	r3, #4294967295
 8002754:	e055      	b.n	8002802 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8002756:	79fb      	ldrb	r3, [r7, #7]
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	3301      	adds	r3, #1
 800275c:	00db      	lsls	r3, r3, #3
 800275e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002762:	2110      	movs	r1, #16
 8002764:	4618      	mov	r0, r3
 8002766:	f000 fb31 	bl	8002dcc <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 800276a:	bf00      	nop
 800276c:	79fb      	ldrb	r3, [r7, #7]
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	3301      	adds	r3, #1
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002778:	4618      	mov	r0, r3
 800277a:	f000 fadb 	bl	8002d34 <WIZCHIP_READ>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d1f3      	bne.n	800276c <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8002784:	79fb      	ldrb	r3, [r7, #7]
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	3301      	adds	r3, #1
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002790:	211f      	movs	r1, #31
 8002792:	4618      	mov	r0, r3
 8002794:	f000 fb1a 	bl	8002dcc <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8002798:	79fb      	ldrb	r3, [r7, #7]
 800279a:	2201      	movs	r2, #1
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	b21b      	sxth	r3, r3
 80027a2:	43db      	mvns	r3, r3
 80027a4:	b21a      	sxth	r2, r3
 80027a6:	4b19      	ldr	r3, [pc, #100]	; (800280c <close+0xcc>)
 80027a8:	881b      	ldrh	r3, [r3, #0]
 80027aa:	b21b      	sxth	r3, r3
 80027ac:	4013      	ands	r3, r2
 80027ae:	b21b      	sxth	r3, r3
 80027b0:	b29a      	uxth	r2, r3
 80027b2:	4b16      	ldr	r3, [pc, #88]	; (800280c <close+0xcc>)
 80027b4:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 80027b6:	79fb      	ldrb	r3, [r7, #7]
 80027b8:	2201      	movs	r2, #1
 80027ba:	fa02 f303 	lsl.w	r3, r2, r3
 80027be:	b21b      	sxth	r3, r3
 80027c0:	43db      	mvns	r3, r3
 80027c2:	b21a      	sxth	r2, r3
 80027c4:	4b12      	ldr	r3, [pc, #72]	; (8002810 <close+0xd0>)
 80027c6:	881b      	ldrh	r3, [r3, #0]
 80027c8:	b21b      	sxth	r3, r3
 80027ca:	4013      	ands	r3, r2
 80027cc:	b21b      	sxth	r3, r3
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	4b0f      	ldr	r3, [pc, #60]	; (8002810 <close+0xd0>)
 80027d2:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 80027d4:	79fb      	ldrb	r3, [r7, #7]
 80027d6:	4a0f      	ldr	r2, [pc, #60]	; (8002814 <close+0xd4>)
 80027d8:	2100      	movs	r1, #0
 80027da:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 80027de:	79fb      	ldrb	r3, [r7, #7]
 80027e0:	4a0d      	ldr	r2, [pc, #52]	; (8002818 <close+0xd8>)
 80027e2:	2100      	movs	r1, #0
 80027e4:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 80027e6:	bf00      	nop
 80027e8:	79fb      	ldrb	r3, [r7, #7]
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	3301      	adds	r3, #1
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80027f4:	4618      	mov	r0, r3
 80027f6:	f000 fa9d 	bl	8002d34 <WIZCHIP_READ>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d1f3      	bne.n	80027e8 <close+0xa8>
	return SOCK_OK;
 8002800:	2301      	movs	r3, #1
}
 8002802:	4618      	mov	r0, r3
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	200000b0 	.word	0x200000b0
 8002810:	200000b2 	.word	0x200000b2
 8002814:	200000b4 	.word	0x200000b4
 8002818:	200000c4 	.word	0x200000c4

0800281c <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	4603      	mov	r3, r0
 8002824:	6039      	str	r1, [r7, #0]
 8002826:	71fb      	strb	r3, [r7, #7]
 8002828:	4613      	mov	r3, r2
 800282a:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 800282c:	79fb      	ldrb	r3, [r7, #7]
 800282e:	2b08      	cmp	r3, #8
 8002830:	d902      	bls.n	8002838 <connect+0x1c>
 8002832:	f04f 33ff 	mov.w	r3, #4294967295
 8002836:	e0c6      	b.n	80029c6 <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002838:	79fb      	ldrb	r3, [r7, #7]
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	3301      	adds	r3, #1
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	4618      	mov	r0, r3
 8002842:	f000 fa77 	bl	8002d34 <WIZCHIP_READ>
 8002846:	4603      	mov	r3, r0
 8002848:	f003 030f 	and.w	r3, r3, #15
 800284c:	2b01      	cmp	r3, #1
 800284e:	d002      	beq.n	8002856 <connect+0x3a>
 8002850:	f06f 0304 	mvn.w	r3, #4
 8002854:	e0b7      	b.n	80029c6 <connect+0x1aa>
   CHECK_SOCKINIT();
 8002856:	79fb      	ldrb	r3, [r7, #7]
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	3301      	adds	r3, #1
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002862:	4618      	mov	r0, r3
 8002864:	f000 fa66 	bl	8002d34 <WIZCHIP_READ>
 8002868:	4603      	mov	r3, r0
 800286a:	2b13      	cmp	r3, #19
 800286c:	d002      	beq.n	8002874 <connect+0x58>
 800286e:	f06f 0302 	mvn.w	r3, #2
 8002872:	e0a8      	b.n	80029c6 <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	021b      	lsls	r3, r3, #8
 800287e:	683a      	ldr	r2, [r7, #0]
 8002880:	3201      	adds	r2, #1
 8002882:	7812      	ldrb	r2, [r2, #0]
 8002884:	4413      	add	r3, r2
 8002886:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	021b      	lsls	r3, r3, #8
 800288c:	683a      	ldr	r2, [r7, #0]
 800288e:	3202      	adds	r2, #2
 8002890:	7812      	ldrb	r2, [r2, #0]
 8002892:	4413      	add	r3, r2
 8002894:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	021b      	lsls	r3, r3, #8
 800289a:	683a      	ldr	r2, [r7, #0]
 800289c:	3203      	adds	r2, #3
 800289e:	7812      	ldrb	r2, [r2, #0]
 80028a0:	4413      	add	r3, r2
 80028a2:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028aa:	d002      	beq.n	80028b2 <connect+0x96>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d102      	bne.n	80028b8 <connect+0x9c>
 80028b2:	f06f 030b 	mvn.w	r3, #11
 80028b6:	e086      	b.n	80029c6 <connect+0x1aa>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 80028b8:	88bb      	ldrh	r3, [r7, #4]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d102      	bne.n	80028c4 <connect+0xa8>
 80028be:	f06f 030a 	mvn.w	r3, #10
 80028c2:	e080      	b.n	80029c6 <connect+0x1aa>
	setSn_DIPR(sn,addr);
 80028c4:	79fb      	ldrb	r3, [r7, #7]
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	3301      	adds	r3, #1
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80028d0:	2204      	movs	r2, #4
 80028d2:	6839      	ldr	r1, [r7, #0]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f000 fb27 	bl	8002f28 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 80028da:	79fb      	ldrb	r3, [r7, #7]
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	3301      	adds	r3, #1
 80028e0:	00db      	lsls	r3, r3, #3
 80028e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028e6:	461a      	mov	r2, r3
 80028e8:	88bb      	ldrh	r3, [r7, #4]
 80028ea:	0a1b      	lsrs	r3, r3, #8
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	4619      	mov	r1, r3
 80028f2:	4610      	mov	r0, r2
 80028f4:	f000 fa6a 	bl	8002dcc <WIZCHIP_WRITE>
 80028f8:	79fb      	ldrb	r3, [r7, #7]
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	3301      	adds	r3, #1
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002904:	461a      	mov	r2, r3
 8002906:	88bb      	ldrh	r3, [r7, #4]
 8002908:	b2db      	uxtb	r3, r3
 800290a:	4619      	mov	r1, r3
 800290c:	4610      	mov	r0, r2
 800290e:	f000 fa5d 	bl	8002dcc <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 8002912:	79fb      	ldrb	r3, [r7, #7]
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	3301      	adds	r3, #1
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800291e:	2104      	movs	r1, #4
 8002920:	4618      	mov	r0, r3
 8002922:	f000 fa53 	bl	8002dcc <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8002926:	bf00      	nop
 8002928:	79fb      	ldrb	r3, [r7, #7]
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	3301      	adds	r3, #1
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002934:	4618      	mov	r0, r3
 8002936:	f000 f9fd 	bl	8002d34 <WIZCHIP_READ>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d1f3      	bne.n	8002928 <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8002940:	4b23      	ldr	r3, [pc, #140]	; (80029d0 <connect+0x1b4>)
 8002942:	881b      	ldrh	r3, [r3, #0]
 8002944:	461a      	mov	r2, r3
 8002946:	79fb      	ldrb	r3, [r7, #7]
 8002948:	fa42 f303 	asr.w	r3, r2, r3
 800294c:	f003 0301 	and.w	r3, r3, #1
 8002950:	2b00      	cmp	r3, #0
 8002952:	d02b      	beq.n	80029ac <connect+0x190>
 8002954:	2300      	movs	r3, #0
 8002956:	e036      	b.n	80029c6 <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 8002958:	79fb      	ldrb	r3, [r7, #7]
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	3301      	adds	r3, #1
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002964:	4618      	mov	r0, r3
 8002966:	f000 f9e5 	bl	8002d34 <WIZCHIP_READ>
 800296a:	4603      	mov	r3, r0
 800296c:	f003 0308 	and.w	r3, r3, #8
 8002970:	2b00      	cmp	r3, #0
 8002972:	d00c      	beq.n	800298e <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 8002974:	79fb      	ldrb	r3, [r7, #7]
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	3301      	adds	r3, #1
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002980:	2108      	movs	r1, #8
 8002982:	4618      	mov	r0, r3
 8002984:	f000 fa22 	bl	8002dcc <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 8002988:	f06f 030c 	mvn.w	r3, #12
 800298c:	e01b      	b.n	80029c6 <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 800298e:	79fb      	ldrb	r3, [r7, #7]
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	3301      	adds	r3, #1
 8002994:	00db      	lsls	r3, r3, #3
 8002996:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800299a:	4618      	mov	r0, r3
 800299c:	f000 f9ca 	bl	8002d34 <WIZCHIP_READ>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d102      	bne.n	80029ac <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 80029a6:	f06f 0303 	mvn.w	r3, #3
 80029aa:	e00c      	b.n	80029c6 <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 80029ac:	79fb      	ldrb	r3, [r7, #7]
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	3301      	adds	r3, #1
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80029b8:	4618      	mov	r0, r3
 80029ba:	f000 f9bb 	bl	8002d34 <WIZCHIP_READ>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b17      	cmp	r3, #23
 80029c2:	d1c9      	bne.n	8002958 <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 80029c4:	2301      	movs	r3, #1
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	200000b0 	.word	0x200000b0

080029d4 <send>:
	}
	return SOCK_OK;
}

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	4603      	mov	r3, r0
 80029dc:	6039      	str	r1, [r7, #0]
 80029de:	71fb      	strb	r3, [r7, #7]
 80029e0:	4613      	mov	r3, r2
 80029e2:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 80029e4:	2300      	movs	r3, #0
 80029e6:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 80029e8:	2300      	movs	r3, #0
 80029ea:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 80029ec:	79fb      	ldrb	r3, [r7, #7]
 80029ee:	2b08      	cmp	r3, #8
 80029f0:	d902      	bls.n	80029f8 <send+0x24>
 80029f2:	f04f 33ff 	mov.w	r3, #4294967295
 80029f6:	e0de      	b.n	8002bb6 <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80029f8:	79fb      	ldrb	r3, [r7, #7]
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	3301      	adds	r3, #1
 80029fe:	00db      	lsls	r3, r3, #3
 8002a00:	4618      	mov	r0, r3
 8002a02:	f000 f997 	bl	8002d34 <WIZCHIP_READ>
 8002a06:	4603      	mov	r3, r0
 8002a08:	f003 030f 	and.w	r3, r3, #15
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d002      	beq.n	8002a16 <send+0x42>
 8002a10:	f06f 0304 	mvn.w	r3, #4
 8002a14:	e0cf      	b.n	8002bb6 <send+0x1e2>
   CHECK_SOCKDATA();
 8002a16:	88bb      	ldrh	r3, [r7, #4]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d102      	bne.n	8002a22 <send+0x4e>
 8002a1c:	f06f 030d 	mvn.w	r3, #13
 8002a20:	e0c9      	b.n	8002bb6 <send+0x1e2>
   tmp = getSn_SR(sn);
 8002a22:	79fb      	ldrb	r3, [r7, #7]
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	3301      	adds	r3, #1
 8002a28:	00db      	lsls	r3, r3, #3
 8002a2a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f000 f980 	bl	8002d34 <WIZCHIP_READ>
 8002a34:	4603      	mov	r3, r0
 8002a36:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8002a38:	7bfb      	ldrb	r3, [r7, #15]
 8002a3a:	2b17      	cmp	r3, #23
 8002a3c:	d005      	beq.n	8002a4a <send+0x76>
 8002a3e:	7bfb      	ldrb	r3, [r7, #15]
 8002a40:	2b1c      	cmp	r3, #28
 8002a42:	d002      	beq.n	8002a4a <send+0x76>
 8002a44:	f06f 0306 	mvn.w	r3, #6
 8002a48:	e0b5      	b.n	8002bb6 <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 8002a4a:	4b5d      	ldr	r3, [pc, #372]	; (8002bc0 <send+0x1ec>)
 8002a4c:	881b      	ldrh	r3, [r3, #0]
 8002a4e:	461a      	mov	r2, r3
 8002a50:	79fb      	ldrb	r3, [r7, #7]
 8002a52:	fa42 f303 	asr.w	r3, r2, r3
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d039      	beq.n	8002ad2 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8002a5e:	79fb      	ldrb	r3, [r7, #7]
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	3301      	adds	r3, #1
 8002a64:	00db      	lsls	r3, r3, #3
 8002a66:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f000 f962 	bl	8002d34 <WIZCHIP_READ>
 8002a70:	4603      	mov	r3, r0
 8002a72:	f003 031f 	and.w	r3, r3, #31
 8002a76:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8002a78:	7bfb      	ldrb	r3, [r7, #15]
 8002a7a:	f003 0310 	and.w	r3, r3, #16
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d019      	beq.n	8002ab6 <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8002a82:	79fb      	ldrb	r3, [r7, #7]
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	3301      	adds	r3, #1
 8002a88:	00db      	lsls	r3, r3, #3
 8002a8a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002a8e:	2110      	movs	r1, #16
 8002a90:	4618      	mov	r0, r3
 8002a92:	f000 f99b 	bl	8002dcc <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8002a96:	79fb      	ldrb	r3, [r7, #7]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9e:	b21b      	sxth	r3, r3
 8002aa0:	43db      	mvns	r3, r3
 8002aa2:	b21a      	sxth	r2, r3
 8002aa4:	4b46      	ldr	r3, [pc, #280]	; (8002bc0 <send+0x1ec>)
 8002aa6:	881b      	ldrh	r3, [r3, #0]
 8002aa8:	b21b      	sxth	r3, r3
 8002aaa:	4013      	ands	r3, r2
 8002aac:	b21b      	sxth	r3, r3
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	4b43      	ldr	r3, [pc, #268]	; (8002bc0 <send+0x1ec>)
 8002ab2:	801a      	strh	r2, [r3, #0]
 8002ab4:	e00d      	b.n	8002ad2 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8002ab6:	7bfb      	ldrb	r3, [r7, #15]
 8002ab8:	f003 0308 	and.w	r3, r3, #8
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d006      	beq.n	8002ace <send+0xfa>
      {
         close(sn);
 8002ac0:	79fb      	ldrb	r3, [r7, #7]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7ff fe3c 	bl	8002740 <close>
         return SOCKERR_TIMEOUT;
 8002ac8:	f06f 030c 	mvn.w	r3, #12
 8002acc:	e073      	b.n	8002bb6 <send+0x1e2>
      }
      else return SOCK_BUSY;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	e071      	b.n	8002bb6 <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 8002ad2:	79fb      	ldrb	r3, [r7, #7]
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	00db      	lsls	r3, r3, #3
 8002ada:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f000 f928 	bl	8002d34 <WIZCHIP_READ>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	029b      	lsls	r3, r3, #10
 8002aea:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8002aec:	88ba      	ldrh	r2, [r7, #4]
 8002aee:	89bb      	ldrh	r3, [r7, #12]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d901      	bls.n	8002af8 <send+0x124>
 8002af4:	89bb      	ldrh	r3, [r7, #12]
 8002af6:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8002af8:	79fb      	ldrb	r3, [r7, #7]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f000 fa74 	bl	8002fe8 <getSn_TX_FSR>
 8002b00:	4603      	mov	r3, r0
 8002b02:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8002b04:	79fb      	ldrb	r3, [r7, #7]
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	3301      	adds	r3, #1
 8002b0a:	00db      	lsls	r3, r3, #3
 8002b0c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002b10:	4618      	mov	r0, r3
 8002b12:	f000 f90f 	bl	8002d34 <WIZCHIP_READ>
 8002b16:	4603      	mov	r3, r0
 8002b18:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8002b1a:	7bfb      	ldrb	r3, [r7, #15]
 8002b1c:	2b17      	cmp	r3, #23
 8002b1e:	d009      	beq.n	8002b34 <send+0x160>
 8002b20:	7bfb      	ldrb	r3, [r7, #15]
 8002b22:	2b1c      	cmp	r3, #28
 8002b24:	d006      	beq.n	8002b34 <send+0x160>
      {
         close(sn);
 8002b26:	79fb      	ldrb	r3, [r7, #7]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7ff fe09 	bl	8002740 <close>
         return SOCKERR_SOCKSTATUS;
 8002b2e:	f06f 0306 	mvn.w	r3, #6
 8002b32:	e040      	b.n	8002bb6 <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8002b34:	4b23      	ldr	r3, [pc, #140]	; (8002bc4 <send+0x1f0>)
 8002b36:	881b      	ldrh	r3, [r3, #0]
 8002b38:	461a      	mov	r2, r3
 8002b3a:	79fb      	ldrb	r3, [r7, #7]
 8002b3c:	fa42 f303 	asr.w	r3, r2, r3
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d005      	beq.n	8002b54 <send+0x180>
 8002b48:	88ba      	ldrh	r2, [r7, #4]
 8002b4a:	89bb      	ldrh	r3, [r7, #12]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d901      	bls.n	8002b54 <send+0x180>
 8002b50:	2300      	movs	r3, #0
 8002b52:	e030      	b.n	8002bb6 <send+0x1e2>
      if(len <= freesize) break;
 8002b54:	88ba      	ldrh	r2, [r7, #4]
 8002b56:	89bb      	ldrh	r3, [r7, #12]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d900      	bls.n	8002b5e <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 8002b5c:	e7cc      	b.n	8002af8 <send+0x124>
      if(len <= freesize) break;
 8002b5e:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8002b60:	88ba      	ldrh	r2, [r7, #4]
 8002b62:	79fb      	ldrb	r3, [r7, #7]
 8002b64:	6839      	ldr	r1, [r7, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f000 fad4 	bl	8003114 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8002b6c:	79fb      	ldrb	r3, [r7, #7]
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	3301      	adds	r3, #1
 8002b72:	00db      	lsls	r3, r3, #3
 8002b74:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002b78:	2120      	movs	r1, #32
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 f926 	bl	8002dcc <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8002b80:	bf00      	nop
 8002b82:	79fb      	ldrb	r3, [r7, #7]
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	3301      	adds	r3, #1
 8002b88:	00db      	lsls	r3, r3, #3
 8002b8a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f000 f8d0 	bl	8002d34 <WIZCHIP_READ>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1f3      	bne.n	8002b82 <send+0x1ae>
   sock_is_sending |= (1 << sn);
 8002b9a:	79fb      	ldrb	r3, [r7, #7]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	b21a      	sxth	r2, r3
 8002ba4:	4b06      	ldr	r3, [pc, #24]	; (8002bc0 <send+0x1ec>)
 8002ba6:	881b      	ldrh	r3, [r3, #0]
 8002ba8:	b21b      	sxth	r3, r3
 8002baa:	4313      	orrs	r3, r2
 8002bac:	b21b      	sxth	r3, r3
 8002bae:	b29a      	uxth	r2, r3
 8002bb0:	4b03      	ldr	r3, [pc, #12]	; (8002bc0 <send+0x1ec>)
 8002bb2:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8002bb4:	88bb      	ldrh	r3, [r7, #4]
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3710      	adds	r7, #16
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	200000b2 	.word	0x200000b2
 8002bc4:	200000b0 	.word	0x200000b0

08002bc8 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8002bc8:	b590      	push	{r4, r7, lr}
 8002bca:	b085      	sub	sp, #20
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	4603      	mov	r3, r0
 8002bd0:	6039      	str	r1, [r7, #0]
 8002bd2:	71fb      	strb	r3, [r7, #7]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8002be0:	79fb      	ldrb	r3, [r7, #7]
 8002be2:	2b08      	cmp	r3, #8
 8002be4:	d902      	bls.n	8002bec <recv+0x24>
 8002be6:	f04f 33ff 	mov.w	r3, #4294967295
 8002bea:	e09c      	b.n	8002d26 <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002bec:	79fb      	ldrb	r3, [r7, #7]
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f000 f89d 	bl	8002d34 <WIZCHIP_READ>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	f003 030f 	and.w	r3, r3, #15
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d002      	beq.n	8002c0a <recv+0x42>
 8002c04:	f06f 0304 	mvn.w	r3, #4
 8002c08:	e08d      	b.n	8002d26 <recv+0x15e>
   CHECK_SOCKDATA();
 8002c0a:	88bb      	ldrh	r3, [r7, #4]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d102      	bne.n	8002c16 <recv+0x4e>
 8002c10:	f06f 030d 	mvn.w	r3, #13
 8002c14:	e087      	b.n	8002d26 <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 8002c16:	79fb      	ldrb	r3, [r7, #7]
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	00db      	lsls	r3, r3, #3
 8002c1e:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002c22:	4618      	mov	r0, r3
 8002c24:	f000 f886 	bl	8002d34 <WIZCHIP_READ>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	029b      	lsls	r3, r3, #10
 8002c2e:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8002c30:	89ba      	ldrh	r2, [r7, #12]
 8002c32:	88bb      	ldrh	r3, [r7, #4]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d201      	bcs.n	8002c3c <recv+0x74>
 8002c38:	89bb      	ldrh	r3, [r7, #12]
 8002c3a:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8002c3c:	79fb      	ldrb	r3, [r7, #7]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f000 fa1d 	bl	800307e <getSn_RX_RSR>
 8002c44:	4603      	mov	r3, r0
 8002c46:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8002c48:	79fb      	ldrb	r3, [r7, #7]
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002c54:	4618      	mov	r0, r3
 8002c56:	f000 f86d 	bl	8002d34 <WIZCHIP_READ>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 8002c5e:	7bfb      	ldrb	r3, [r7, #15]
 8002c60:	2b17      	cmp	r3, #23
 8002c62:	d026      	beq.n	8002cb2 <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 8002c64:	7bfb      	ldrb	r3, [r7, #15]
 8002c66:	2b1c      	cmp	r3, #28
 8002c68:	d11c      	bne.n	8002ca4 <recv+0xdc>
            {
               if(recvsize != 0) break;
 8002c6a:	89bb      	ldrh	r3, [r7, #12]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d133      	bne.n	8002cd8 <recv+0x110>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8002c70:	79fb      	ldrb	r3, [r7, #7]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f000 f9b8 	bl	8002fe8 <getSn_TX_FSR>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	461c      	mov	r4, r3
 8002c7c:	79fb      	ldrb	r3, [r7, #7]
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	3301      	adds	r3, #1
 8002c82:	00db      	lsls	r3, r3, #3
 8002c84:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f000 f853 	bl	8002d34 <WIZCHIP_READ>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	029b      	lsls	r3, r3, #10
 8002c92:	429c      	cmp	r4, r3
 8002c94:	d10d      	bne.n	8002cb2 <recv+0xea>
               {
                  close(sn);
 8002c96:	79fb      	ldrb	r3, [r7, #7]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7ff fd51 	bl	8002740 <close>
                  return SOCKERR_SOCKSTATUS;
 8002c9e:	f06f 0306 	mvn.w	r3, #6
 8002ca2:	e040      	b.n	8002d26 <recv+0x15e>
               }
            }
            else
            {
               close(sn);
 8002ca4:	79fb      	ldrb	r3, [r7, #7]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7ff fd4a 	bl	8002740 <close>
               return SOCKERR_SOCKSTATUS;
 8002cac:	f06f 0306 	mvn.w	r3, #6
 8002cb0:	e039      	b.n	8002d26 <recv+0x15e>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8002cb2:	4b1f      	ldr	r3, [pc, #124]	; (8002d30 <recv+0x168>)
 8002cb4:	881b      	ldrh	r3, [r3, #0]
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	79fb      	ldrb	r3, [r7, #7]
 8002cba:	fa42 f303 	asr.w	r3, r2, r3
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d004      	beq.n	8002cd0 <recv+0x108>
 8002cc6:	89bb      	ldrh	r3, [r7, #12]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d101      	bne.n	8002cd0 <recv+0x108>
 8002ccc:	2300      	movs	r3, #0
 8002cce:	e02a      	b.n	8002d26 <recv+0x15e>
         if(recvsize != 0) break;
 8002cd0:	89bb      	ldrh	r3, [r7, #12]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d102      	bne.n	8002cdc <recv+0x114>
         recvsize = getSn_RX_RSR(sn);
 8002cd6:	e7b1      	b.n	8002c3c <recv+0x74>
               if(recvsize != 0) break;
 8002cd8:	bf00      	nop
 8002cda:	e000      	b.n	8002cde <recv+0x116>
         if(recvsize != 0) break;
 8002cdc:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8002cde:	89ba      	ldrh	r2, [r7, #12]
 8002ce0:	88bb      	ldrh	r3, [r7, #4]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d201      	bcs.n	8002cea <recv+0x122>
 8002ce6:	89bb      	ldrh	r3, [r7, #12]
 8002ce8:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8002cea:	88ba      	ldrh	r2, [r7, #4]
 8002cec:	79fb      	ldrb	r3, [r7, #7]
 8002cee:	6839      	ldr	r1, [r7, #0]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f000 fa6b 	bl	80031cc <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 8002cf6:	79fb      	ldrb	r3, [r7, #7]
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002d02:	2140      	movs	r1, #64	; 0x40
 8002d04:	4618      	mov	r0, r3
 8002d06:	f000 f861 	bl	8002dcc <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8002d0a:	bf00      	nop
 8002d0c:	79fb      	ldrb	r3, [r7, #7]
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	3301      	adds	r3, #1
 8002d12:	00db      	lsls	r3, r3, #3
 8002d14:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f000 f80b 	bl	8002d34 <WIZCHIP_READ>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1f3      	bne.n	8002d0c <recv+0x144>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8002d24:	88bb      	ldrh	r3, [r7, #4]
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3714      	adds	r7, #20
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd90      	pop	{r4, r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	200000b0 	.word	0x200000b0

08002d34 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8002d3c:	4b22      	ldr	r3, [pc, #136]	; (8002dc8 <WIZCHIP_READ+0x94>)
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002d42:	4b21      	ldr	r3, [pc, #132]	; (8002dc8 <WIZCHIP_READ+0x94>)
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002d48:	4b1f      	ldr	r3, [pc, #124]	; (8002dc8 <WIZCHIP_READ+0x94>)
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d003      	beq.n	8002d58 <WIZCHIP_READ+0x24>
 8002d50:	4b1d      	ldr	r3, [pc, #116]	; (8002dc8 <WIZCHIP_READ+0x94>)
 8002d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d114      	bne.n	8002d82 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002d58:	4b1b      	ldr	r3, [pc, #108]	; (8002dc8 <WIZCHIP_READ+0x94>)
 8002d5a:	6a1b      	ldr	r3, [r3, #32]
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	0c12      	lsrs	r2, r2, #16
 8002d60:	b2d2      	uxtb	r2, r2
 8002d62:	4610      	mov	r0, r2
 8002d64:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002d66:	4b18      	ldr	r3, [pc, #96]	; (8002dc8 <WIZCHIP_READ+0x94>)
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	0a12      	lsrs	r2, r2, #8
 8002d6e:	b2d2      	uxtb	r2, r2
 8002d70:	4610      	mov	r0, r2
 8002d72:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002d74:	4b14      	ldr	r3, [pc, #80]	; (8002dc8 <WIZCHIP_READ+0x94>)
 8002d76:	6a1b      	ldr	r3, [r3, #32]
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	b2d2      	uxtb	r2, r2
 8002d7c:	4610      	mov	r0, r2
 8002d7e:	4798      	blx	r3
 8002d80:	e011      	b.n	8002da6 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	0c1b      	lsrs	r3, r3, #16
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	0a1b      	lsrs	r3, r3, #8
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8002d98:	4b0b      	ldr	r3, [pc, #44]	; (8002dc8 <WIZCHIP_READ+0x94>)
 8002d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9c:	f107 020c 	add.w	r2, r7, #12
 8002da0:	2103      	movs	r1, #3
 8002da2:	4610      	mov	r0, r2
 8002da4:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8002da6:	4b08      	ldr	r3, [pc, #32]	; (8002dc8 <WIZCHIP_READ+0x94>)
 8002da8:	69db      	ldr	r3, [r3, #28]
 8002daa:	4798      	blx	r3
 8002dac:	4603      	mov	r3, r0
 8002dae:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8002db0:	4b05      	ldr	r3, [pc, #20]	; (8002dc8 <WIZCHIP_READ+0x94>)
 8002db2:	699b      	ldr	r3, [r3, #24]
 8002db4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002db6:	4b04      	ldr	r3, [pc, #16]	; (8002dc8 <WIZCHIP_READ+0x94>)
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	4798      	blx	r3
   return ret;
 8002dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	2000000c 	.word	0x2000000c

08002dcc <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8002dd8:	4b22      	ldr	r3, [pc, #136]	; (8002e64 <WIZCHIP_WRITE+0x98>)
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002dde:	4b21      	ldr	r3, [pc, #132]	; (8002e64 <WIZCHIP_WRITE+0x98>)
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f043 0304 	orr.w	r3, r3, #4
 8002dea:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002dec:	4b1d      	ldr	r3, [pc, #116]	; (8002e64 <WIZCHIP_WRITE+0x98>)
 8002dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d119      	bne.n	8002e28 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002df4:	4b1b      	ldr	r3, [pc, #108]	; (8002e64 <WIZCHIP_WRITE+0x98>)
 8002df6:	6a1b      	ldr	r3, [r3, #32]
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	0c12      	lsrs	r2, r2, #16
 8002dfc:	b2d2      	uxtb	r2, r2
 8002dfe:	4610      	mov	r0, r2
 8002e00:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002e02:	4b18      	ldr	r3, [pc, #96]	; (8002e64 <WIZCHIP_WRITE+0x98>)
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	0a12      	lsrs	r2, r2, #8
 8002e0a:	b2d2      	uxtb	r2, r2
 8002e0c:	4610      	mov	r0, r2
 8002e0e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002e10:	4b14      	ldr	r3, [pc, #80]	; (8002e64 <WIZCHIP_WRITE+0x98>)
 8002e12:	6a1b      	ldr	r3, [r3, #32]
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	b2d2      	uxtb	r2, r2
 8002e18:	4610      	mov	r0, r2
 8002e1a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8002e1c:	4b11      	ldr	r3, [pc, #68]	; (8002e64 <WIZCHIP_WRITE+0x98>)
 8002e1e:	6a1b      	ldr	r3, [r3, #32]
 8002e20:	78fa      	ldrb	r2, [r7, #3]
 8002e22:	4610      	mov	r0, r2
 8002e24:	4798      	blx	r3
 8002e26:	e013      	b.n	8002e50 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	0c1b      	lsrs	r3, r3, #16
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	0a1b      	lsrs	r3, r3, #8
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8002e3e:	78fb      	ldrb	r3, [r7, #3]
 8002e40:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8002e42:	4b08      	ldr	r3, [pc, #32]	; (8002e64 <WIZCHIP_WRITE+0x98>)
 8002e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e46:	f107 020c 	add.w	r2, r7, #12
 8002e4a:	2104      	movs	r1, #4
 8002e4c:	4610      	mov	r0, r2
 8002e4e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8002e50:	4b04      	ldr	r3, [pc, #16]	; (8002e64 <WIZCHIP_WRITE+0x98>)
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002e56:	4b03      	ldr	r3, [pc, #12]	; (8002e64 <WIZCHIP_WRITE+0x98>)
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	4798      	blx	r3
}
 8002e5c:	bf00      	nop
 8002e5e:	3710      	adds	r7, #16
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	2000000c 	.word	0x2000000c

08002e68 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8002e68:	b590      	push	{r4, r7, lr}
 8002e6a:	b087      	sub	sp, #28
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	4613      	mov	r3, r2
 8002e74:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8002e76:	4b2b      	ldr	r3, [pc, #172]	; (8002f24 <WIZCHIP_READ_BUF+0xbc>)
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002e7c:	4b29      	ldr	r3, [pc, #164]	; (8002f24 <WIZCHIP_READ_BUF+0xbc>)
 8002e7e:	695b      	ldr	r3, [r3, #20]
 8002e80:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002e82:	4b28      	ldr	r3, [pc, #160]	; (8002f24 <WIZCHIP_READ_BUF+0xbc>)
 8002e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d003      	beq.n	8002e92 <WIZCHIP_READ_BUF+0x2a>
 8002e8a:	4b26      	ldr	r3, [pc, #152]	; (8002f24 <WIZCHIP_READ_BUF+0xbc>)
 8002e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d126      	bne.n	8002ee0 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002e92:	4b24      	ldr	r3, [pc, #144]	; (8002f24 <WIZCHIP_READ_BUF+0xbc>)
 8002e94:	6a1b      	ldr	r3, [r3, #32]
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	0c12      	lsrs	r2, r2, #16
 8002e9a:	b2d2      	uxtb	r2, r2
 8002e9c:	4610      	mov	r0, r2
 8002e9e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002ea0:	4b20      	ldr	r3, [pc, #128]	; (8002f24 <WIZCHIP_READ_BUF+0xbc>)
 8002ea2:	6a1b      	ldr	r3, [r3, #32]
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	0a12      	lsrs	r2, r2, #8
 8002ea8:	b2d2      	uxtb	r2, r2
 8002eaa:	4610      	mov	r0, r2
 8002eac:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002eae:	4b1d      	ldr	r3, [pc, #116]	; (8002f24 <WIZCHIP_READ_BUF+0xbc>)
 8002eb0:	6a1b      	ldr	r3, [r3, #32]
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	b2d2      	uxtb	r2, r2
 8002eb6:	4610      	mov	r0, r2
 8002eb8:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8002eba:	2300      	movs	r3, #0
 8002ebc:	82fb      	strh	r3, [r7, #22]
 8002ebe:	e00a      	b.n	8002ed6 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8002ec0:	4b18      	ldr	r3, [pc, #96]	; (8002f24 <WIZCHIP_READ_BUF+0xbc>)
 8002ec2:	69db      	ldr	r3, [r3, #28]
 8002ec4:	8afa      	ldrh	r2, [r7, #22]
 8002ec6:	68b9      	ldr	r1, [r7, #8]
 8002ec8:	188c      	adds	r4, r1, r2
 8002eca:	4798      	blx	r3
 8002ecc:	4603      	mov	r3, r0
 8002ece:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8002ed0:	8afb      	ldrh	r3, [r7, #22]
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	82fb      	strh	r3, [r7, #22]
 8002ed6:	8afa      	ldrh	r2, [r7, #22]
 8002ed8:	88fb      	ldrh	r3, [r7, #6]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d3f0      	bcc.n	8002ec0 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002ede:	e017      	b.n	8002f10 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	0c1b      	lsrs	r3, r3, #16
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	0a1b      	lsrs	r3, r3, #8
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8002ef6:	4b0b      	ldr	r3, [pc, #44]	; (8002f24 <WIZCHIP_READ_BUF+0xbc>)
 8002ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002efa:	f107 0210 	add.w	r2, r7, #16
 8002efe:	2103      	movs	r1, #3
 8002f00:	4610      	mov	r0, r2
 8002f02:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8002f04:	4b07      	ldr	r3, [pc, #28]	; (8002f24 <WIZCHIP_READ_BUF+0xbc>)
 8002f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f08:	88fa      	ldrh	r2, [r7, #6]
 8002f0a:	4611      	mov	r1, r2
 8002f0c:	68b8      	ldr	r0, [r7, #8]
 8002f0e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8002f10:	4b04      	ldr	r3, [pc, #16]	; (8002f24 <WIZCHIP_READ_BUF+0xbc>)
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002f16:	4b03      	ldr	r3, [pc, #12]	; (8002f24 <WIZCHIP_READ_BUF+0xbc>)
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	4798      	blx	r3
}
 8002f1c:	bf00      	nop
 8002f1e:	371c      	adds	r7, #28
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd90      	pop	{r4, r7, pc}
 8002f24:	2000000c 	.word	0x2000000c

08002f28 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	4613      	mov	r3, r2
 8002f34:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8002f36:	4b2b      	ldr	r3, [pc, #172]	; (8002fe4 <WIZCHIP_WRITE_BUF+0xbc>)
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002f3c:	4b29      	ldr	r3, [pc, #164]	; (8002fe4 <WIZCHIP_WRITE_BUF+0xbc>)
 8002f3e:	695b      	ldr	r3, [r3, #20]
 8002f40:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f043 0304 	orr.w	r3, r3, #4
 8002f48:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002f4a:	4b26      	ldr	r3, [pc, #152]	; (8002fe4 <WIZCHIP_WRITE_BUF+0xbc>)
 8002f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d126      	bne.n	8002fa0 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002f52:	4b24      	ldr	r3, [pc, #144]	; (8002fe4 <WIZCHIP_WRITE_BUF+0xbc>)
 8002f54:	6a1b      	ldr	r3, [r3, #32]
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	0c12      	lsrs	r2, r2, #16
 8002f5a:	b2d2      	uxtb	r2, r2
 8002f5c:	4610      	mov	r0, r2
 8002f5e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002f60:	4b20      	ldr	r3, [pc, #128]	; (8002fe4 <WIZCHIP_WRITE_BUF+0xbc>)
 8002f62:	6a1b      	ldr	r3, [r3, #32]
 8002f64:	68fa      	ldr	r2, [r7, #12]
 8002f66:	0a12      	lsrs	r2, r2, #8
 8002f68:	b2d2      	uxtb	r2, r2
 8002f6a:	4610      	mov	r0, r2
 8002f6c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002f6e:	4b1d      	ldr	r3, [pc, #116]	; (8002fe4 <WIZCHIP_WRITE_BUF+0xbc>)
 8002f70:	6a1b      	ldr	r3, [r3, #32]
 8002f72:	68fa      	ldr	r2, [r7, #12]
 8002f74:	b2d2      	uxtb	r2, r2
 8002f76:	4610      	mov	r0, r2
 8002f78:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	82fb      	strh	r3, [r7, #22]
 8002f7e:	e00a      	b.n	8002f96 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8002f80:	4b18      	ldr	r3, [pc, #96]	; (8002fe4 <WIZCHIP_WRITE_BUF+0xbc>)
 8002f82:	6a1b      	ldr	r3, [r3, #32]
 8002f84:	8afa      	ldrh	r2, [r7, #22]
 8002f86:	68b9      	ldr	r1, [r7, #8]
 8002f88:	440a      	add	r2, r1
 8002f8a:	7812      	ldrb	r2, [r2, #0]
 8002f8c:	4610      	mov	r0, r2
 8002f8e:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8002f90:	8afb      	ldrh	r3, [r7, #22]
 8002f92:	3301      	adds	r3, #1
 8002f94:	82fb      	strh	r3, [r7, #22]
 8002f96:	8afa      	ldrh	r2, [r7, #22]
 8002f98:	88fb      	ldrh	r3, [r7, #6]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d3f0      	bcc.n	8002f80 <WIZCHIP_WRITE_BUF+0x58>
 8002f9e:	e017      	b.n	8002fd0 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	0c1b      	lsrs	r3, r3, #16
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	0a1b      	lsrs	r3, r3, #8
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8002fb6:	4b0b      	ldr	r3, [pc, #44]	; (8002fe4 <WIZCHIP_WRITE_BUF+0xbc>)
 8002fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fba:	f107 0210 	add.w	r2, r7, #16
 8002fbe:	2103      	movs	r1, #3
 8002fc0:	4610      	mov	r0, r2
 8002fc2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8002fc4:	4b07      	ldr	r3, [pc, #28]	; (8002fe4 <WIZCHIP_WRITE_BUF+0xbc>)
 8002fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc8:	88fa      	ldrh	r2, [r7, #6]
 8002fca:	4611      	mov	r1, r2
 8002fcc:	68b8      	ldr	r0, [r7, #8]
 8002fce:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8002fd0:	4b04      	ldr	r3, [pc, #16]	; (8002fe4 <WIZCHIP_WRITE_BUF+0xbc>)
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002fd6:	4b03      	ldr	r3, [pc, #12]	; (8002fe4 <WIZCHIP_WRITE_BUF+0xbc>)
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	4798      	blx	r3
}
 8002fdc:	bf00      	nop
 8002fde:	3718      	adds	r7, #24
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	2000000c 	.word	0x2000000c

08002fe8 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8002fe8:	b590      	push	{r4, r7, lr}
 8002fea:	b085      	sub	sp, #20
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	4603      	mov	r3, r0
 8002ff0:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	81fb      	strh	r3, [r7, #14]
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8002ffa:	79fb      	ldrb	r3, [r7, #7]
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	3301      	adds	r3, #1
 8003000:	00db      	lsls	r3, r3, #3
 8003002:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003006:	4618      	mov	r0, r3
 8003008:	f7ff fe94 	bl	8002d34 <WIZCHIP_READ>
 800300c:	4603      	mov	r3, r0
 800300e:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8003010:	89bb      	ldrh	r3, [r7, #12]
 8003012:	021b      	lsls	r3, r3, #8
 8003014:	b29c      	uxth	r4, r3
 8003016:	79fb      	ldrb	r3, [r7, #7]
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	3301      	adds	r3, #1
 800301c:	00db      	lsls	r3, r3, #3
 800301e:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8003022:	4618      	mov	r0, r3
 8003024:	f7ff fe86 	bl	8002d34 <WIZCHIP_READ>
 8003028:	4603      	mov	r3, r0
 800302a:	b29b      	uxth	r3, r3
 800302c:	4423      	add	r3, r4
 800302e:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8003030:	89bb      	ldrh	r3, [r7, #12]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d01a      	beq.n	800306c <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8003036:	79fb      	ldrb	r3, [r7, #7]
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	3301      	adds	r3, #1
 800303c:	00db      	lsls	r3, r3, #3
 800303e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003042:	4618      	mov	r0, r3
 8003044:	f7ff fe76 	bl	8002d34 <WIZCHIP_READ>
 8003048:	4603      	mov	r3, r0
 800304a:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 800304c:	89fb      	ldrh	r3, [r7, #14]
 800304e:	021b      	lsls	r3, r3, #8
 8003050:	b29c      	uxth	r4, r3
 8003052:	79fb      	ldrb	r3, [r7, #7]
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	3301      	adds	r3, #1
 8003058:	00db      	lsls	r3, r3, #3
 800305a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800305e:	4618      	mov	r0, r3
 8003060:	f7ff fe68 	bl	8002d34 <WIZCHIP_READ>
 8003064:	4603      	mov	r3, r0
 8003066:	b29b      	uxth	r3, r3
 8003068:	4423      	add	r3, r4
 800306a:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 800306c:	89fa      	ldrh	r2, [r7, #14]
 800306e:	89bb      	ldrh	r3, [r7, #12]
 8003070:	429a      	cmp	r2, r3
 8003072:	d1c2      	bne.n	8002ffa <getSn_TX_FSR+0x12>
   return val;
 8003074:	89fb      	ldrh	r3, [r7, #14]
}
 8003076:	4618      	mov	r0, r3
 8003078:	3714      	adds	r7, #20
 800307a:	46bd      	mov	sp, r7
 800307c:	bd90      	pop	{r4, r7, pc}

0800307e <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 800307e:	b590      	push	{r4, r7, lr}
 8003080:	b085      	sub	sp, #20
 8003082:	af00      	add	r7, sp, #0
 8003084:	4603      	mov	r3, r0
 8003086:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8003088:	2300      	movs	r3, #0
 800308a:	81fb      	strh	r3, [r7, #14]
 800308c:	2300      	movs	r3, #0
 800308e:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8003090:	79fb      	ldrb	r3, [r7, #7]
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	3301      	adds	r3, #1
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 800309c:	4618      	mov	r0, r3
 800309e:	f7ff fe49 	bl	8002d34 <WIZCHIP_READ>
 80030a2:	4603      	mov	r3, r0
 80030a4:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80030a6:	89bb      	ldrh	r3, [r7, #12]
 80030a8:	021b      	lsls	r3, r3, #8
 80030aa:	b29c      	uxth	r4, r3
 80030ac:	79fb      	ldrb	r3, [r7, #7]
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	3301      	adds	r3, #1
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7ff fe3b 	bl	8002d34 <WIZCHIP_READ>
 80030be:	4603      	mov	r3, r0
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	4423      	add	r3, r4
 80030c4:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80030c6:	89bb      	ldrh	r3, [r7, #12]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d01a      	beq.n	8003102 <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 80030cc:	79fb      	ldrb	r3, [r7, #7]
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	3301      	adds	r3, #1
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 80030d8:	4618      	mov	r0, r3
 80030da:	f7ff fe2b 	bl	8002d34 <WIZCHIP_READ>
 80030de:	4603      	mov	r3, r0
 80030e0:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80030e2:	89fb      	ldrh	r3, [r7, #14]
 80030e4:	021b      	lsls	r3, r3, #8
 80030e6:	b29c      	uxth	r4, r3
 80030e8:	79fb      	ldrb	r3, [r7, #7]
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	3301      	adds	r3, #1
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7ff fe1d 	bl	8002d34 <WIZCHIP_READ>
 80030fa:	4603      	mov	r3, r0
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	4423      	add	r3, r4
 8003100:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8003102:	89fa      	ldrh	r2, [r7, #14]
 8003104:	89bb      	ldrh	r3, [r7, #12]
 8003106:	429a      	cmp	r2, r3
 8003108:	d1c2      	bne.n	8003090 <getSn_RX_RSR+0x12>
   return val;
 800310a:	89fb      	ldrh	r3, [r7, #14]
}
 800310c:	4618      	mov	r0, r3
 800310e:	3714      	adds	r7, #20
 8003110:	46bd      	mov	sp, r7
 8003112:	bd90      	pop	{r4, r7, pc}

08003114 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8003114:	b590      	push	{r4, r7, lr}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
 800311a:	4603      	mov	r3, r0
 800311c:	6039      	str	r1, [r7, #0]
 800311e:	71fb      	strb	r3, [r7, #7]
 8003120:	4613      	mov	r3, r2
 8003122:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8003124:	2300      	movs	r3, #0
 8003126:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8003128:	2300      	movs	r3, #0
 800312a:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 800312c:	88bb      	ldrh	r3, [r7, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d048      	beq.n	80031c4 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8003132:	79fb      	ldrb	r3, [r7, #7]
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	3301      	adds	r3, #1
 8003138:	00db      	lsls	r3, r3, #3
 800313a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800313e:	4618      	mov	r0, r3
 8003140:	f7ff fdf8 	bl	8002d34 <WIZCHIP_READ>
 8003144:	4603      	mov	r3, r0
 8003146:	b29b      	uxth	r3, r3
 8003148:	021b      	lsls	r3, r3, #8
 800314a:	b29c      	uxth	r4, r3
 800314c:	79fb      	ldrb	r3, [r7, #7]
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	3301      	adds	r3, #1
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8003158:	4618      	mov	r0, r3
 800315a:	f7ff fdeb 	bl	8002d34 <WIZCHIP_READ>
 800315e:	4603      	mov	r3, r0
 8003160:	b29b      	uxth	r3, r3
 8003162:	4423      	add	r3, r4
 8003164:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8003166:	89fb      	ldrh	r3, [r7, #14]
 8003168:	021b      	lsls	r3, r3, #8
 800316a:	79fa      	ldrb	r2, [r7, #7]
 800316c:	0092      	lsls	r2, r2, #2
 800316e:	3202      	adds	r2, #2
 8003170:	00d2      	lsls	r2, r2, #3
 8003172:	4413      	add	r3, r2
 8003174:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8003176:	88bb      	ldrh	r3, [r7, #4]
 8003178:	461a      	mov	r2, r3
 800317a:	6839      	ldr	r1, [r7, #0]
 800317c:	68b8      	ldr	r0, [r7, #8]
 800317e:	f7ff fed3 	bl	8002f28 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8003182:	89fa      	ldrh	r2, [r7, #14]
 8003184:	88bb      	ldrh	r3, [r7, #4]
 8003186:	4413      	add	r3, r2
 8003188:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 800318a:	79fb      	ldrb	r3, [r7, #7]
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	3301      	adds	r3, #1
 8003190:	00db      	lsls	r3, r3, #3
 8003192:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003196:	461a      	mov	r2, r3
 8003198:	89fb      	ldrh	r3, [r7, #14]
 800319a:	0a1b      	lsrs	r3, r3, #8
 800319c:	b29b      	uxth	r3, r3
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	4619      	mov	r1, r3
 80031a2:	4610      	mov	r0, r2
 80031a4:	f7ff fe12 	bl	8002dcc <WIZCHIP_WRITE>
 80031a8:	79fb      	ldrb	r3, [r7, #7]
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	3301      	adds	r3, #1
 80031ae:	00db      	lsls	r3, r3, #3
 80031b0:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 80031b4:	461a      	mov	r2, r3
 80031b6:	89fb      	ldrh	r3, [r7, #14]
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	4619      	mov	r1, r3
 80031bc:	4610      	mov	r0, r2
 80031be:	f7ff fe05 	bl	8002dcc <WIZCHIP_WRITE>
 80031c2:	e000      	b.n	80031c6 <wiz_send_data+0xb2>
   if(len == 0)  return;
 80031c4:	bf00      	nop
}
 80031c6:	3714      	adds	r7, #20
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd90      	pop	{r4, r7, pc}

080031cc <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80031cc:	b590      	push	{r4, r7, lr}
 80031ce:	b085      	sub	sp, #20
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	4603      	mov	r3, r0
 80031d4:	6039      	str	r1, [r7, #0]
 80031d6:	71fb      	strb	r3, [r7, #7]
 80031d8:	4613      	mov	r3, r2
 80031da:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80031dc:	2300      	movs	r3, #0
 80031de:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80031e0:	2300      	movs	r3, #0
 80031e2:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 80031e4:	88bb      	ldrh	r3, [r7, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d048      	beq.n	800327c <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 80031ea:	79fb      	ldrb	r3, [r7, #7]
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	3301      	adds	r3, #1
 80031f0:	00db      	lsls	r3, r3, #3
 80031f2:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7ff fd9c 	bl	8002d34 <WIZCHIP_READ>
 80031fc:	4603      	mov	r3, r0
 80031fe:	b29b      	uxth	r3, r3
 8003200:	021b      	lsls	r3, r3, #8
 8003202:	b29c      	uxth	r4, r3
 8003204:	79fb      	ldrb	r3, [r7, #7]
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	3301      	adds	r3, #1
 800320a:	00db      	lsls	r3, r3, #3
 800320c:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8003210:	4618      	mov	r0, r3
 8003212:	f7ff fd8f 	bl	8002d34 <WIZCHIP_READ>
 8003216:	4603      	mov	r3, r0
 8003218:	b29b      	uxth	r3, r3
 800321a:	4423      	add	r3, r4
 800321c:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 800321e:	89fb      	ldrh	r3, [r7, #14]
 8003220:	021b      	lsls	r3, r3, #8
 8003222:	79fa      	ldrb	r2, [r7, #7]
 8003224:	0092      	lsls	r2, r2, #2
 8003226:	3203      	adds	r2, #3
 8003228:	00d2      	lsls	r2, r2, #3
 800322a:	4413      	add	r3, r2
 800322c:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 800322e:	88bb      	ldrh	r3, [r7, #4]
 8003230:	461a      	mov	r2, r3
 8003232:	6839      	ldr	r1, [r7, #0]
 8003234:	68b8      	ldr	r0, [r7, #8]
 8003236:	f7ff fe17 	bl	8002e68 <WIZCHIP_READ_BUF>
   ptr += len;
 800323a:	89fa      	ldrh	r2, [r7, #14]
 800323c:	88bb      	ldrh	r3, [r7, #4]
 800323e:	4413      	add	r3, r2
 8003240:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8003242:	79fb      	ldrb	r3, [r7, #7]
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	3301      	adds	r3, #1
 8003248:	00db      	lsls	r3, r3, #3
 800324a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800324e:	461a      	mov	r2, r3
 8003250:	89fb      	ldrh	r3, [r7, #14]
 8003252:	0a1b      	lsrs	r3, r3, #8
 8003254:	b29b      	uxth	r3, r3
 8003256:	b2db      	uxtb	r3, r3
 8003258:	4619      	mov	r1, r3
 800325a:	4610      	mov	r0, r2
 800325c:	f7ff fdb6 	bl	8002dcc <WIZCHIP_WRITE>
 8003260:	79fb      	ldrb	r3, [r7, #7]
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	3301      	adds	r3, #1
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 800326c:	461a      	mov	r2, r3
 800326e:	89fb      	ldrh	r3, [r7, #14]
 8003270:	b2db      	uxtb	r3, r3
 8003272:	4619      	mov	r1, r3
 8003274:	4610      	mov	r0, r2
 8003276:	f7ff fda9 	bl	8002dcc <WIZCHIP_WRITE>
 800327a:	e000      	b.n	800327e <wiz_recv_data+0xb2>
   if(len == 0) return;
 800327c:	bf00      	nop
}
 800327e:	3714      	adds	r7, #20
 8003280:	46bd      	mov	sp, r7
 8003282:	bd90      	pop	{r4, r7, pc}

08003284 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8003284:	b480      	push	{r7}
 8003286:	af00      	add	r7, sp, #0
 8003288:	bf00      	nop
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr

08003292 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8003292:	b480      	push	{r7}
 8003294:	af00      	add	r7, sp, #0
 8003296:	bf00      	nop
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 80032a0:	b480      	push	{r7}
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	bf00      	nop
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr

080032ae <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 80032ae:	b480      	push	{r7}
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	bf00      	nop
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	4618      	mov	r0, r3
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr

080032d6 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 80032d6:	b480      	push	{r7}
 80032d8:	b083      	sub	sp, #12
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
 80032de:	460b      	mov	r3, r1
 80032e0:	70fb      	strb	r3, [r7, #3]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	78fa      	ldrb	r2, [r7, #3]
 80032e6:	701a      	strb	r2, [r3, #0]
 80032e8:	bf00      	nop
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 80032f4:	b480      	push	{r7}
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	2300      	movs	r3, #0
 80032fa:	4618      	mov	r0, r3
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	4603      	mov	r3, r0
 800330c:	71fb      	strb	r3, [r7, #7]
 800330e:	bf00      	nop
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
	...

0800331c <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d002      	beq.n	8003332 <reg_wizchip_cs_cbfunc+0x16>
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d106      	bne.n	8003340 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8003332:	4b0a      	ldr	r3, [pc, #40]	; (800335c <reg_wizchip_cs_cbfunc+0x40>)
 8003334:	4a0a      	ldr	r2, [pc, #40]	; (8003360 <reg_wizchip_cs_cbfunc+0x44>)
 8003336:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8003338:	4b08      	ldr	r3, [pc, #32]	; (800335c <reg_wizchip_cs_cbfunc+0x40>)
 800333a:	4a0a      	ldr	r2, [pc, #40]	; (8003364 <reg_wizchip_cs_cbfunc+0x48>)
 800333c:	619a      	str	r2, [r3, #24]
 800333e:	e006      	b.n	800334e <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8003340:	4a06      	ldr	r2, [pc, #24]	; (800335c <reg_wizchip_cs_cbfunc+0x40>)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8003346:	4a05      	ldr	r2, [pc, #20]	; (800335c <reg_wizchip_cs_cbfunc+0x40>)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	6193      	str	r3, [r2, #24]
   }
}
 800334c:	bf00      	nop
 800334e:	bf00      	nop
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	2000000c 	.word	0x2000000c
 8003360:	080032a1 	.word	0x080032a1
 8003364:	080032af 	.word	0x080032af

08003368 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8003372:	bf00      	nop
 8003374:	4b0f      	ldr	r3, [pc, #60]	; (80033b4 <reg_wizchip_spi_cbfunc+0x4c>)
 8003376:	881b      	ldrh	r3, [r3, #0]
 8003378:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800337c:	2b00      	cmp	r3, #0
 800337e:	d0f9      	beq.n	8003374 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d002      	beq.n	800338c <reg_wizchip_spi_cbfunc+0x24>
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d106      	bne.n	800339a <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 800338c:	4b09      	ldr	r3, [pc, #36]	; (80033b4 <reg_wizchip_spi_cbfunc+0x4c>)
 800338e:	4a0a      	ldr	r2, [pc, #40]	; (80033b8 <reg_wizchip_spi_cbfunc+0x50>)
 8003390:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8003392:	4b08      	ldr	r3, [pc, #32]	; (80033b4 <reg_wizchip_spi_cbfunc+0x4c>)
 8003394:	4a09      	ldr	r2, [pc, #36]	; (80033bc <reg_wizchip_spi_cbfunc+0x54>)
 8003396:	621a      	str	r2, [r3, #32]
 8003398:	e006      	b.n	80033a8 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 800339a:	4a06      	ldr	r2, [pc, #24]	; (80033b4 <reg_wizchip_spi_cbfunc+0x4c>)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 80033a0:	4a04      	ldr	r2, [pc, #16]	; (80033b4 <reg_wizchip_spi_cbfunc+0x4c>)
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	6213      	str	r3, [r2, #32]
   }
}
 80033a6:	bf00      	nop
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr
 80033b4:	2000000c 	.word	0x2000000c
 80033b8:	080032f5 	.word	0x080032f5
 80033bc:	08003305 	.word	0x08003305

080033c0 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b086      	sub	sp, #24
 80033c4:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 80033c6:	1d3b      	adds	r3, r7, #4
 80033c8:	2206      	movs	r2, #6
 80033ca:	4619      	mov	r1, r3
 80033cc:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80033d0:	f7ff fd4a 	bl	8002e68 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 80033d4:	f107 0314 	add.w	r3, r7, #20
 80033d8:	2204      	movs	r2, #4
 80033da:	4619      	mov	r1, r3
 80033dc:	f44f 7080 	mov.w	r0, #256	; 0x100
 80033e0:	f7ff fd42 	bl	8002e68 <WIZCHIP_READ_BUF>
 80033e4:	f107 0310 	add.w	r3, r7, #16
 80033e8:	2204      	movs	r2, #4
 80033ea:	4619      	mov	r1, r3
 80033ec:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80033f0:	f7ff fd3a 	bl	8002e68 <WIZCHIP_READ_BUF>
 80033f4:	f107 030c 	add.w	r3, r7, #12
 80033f8:	2204      	movs	r2, #4
 80033fa:	4619      	mov	r1, r3
 80033fc:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003400:	f7ff fd32 	bl	8002e68 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8003404:	2180      	movs	r1, #128	; 0x80
 8003406:	2000      	movs	r0, #0
 8003408:	f7ff fce0 	bl	8002dcc <WIZCHIP_WRITE>
   getMR(); // for delay
 800340c:	2000      	movs	r0, #0
 800340e:	f7ff fc91 	bl	8002d34 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8003412:	1d3b      	adds	r3, r7, #4
 8003414:	2206      	movs	r2, #6
 8003416:	4619      	mov	r1, r3
 8003418:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800341c:	f7ff fd84 	bl	8002f28 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8003420:	f107 0314 	add.w	r3, r7, #20
 8003424:	2204      	movs	r2, #4
 8003426:	4619      	mov	r1, r3
 8003428:	f44f 7080 	mov.w	r0, #256	; 0x100
 800342c:	f7ff fd7c 	bl	8002f28 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8003430:	f107 0310 	add.w	r3, r7, #16
 8003434:	2204      	movs	r2, #4
 8003436:	4619      	mov	r1, r3
 8003438:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800343c:	f7ff fd74 	bl	8002f28 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8003440:	f107 030c 	add.w	r3, r7, #12
 8003444:	2204      	movs	r2, #4
 8003446:	4619      	mov	r1, r3
 8003448:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800344c:	f7ff fd6c 	bl	8002f28 <WIZCHIP_WRITE_BUF>
}
 8003450:	bf00      	nop
 8003452:	3718      	adds	r7, #24
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8003462:	2300      	movs	r3, #0
 8003464:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8003466:	f7ff ffab 	bl	80033c0 <wizchip_sw_reset>
   if(txsize)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d03b      	beq.n	80034e8 <wizchip_init+0x90>
   {
      tmp = 0;
 8003470:	2300      	movs	r3, #0
 8003472:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003474:	2300      	movs	r3, #0
 8003476:	73fb      	strb	r3, [r7, #15]
 8003478:	e015      	b.n	80034a6 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 800347a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	4413      	add	r3, r2
 8003482:	781a      	ldrb	r2, [r3, #0]
 8003484:	7bbb      	ldrb	r3, [r7, #14]
 8003486:	4413      	add	r3, r2
 8003488:	b2db      	uxtb	r3, r3
 800348a:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 800348c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003490:	2b10      	cmp	r3, #16
 8003492:	dd02      	ble.n	800349a <wizchip_init+0x42>
 8003494:	f04f 33ff 	mov.w	r3, #4294967295
 8003498:	e066      	b.n	8003568 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800349a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	3301      	adds	r3, #1
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	73fb      	strb	r3, [r7, #15]
 80034a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034aa:	2b07      	cmp	r3, #7
 80034ac:	dde5      	ble.n	800347a <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80034ae:	2300      	movs	r3, #0
 80034b0:	73fb      	strb	r3, [r7, #15]
 80034b2:	e015      	b.n	80034e0 <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 80034b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	3301      	adds	r3, #1
 80034bc:	00db      	lsls	r3, r3, #3
 80034be:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80034c2:	4618      	mov	r0, r3
 80034c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	4413      	add	r3, r2
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	4619      	mov	r1, r3
 80034d0:	f7ff fc7c 	bl	8002dcc <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80034d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	3301      	adds	r3, #1
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	73fb      	strb	r3, [r7, #15]
 80034e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034e4:	2b07      	cmp	r3, #7
 80034e6:	dde5      	ble.n	80034b4 <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d03b      	beq.n	8003566 <wizchip_init+0x10e>
   {
      tmp = 0;
 80034ee:	2300      	movs	r3, #0
 80034f0:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80034f2:	2300      	movs	r3, #0
 80034f4:	73fb      	strb	r3, [r7, #15]
 80034f6:	e015      	b.n	8003524 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 80034f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034fc:	683a      	ldr	r2, [r7, #0]
 80034fe:	4413      	add	r3, r2
 8003500:	781a      	ldrb	r2, [r3, #0]
 8003502:	7bbb      	ldrb	r3, [r7, #14]
 8003504:	4413      	add	r3, r2
 8003506:	b2db      	uxtb	r3, r3
 8003508:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 800350a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800350e:	2b10      	cmp	r3, #16
 8003510:	dd02      	ble.n	8003518 <wizchip_init+0xc0>
 8003512:	f04f 33ff 	mov.w	r3, #4294967295
 8003516:	e027      	b.n	8003568 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003518:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800351c:	b2db      	uxtb	r3, r3
 800351e:	3301      	adds	r3, #1
 8003520:	b2db      	uxtb	r3, r3
 8003522:	73fb      	strb	r3, [r7, #15]
 8003524:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003528:	2b07      	cmp	r3, #7
 800352a:	dde5      	ble.n	80034f8 <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800352c:	2300      	movs	r3, #0
 800352e:	73fb      	strb	r3, [r7, #15]
 8003530:	e015      	b.n	800355e <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8003532:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	3301      	adds	r3, #1
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8003540:	4618      	mov	r0, r3
 8003542:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003546:	683a      	ldr	r2, [r7, #0]
 8003548:	4413      	add	r3, r2
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	4619      	mov	r1, r3
 800354e:	f7ff fc3d 	bl	8002dcc <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003552:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003556:	b2db      	uxtb	r3, r3
 8003558:	3301      	adds	r3, #1
 800355a:	b2db      	uxtb	r3, r3
 800355c:	73fb      	strb	r3, [r7, #15]
 800355e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003562:	2b07      	cmp	r3, #7
 8003564:	dde5      	ble.n	8003532 <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2206      	movs	r2, #6
 800357c:	4619      	mov	r1, r3
 800357e:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003582:	f7ff fcd1 	bl	8002f28 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	330e      	adds	r3, #14
 800358a:	2204      	movs	r2, #4
 800358c:	4619      	mov	r1, r3
 800358e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003592:	f7ff fcc9 	bl	8002f28 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	330a      	adds	r3, #10
 800359a:	2204      	movs	r2, #4
 800359c:	4619      	mov	r1, r3
 800359e:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80035a2:	f7ff fcc1 	bl	8002f28 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	3306      	adds	r3, #6
 80035aa:	2204      	movs	r2, #4
 80035ac:	4619      	mov	r1, r3
 80035ae:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80035b2:	f7ff fcb9 	bl	8002f28 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	7c9a      	ldrb	r2, [r3, #18]
 80035ba:	4b0b      	ldr	r3, [pc, #44]	; (80035e8 <wizchip_setnetinfo+0x78>)
 80035bc:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	7cda      	ldrb	r2, [r3, #19]
 80035c2:	4b09      	ldr	r3, [pc, #36]	; (80035e8 <wizchip_setnetinfo+0x78>)
 80035c4:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	7d1a      	ldrb	r2, [r3, #20]
 80035ca:	4b07      	ldr	r3, [pc, #28]	; (80035e8 <wizchip_setnetinfo+0x78>)
 80035cc:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	7d5a      	ldrb	r2, [r3, #21]
 80035d2:	4b05      	ldr	r3, [pc, #20]	; (80035e8 <wizchip_setnetinfo+0x78>)
 80035d4:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	7d9a      	ldrb	r2, [r3, #22]
 80035da:	4b04      	ldr	r3, [pc, #16]	; (80035ec <wizchip_setnetinfo+0x7c>)
 80035dc:	701a      	strb	r2, [r3, #0]
}
 80035de:	bf00      	nop
 80035e0:	3708      	adds	r7, #8
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	200000cc 	.word	0x200000cc
 80035ec:	200000d0 	.word	0x200000d0

080035f0 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2206      	movs	r2, #6
 80035fc:	4619      	mov	r1, r3
 80035fe:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003602:	f7ff fc31 	bl	8002e68 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	330e      	adds	r3, #14
 800360a:	2204      	movs	r2, #4
 800360c:	4619      	mov	r1, r3
 800360e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003612:	f7ff fc29 	bl	8002e68 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	330a      	adds	r3, #10
 800361a:	2204      	movs	r2, #4
 800361c:	4619      	mov	r1, r3
 800361e:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003622:	f7ff fc21 	bl	8002e68 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	3306      	adds	r3, #6
 800362a:	2204      	movs	r2, #4
 800362c:	4619      	mov	r1, r3
 800362e:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003632:	f7ff fc19 	bl	8002e68 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8003636:	4b0c      	ldr	r3, [pc, #48]	; (8003668 <wizchip_getnetinfo+0x78>)
 8003638:	781a      	ldrb	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 800363e:	4b0a      	ldr	r3, [pc, #40]	; (8003668 <wizchip_getnetinfo+0x78>)
 8003640:	785a      	ldrb	r2, [r3, #1]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8003646:	4b08      	ldr	r3, [pc, #32]	; (8003668 <wizchip_getnetinfo+0x78>)
 8003648:	789a      	ldrb	r2, [r3, #2]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 800364e:	4b06      	ldr	r3, [pc, #24]	; (8003668 <wizchip_getnetinfo+0x78>)
 8003650:	78da      	ldrb	r2, [r3, #3]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8003656:	4b05      	ldr	r3, [pc, #20]	; (800366c <wizchip_getnetinfo+0x7c>)
 8003658:	781a      	ldrb	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	759a      	strb	r2, [r3, #22]
}
 800365e:	bf00      	nop
 8003660:	3708      	adds	r7, #8
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	200000cc 	.word	0x200000cc
 800366c:	200000d0 	.word	0x200000d0

08003670 <__libc_init_array>:
 8003670:	b570      	push	{r4, r5, r6, lr}
 8003672:	4d0d      	ldr	r5, [pc, #52]	; (80036a8 <__libc_init_array+0x38>)
 8003674:	4c0d      	ldr	r4, [pc, #52]	; (80036ac <__libc_init_array+0x3c>)
 8003676:	1b64      	subs	r4, r4, r5
 8003678:	10a4      	asrs	r4, r4, #2
 800367a:	2600      	movs	r6, #0
 800367c:	42a6      	cmp	r6, r4
 800367e:	d109      	bne.n	8003694 <__libc_init_array+0x24>
 8003680:	4d0b      	ldr	r5, [pc, #44]	; (80036b0 <__libc_init_array+0x40>)
 8003682:	4c0c      	ldr	r4, [pc, #48]	; (80036b4 <__libc_init_array+0x44>)
 8003684:	f000 f820 	bl	80036c8 <_init>
 8003688:	1b64      	subs	r4, r4, r5
 800368a:	10a4      	asrs	r4, r4, #2
 800368c:	2600      	movs	r6, #0
 800368e:	42a6      	cmp	r6, r4
 8003690:	d105      	bne.n	800369e <__libc_init_array+0x2e>
 8003692:	bd70      	pop	{r4, r5, r6, pc}
 8003694:	f855 3b04 	ldr.w	r3, [r5], #4
 8003698:	4798      	blx	r3
 800369a:	3601      	adds	r6, #1
 800369c:	e7ee      	b.n	800367c <__libc_init_array+0xc>
 800369e:	f855 3b04 	ldr.w	r3, [r5], #4
 80036a2:	4798      	blx	r3
 80036a4:	3601      	adds	r6, #1
 80036a6:	e7f2      	b.n	800368e <__libc_init_array+0x1e>
 80036a8:	08003764 	.word	0x08003764
 80036ac:	08003764 	.word	0x08003764
 80036b0:	08003764 	.word	0x08003764
 80036b4:	08003768 	.word	0x08003768

080036b8 <memset>:
 80036b8:	4402      	add	r2, r0
 80036ba:	4603      	mov	r3, r0
 80036bc:	4293      	cmp	r3, r2
 80036be:	d100      	bne.n	80036c2 <memset+0xa>
 80036c0:	4770      	bx	lr
 80036c2:	f803 1b01 	strb.w	r1, [r3], #1
 80036c6:	e7f9      	b.n	80036bc <memset+0x4>

080036c8 <_init>:
 80036c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ca:	bf00      	nop
 80036cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036ce:	bc08      	pop	{r3}
 80036d0:	469e      	mov	lr, r3
 80036d2:	4770      	bx	lr

080036d4 <_fini>:
 80036d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036d6:	bf00      	nop
 80036d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036da:	bc08      	pop	{r3}
 80036dc:	469e      	mov	lr, r3
 80036de:	4770      	bx	lr
